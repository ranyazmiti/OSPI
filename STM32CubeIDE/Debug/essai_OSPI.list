
essai_OSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9b8  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001040  0800dc04  0800dc04  0000ec04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec44  0800ec44  000100bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ec44  0800ec44  0000fc44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec4c  0800ec4c  000100bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec4c  0800ec4c  0000fc4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ec50  0800ec50  0000fc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  0800ec54  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  200000bc  0800ed10  000100bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  0800ed10  000103f8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000100bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001488b  00000000  00000000  000100f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002625  00000000  00000000  0002497d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00026fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e53  00000000  00000000  00028050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032fe1  00000000  00000000  00028ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014924  00000000  00000000  0005be84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001398d8  00000000  00000000  000707a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001aa080  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005094  00000000  00000000  001aa0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001af158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	200000bc 	.word	0x200000bc
 8000268:	00000000 	.word	0x00000000
 800026c:	0800dbec 	.word	0x0800dbec

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	200000c0 	.word	0x200000c0
 8000288:	0800dbec 	.word	0x0800dbec

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__popcountsi2>:
 800029c:	0843      	lsrs	r3, r0, #1
 800029e:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	0883      	lsrs	r3, r0, #2
 80002a6:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 80002aa:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80002ae:	4418      	add	r0, r3
 80002b0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002b4:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 80002b8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002bc:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002c0:	0e00      	lsrs	r0, r0, #24
 80002c2:	4770      	bx	lr

080002c4 <user_provided_block_device_read>:

int user_provided_block_device_read(const struct lfs_config *c,
                                    lfs_block_t block,
                                    lfs_off_t offset,
                                    void *buffer,
                                    lfs_size_t size) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
 80002d0:	603b      	str	r3, [r7, #0]
    uint32_t addr = OSPI_BASE_ADDR + block * c->block_size + offset;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	69db      	ldr	r3, [r3, #28]
 80002d6:	68ba      	ldr	r2, [r7, #8]
 80002d8:	fb03 f202 	mul.w	r2, r3, r2
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4413      	add	r3, r2
 80002e0:	f103 4310 	add.w	r3, r3, #2415919104	@ 0x90000000
 80002e4:	617b      	str	r3, [r7, #20]
    return XSPI_Read(buffer, addr, size);
 80002e6:	6a3a      	ldr	r2, [r7, #32]
 80002e8:	6979      	ldr	r1, [r7, #20]
 80002ea:	6838      	ldr	r0, [r7, #0]
 80002ec:	f000 fddc 	bl	8000ea8 <XSPI_Read>
 80002f0:	4603      	mov	r3, r0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3718      	adds	r7, #24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}

080002fa <user_provided_block_device_prog>:

int user_provided_block_device_prog(const struct lfs_config *c,
                                    lfs_block_t block,
                                    lfs_off_t offset,
                                    const void *buffer,
                                    lfs_size_t size) {
 80002fa:	b580      	push	{r7, lr}
 80002fc:	b086      	sub	sp, #24
 80002fe:	af00      	add	r7, sp, #0
 8000300:	60f8      	str	r0, [r7, #12]
 8000302:	60b9      	str	r1, [r7, #8]
 8000304:	607a      	str	r2, [r7, #4]
 8000306:	603b      	str	r3, [r7, #0]
    uint32_t addr = OSPI_BASE_ADDR + block * c->block_size + offset;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	69db      	ldr	r3, [r3, #28]
 800030c:	68ba      	ldr	r2, [r7, #8]
 800030e:	fb03 f202 	mul.w	r2, r3, r2
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4413      	add	r3, r2
 8000316:	f103 4310 	add.w	r3, r3, #2415919104	@ 0x90000000
 800031a:	617b      	str	r3, [r7, #20]
    return XSPI_Write(buffer, addr, size);
 800031c:	6a3a      	ldr	r2, [r7, #32]
 800031e:	6979      	ldr	r1, [r7, #20]
 8000320:	6838      	ldr	r0, [r7, #0]
 8000322:	f000 fd77 	bl	8000e14 <XSPI_Write>
 8000326:	4603      	mov	r3, r0
}
 8000328:	4618      	mov	r0, r3
 800032a:	3718      	adds	r7, #24
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <user_provided_block_device_erase>:

int user_provided_block_device_erase(const struct lfs_config *c,
                                     lfs_block_t block) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
    uint32_t addr = OSPI_BASE_ADDR + block * c->block_size;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	69db      	ldr	r3, [r3, #28]
 800033e:	683a      	ldr	r2, [r7, #0]
 8000340:	fb02 f303 	mul.w	r3, r2, r3
 8000344:	f103 4310 	add.w	r3, r3, #2415919104	@ 0x90000000
 8000348:	60fb      	str	r3, [r7, #12]
    return XSPI_Erase_Block(addr);
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f000 fd2a 	bl	8000da4 <XSPI_Erase_Block>
 8000350:	4603      	mov	r3, r0
}
 8000352:	4618      	mov	r0, r3
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <user_provided_block_device_sync>:

int user_provided_block_device_sync(const struct lfs_config *c) {
 800035a:	b480      	push	{r7}
 800035c:	b083      	sub	sp, #12
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
    return 0;
 8000362:	2300      	movs	r3, #0
}
 8000364:	4618      	mov	r0, r3
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b0a6      	sub	sp, #152	@ 0x98
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000376:	f007 fdcd 	bl	8007f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037a:	f000 f869 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037e:	f000 f9bd 	bl	80006fc <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000382:	f000 f8d7 	bl	8000534 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 8000386:	f000 f96f 	bl	8000668 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 800038a:	f000 f979 	bl	8000680 <MX_OCTOSPI1_Init>
  if (lfs_mount(&lfs, &cfg) != 0) {
 800038e:	492a      	ldr	r1, [pc, #168]	@ (8000438 <main+0xc8>)
 8000390:	482a      	ldr	r0, [pc, #168]	@ (800043c <main+0xcc>)
 8000392:	f007 fc2f 	bl	8007bf4 <lfs_mount>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d007      	beq.n	80003ac <main+0x3c>
        lfs_format(&lfs, &cfg);
 800039c:	4926      	ldr	r1, [pc, #152]	@ (8000438 <main+0xc8>)
 800039e:	4827      	ldr	r0, [pc, #156]	@ (800043c <main+0xcc>)
 80003a0:	f007 fc12 	bl	8007bc8 <lfs_format>
        lfs_mount(&lfs, &cfg);
 80003a4:	4924      	ldr	r1, [pc, #144]	@ (8000438 <main+0xc8>)
 80003a6:	4825      	ldr	r0, [pc, #148]	@ (800043c <main+0xcc>)
 80003a8:	f007 fc24 	bl	8007bf4 <lfs_mount>
    }

    lfs_file_t file;
    const char *message = "Hello LittleFS via OSPI!";
 80003ac:	4b24      	ldr	r3, [pc, #144]	@ (8000440 <main+0xd0>)
 80003ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    lfs_file_open(&lfs, &file, "test.txt", LFS_O_WRONLY | LFS_O_CREAT);
 80003b2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80003b6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80003ba:	4a22      	ldr	r2, [pc, #136]	@ (8000444 <main+0xd4>)
 80003bc:	481f      	ldr	r0, [pc, #124]	@ (800043c <main+0xcc>)
 80003be:	f007 fc2f 	bl	8007c20 <lfs_file_open>
    lfs_file_write(&lfs, &file, message, strlen(message));
 80003c2:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80003c6:	f7ff ff61 	bl	800028c <strlen>
 80003ca:	4603      	mov	r3, r0
 80003cc:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80003d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80003d4:	4819      	ldr	r0, [pc, #100]	@ (800043c <main+0xcc>)
 80003d6:	f007 fcb3 	bl	8007d40 <lfs_file_write>
    lfs_file_close(&lfs, &file);
 80003da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80003de:	4619      	mov	r1, r3
 80003e0:	4816      	ldr	r0, [pc, #88]	@ (800043c <main+0xcc>)
 80003e2:	f007 fc51 	bl	8007c88 <lfs_file_close>

    char buffer[64] = {0};
 80003e6:	463b      	mov	r3, r7
 80003e8:	2240      	movs	r2, #64	@ 0x40
 80003ea:	2100      	movs	r1, #0
 80003ec:	4618      	mov	r0, r3
 80003ee:	f00c fe0a 	bl	800d006 <memset>
    lfs_file_open(&lfs, &file, "test.txt", LFS_O_RDONLY);
 80003f2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80003f6:	2301      	movs	r3, #1
 80003f8:	4a12      	ldr	r2, [pc, #72]	@ (8000444 <main+0xd4>)
 80003fa:	4810      	ldr	r0, [pc, #64]	@ (800043c <main+0xcc>)
 80003fc:	f007 fc10 	bl	8007c20 <lfs_file_open>
    lfs_file_read(&lfs, &file, buffer, sizeof(buffer));
 8000400:	463a      	mov	r2, r7
 8000402:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000406:	2340      	movs	r3, #64	@ 0x40
 8000408:	480c      	ldr	r0, [pc, #48]	@ (800043c <main+0xcc>)
 800040a:	f007 fc69 	bl	8007ce0 <lfs_file_read>
    lfs_file_close(&lfs, &file);
 800040e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000412:	4619      	mov	r1, r3
 8000414:	4809      	ldr	r0, [pc, #36]	@ (800043c <main+0xcc>)
 8000416:	f007 fc37 	bl	8007c88 <lfs_file_close>

    printf("Lu depuis LittleFS: %s\n", buffer);
 800041a:	463b      	mov	r3, r7
 800041c:	4619      	mov	r1, r3
 800041e:	480a      	ldr	r0, [pc, #40]	@ (8000448 <main+0xd8>)
 8000420:	f00c fd8c 	bl	800cf3c <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000424:	2101      	movs	r1, #1
 8000426:	4809      	ldr	r0, [pc, #36]	@ (800044c <main+0xdc>)
 8000428:	f008 fd70 	bl	8008f0c <HAL_GPIO_TogglePin>
  HAL_Delay(500);
 800042c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000430:	f007 fe2e 	bl	8008090 <HAL_Delay>
  {HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000434:	bf00      	nop
 8000436:	e7f5      	b.n	8000424 <main+0xb4>
 8000438:	20000000 	.word	0x20000000
 800043c:	20000224 	.word	0x20000224
 8000440:	0800dc04 	.word	0x0800dc04
 8000444:	0800dc20 	.word	0x0800dc20
 8000448:	0800dc2c 	.word	0x0800dc2c
 800044c:	42020400 	.word	0x42020400

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b09c      	sub	sp, #112	@ 0x70
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 0320 	add.w	r3, r7, #32
 800045a:	2250      	movs	r2, #80	@ 0x50
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f00c fdd1 	bl	800d006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	f107 0308 	add.w	r3, r7, #8
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
 8000472:	611a      	str	r2, [r3, #16]
 8000474:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000476:	4b2d      	ldr	r3, [pc, #180]	@ (800052c <SystemClock_Config+0xdc>)
 8000478:	691b      	ldr	r3, [r3, #16]
 800047a:	4a2c      	ldr	r2, [pc, #176]	@ (800052c <SystemClock_Config+0xdc>)
 800047c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000480:	6113      	str	r3, [r2, #16]
 8000482:	4b2a      	ldr	r3, [pc, #168]	@ (800052c <SystemClock_Config+0xdc>)
 8000484:	691b      	ldr	r3, [r3, #16]
 8000486:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800048e:	bf00      	nop
 8000490:	4b26      	ldr	r3, [pc, #152]	@ (800052c <SystemClock_Config+0xdc>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	f003 0308 	and.w	r3, r3, #8
 8000498:	2b08      	cmp	r3, #8
 800049a:	d1f9      	bne.n	8000490 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 800049c:	2310      	movs	r3, #16
 800049e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80004a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80004a6:	2320      	movs	r3, #32
 80004a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	2302      	movs	r3, #2
 80004ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80004ae:	2302      	movs	r3, #2
 80004b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004b2:	2301      	movs	r3, #1
 80004b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 80004b6:	237d      	movs	r3, #125	@ 0x7d
 80004b8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004be:	2302      	movs	r3, #2
 80004c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004c2:	2302      	movs	r3, #2
 80004c4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80004c6:	2308      	movs	r3, #8
 80004c8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80004ca:	2300      	movs	r3, #0
 80004cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d2:	f107 0320 	add.w	r3, r7, #32
 80004d6:	4618      	mov	r0, r3
 80004d8:	f008 fd42 	bl	8008f60 <HAL_RCC_OscConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004e2:	f000 f98f 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e6:	231f      	movs	r3, #31
 80004e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ea:	2303      	movs	r3, #3
 80004ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	2105      	movs	r1, #5
 8000504:	4618      	mov	r0, r3
 8000506:	f009 f963 	bl	80097d0 <HAL_RCC_ClockConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000510:	f000 f978 	bl	8000804 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <SystemClock_Config+0xe0>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800051c:	4a04      	ldr	r2, [pc, #16]	@ (8000530 <SystemClock_Config+0xe0>)
 800051e:	f043 0320 	orr.w	r3, r3, #32
 8000522:	6013      	str	r3, [r2, #0]
}
 8000524:	bf00      	nop
 8000526:	3770      	adds	r7, #112	@ 0x70
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	44020800 	.word	0x44020800
 8000530:	40022000 	.word	0x40022000

08000534 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800053a:	4b46      	ldr	r3, [pc, #280]	@ (8000654 <MX_GPDMA1_Init+0x120>)
 800053c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000540:	4a44      	ldr	r2, [pc, #272]	@ (8000654 <MX_GPDMA1_Init+0x120>)
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800054a:	4b42      	ldr	r3, [pc, #264]	@ (8000654 <MX_GPDMA1_Init+0x120>)
 800054c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8000558:	4b3f      	ldr	r3, [pc, #252]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 800055a:	4a40      	ldr	r2, [pc, #256]	@ (800065c <MX_GPDMA1_Init+0x128>)
 800055c:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel1.Init.Request = DMA_REQUEST_SW;
 800055e:	4b3e      	ldr	r3, [pc, #248]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 8000560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000564:	605a      	str	r2, [r3, #4]
  handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000566:	4b3c      	ldr	r3, [pc, #240]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800056c:	4b3a      	ldr	r3, [pc, #232]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 800056e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000572:	60da      	str	r2, [r3, #12]
  handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_FIXED;
 8000574:	4b38      	ldr	r3, [pc, #224]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 800057a:	4b37      	ldr	r3, [pc, #220]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000580:	4b35      	ldr	r3, [pc, #212]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000586:	4b34      	ldr	r3, [pc, #208]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
  handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800058c:	4b32      	ldr	r3, [pc, #200]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 800058e:	2200      	movs	r2, #0
 8000590:	621a      	str	r2, [r3, #32]
  handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8000592:	4b31      	ldr	r3, [pc, #196]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 8000594:	2201      	movs	r2, #1
 8000596:	625a      	str	r2, [r3, #36]	@ 0x24
  handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 8000598:	4b2f      	ldr	r3, [pc, #188]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 800059a:	2201      	movs	r2, #1
 800059c:	629a      	str	r2, [r3, #40]	@ 0x28
  handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800059e:	4b2e      	ldr	r3, [pc, #184]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80005a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	631a      	str	r2, [r3, #48]	@ 0x30
  handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 80005aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80005b0:	4829      	ldr	r0, [pc, #164]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 80005b2:	f007 ff21 	bl	80083f8 <HAL_DMA_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_GPDMA1_Init+0x8c>
  {
    Error_Handler();
 80005bc:	f000 f922 	bl	8000804 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80005c0:	2110      	movs	r1, #16
 80005c2:	4825      	ldr	r0, [pc, #148]	@ (8000658 <MX_GPDMA1_Init+0x124>)
 80005c4:	f008 f883 	bl	80086ce <HAL_DMA_ConfigChannelAttributes>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_GPDMA1_Init+0x9e>
  {
    Error_Handler();
 80005ce:	f000 f919 	bl	8000804 <Error_Handler>
  }
  handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80005d2:	4b23      	ldr	r3, [pc, #140]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 80005d4:	4a23      	ldr	r2, [pc, #140]	@ (8000664 <MX_GPDMA1_Init+0x130>)
 80005d6:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel0.Init.Request = DMA_REQUEST_SW;
 80005d8:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 80005da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005de:	605a      	str	r2, [r3, #4]
  handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80005e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80005e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 80005e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005ec:	60da      	str	r2, [r3, #12]
  handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80005ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 80005f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80005fa:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000600:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000606:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 800060c:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 800060e:	2201      	movs	r2, #1
 8000610:	625a      	str	r2, [r3, #36]	@ 0x24
  handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8000612:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 8000614:	2201      	movs	r2, #1
 8000616:	629a      	str	r2, [r3, #40]	@ 0x28
  handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000618:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	@ 0x2c
  handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800061e:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 8000620:	2200      	movs	r2, #0
 8000622:	631a      	str	r2, [r3, #48]	@ 0x30
  handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8000624:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 8000626:	2200      	movs	r2, #0
 8000628:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800062a:	480d      	ldr	r0, [pc, #52]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 800062c:	f007 fee4 	bl	80083f8 <HAL_DMA_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_GPDMA1_Init+0x106>
  {
    Error_Handler();
 8000636:	f000 f8e5 	bl	8000804 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 800063a:	2110      	movs	r1, #16
 800063c:	4808      	ldr	r0, [pc, #32]	@ (8000660 <MX_GPDMA1_Init+0x12c>)
 800063e:	f008 f846 	bl	80086ce <HAL_DMA_ConfigChannelAttributes>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_GPDMA1_Init+0x118>
  {
    Error_Handler();
 8000648:	f000 f8dc 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	44020c00 	.word	0x44020c00
 8000658:	200000d8 	.word	0x200000d8
 800065c:	400200d0 	.word	0x400200d0
 8000660:	20000150 	.word	0x20000150
 8000664:	40020050 	.word	0x40020050

08000668 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800066c:	f008 fc68 	bl	8008f40 <HAL_ICACHE_Enable>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000676:	f000 f8c5 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <MX_OCTOSPI1_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThresholdByte = 1;
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 800068c:	2201      	movs	r2, #1
 800068e:	605a      	str	r2, [r3, #4]
  hospi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MICRON;
 8000696:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hospi1.Init.MemorySize = HAL_XSPI_SIZE_16B;
 800069c:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTimeCycle = 1;
 80006a2:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 0;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_XSPI_DELAY_BLOCK_BYPASS;
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 80006d4:	2208      	movs	r2, #8
 80006d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.Refresh = 0;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_XSPI_Init(&hospi1) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_OCTOSPI1_Init+0x74>)
 80006e0:	f00b fc30 	bl	800bf44 <HAL_XSPI_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_OCTOSPI1_Init+0x6e>
  {
    Error_Handler();
 80006ea:	f000 f88b 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200001c8 	.word	0x200001c8
 80006f8:	47001400 	.word	0x47001400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	@ 0x24
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000702:	4b3f      	ldr	r3, [pc, #252]	@ (8000800 <MX_GPIO_Init+0x104>)
 8000704:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000708:	4a3d      	ldr	r2, [pc, #244]	@ (8000800 <MX_GPIO_Init+0x104>)
 800070a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800070e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000712:	4b3b      	ldr	r3, [pc, #236]	@ (8000800 <MX_GPIO_Init+0x104>)
 8000714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800071c:	61fb      	str	r3, [r7, #28]
 800071e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000720:	4b37      	ldr	r3, [pc, #220]	@ (8000800 <MX_GPIO_Init+0x104>)
 8000722:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000726:	4a36      	ldr	r2, [pc, #216]	@ (8000800 <MX_GPIO_Init+0x104>)
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000730:	4b33      	ldr	r3, [pc, #204]	@ (8000800 <MX_GPIO_Init+0x104>)
 8000732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b30      	ldr	r3, [pc, #192]	@ (8000800 <MX_GPIO_Init+0x104>)
 8000740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000744:	4a2e      	ldr	r2, [pc, #184]	@ (8000800 <MX_GPIO_Init+0x104>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800074e:	4b2c      	ldr	r3, [pc, #176]	@ (8000800 <MX_GPIO_Init+0x104>)
 8000750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075c:	4b28      	ldr	r3, [pc, #160]	@ (8000800 <MX_GPIO_Init+0x104>)
 800075e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000762:	4a27      	ldr	r2, [pc, #156]	@ (8000800 <MX_GPIO_Init+0x104>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800076c:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <MX_GPIO_Init+0x104>)
 800076e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000772:	f003 0310 	and.w	r3, r3, #16
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <MX_GPIO_Init+0x104>)
 800077c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000780:	4a1f      	ldr	r2, [pc, #124]	@ (8000800 <MX_GPIO_Init+0x104>)
 8000782:	f043 0304 	orr.w	r3, r3, #4
 8000786:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_GPIO_Init+0x104>)
 800078c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000790:	f003 0304 	and.w	r3, r3, #4
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_GPIO_Init+0x104>)
 800079a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800079e:	4a18      	ldr	r2, [pc, #96]	@ (8000800 <MX_GPIO_Init+0x104>)
 80007a0:	f043 0320 	orr.w	r3, r3, #32
 80007a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007a8:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <MX_GPIO_Init+0x104>)
 80007aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007ae:	f003 0320 	and.w	r3, r3, #32
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_GPIO_Init+0x104>)
 80007b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007bc:	4a10      	ldr	r2, [pc, #64]	@ (8000800 <MX_GPIO_Init+0x104>)
 80007be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_GPIO_Init+0x104>)
 80007c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <MX_GPIO_Init+0x104>)
 80007d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007da:	4a09      	ldr	r2, [pc, #36]	@ (8000800 <MX_GPIO_Init+0x104>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_GPIO_Init+0x104>)
 80007e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007f2:	bf00      	nop
 80007f4:	3724      	adds	r7, #36	@ 0x24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	44020c00 	.word	0x44020c00

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <Error_Handler+0x8>

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <HAL_XSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hxspi: XSPI handle pointer
  * @retval None
  */
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b0d2      	sub	sp, #328	@ 0x148
 8000824:	af00      	add	r7, sp, #0
 8000826:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800082a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800082e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000840:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000844:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000848:	4618      	mov	r0, r3
 800084a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800084e:	461a      	mov	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f00c fbd8 	bl	800d006 <memset>
  if(hxspi->Instance==OCTOSPI1)
 8000856:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800085a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4ac7      	ldr	r2, [pc, #796]	@ (8000b80 <HAL_XSPI_MspInit+0x360>)
 8000864:	4293      	cmp	r3, r2
 8000866:	f040 8185 	bne.w	8000b74 <HAL_XSPI_MspInit+0x354>

    /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800086a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800086e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	f04f 0302 	mov.w	r3, #2
 800087a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_HCLK;
 800087e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000882:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000886:	2200      	movs	r2, #0
 8000888:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000890:	4618      	mov	r0, r3
 8000892:	f009 fa9d 	bl	8009dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_XSPI_MspInit+0x80>
    {
      Error_Handler();
 800089c:	f7ff ffb2 	bl	8000804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80008a0:	4bb8      	ldr	r3, [pc, #736]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 80008a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008a6:	4ab7      	ldr	r2, [pc, #732]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 80008a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80008ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80008b0:	4bb4      	ldr	r3, [pc, #720]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 80008b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008b6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80008ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008be:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80008cc:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ce:	4bad      	ldr	r3, [pc, #692]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 80008d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008d4:	4aab      	ldr	r2, [pc, #684]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 80008d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008de:	4ba9      	ldr	r3, [pc, #676]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 80008e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008e4:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80008e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008ec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80008fa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fc:	4ba1      	ldr	r3, [pc, #644]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 80008fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000902:	4aa0      	ldr	r2, [pc, #640]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800090c:	4b9d      	ldr	r3, [pc, #628]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 800090e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000912:	f003 0208 	and.w	r2, r3, #8
 8000916:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800091a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000924:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000928:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b96      	ldr	r3, [pc, #600]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 800092c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000930:	4a94      	ldr	r2, [pc, #592]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 8000932:	f043 0302 	orr.w	r3, r3, #2
 8000936:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800093a:	4b92      	ldr	r3, [pc, #584]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 800093c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000940:	f003 0202 	and.w	r2, r3, #2
 8000944:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000948:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000952:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000956:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000958:	4b8a      	ldr	r3, [pc, #552]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 800095a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800095e:	4a89      	ldr	r2, [pc, #548]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000968:	4b86      	ldr	r3, [pc, #536]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 800096a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800096e:	f003 0210 	and.w	r2, r3, #16
 8000972:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000976:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000980:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000984:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b7f      	ldr	r3, [pc, #508]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 8000988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800098c:	4a7d      	ldr	r2, [pc, #500]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000996:	4b7b      	ldr	r3, [pc, #492]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 8000998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800099c:	f003 0204 	and.w	r2, r3, #4
 80009a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009a4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80009b2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009b4:	4b73      	ldr	r3, [pc, #460]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 80009b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ba:	4a72      	ldr	r2, [pc, #456]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 80009bc:	f043 0320 	orr.w	r3, r3, #32
 80009c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009c4:	4b6f      	ldr	r3, [pc, #444]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 80009c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ca:	f003 0220 	and.w	r2, r3, #32
 80009ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009d2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80009e0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b68      	ldr	r3, [pc, #416]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 80009e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009e8:	4a66      	ldr	r2, [pc, #408]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009f2:	4b64      	ldr	r3, [pc, #400]	@ (8000b84 <HAL_XSPI_MspInit+0x364>)
 80009f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009f8:	f003 0201 	and.w	r2, r3, #1
 80009fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000a00:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000a0a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000a0e:	681b      	ldr	r3, [r3, #0]
    PC10     ------> OCTOSPI1_IO1
    PC9     ------> OCTOSPI1_IO0
    PF6     ------> OCTOSPI1_IO3
    PA1     ------> OCTOSPI1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8000a10:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8000a14:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000a2a:	2309      	movs	r3, #9
 8000a2c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a30:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000a34:	4619      	mov	r1, r3
 8000a36:	4854      	ldr	r0, [pc, #336]	@ (8000b88 <HAL_XSPI_MspInit+0x368>)
 8000a38:	f008 f90a 	bl	8008c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000a3c:	2330      	movs	r3, #48	@ 0x30
 8000a3e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000a54:	230a      	movs	r3, #10
 8000a56:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5a:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000a5e:	4619      	mov	r1, r3
 8000a60:	484a      	ldr	r0, [pc, #296]	@ (8000b8c <HAL_XSPI_MspInit+0x36c>)
 8000a62:	f008 f8f5 	bl	8008c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a66:	2340      	movs	r3, #64	@ 0x40
 8000a68:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000a7e:	230a      	movs	r3, #10
 8000a80:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4841      	ldr	r0, [pc, #260]	@ (8000b90 <HAL_XSPI_MspInit+0x370>)
 8000a8c:	f008 f8e0 	bl	8008c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a90:	2310      	movs	r3, #16
 8000a92:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4836      	ldr	r0, [pc, #216]	@ (8000b90 <HAL_XSPI_MspInit+0x370>)
 8000ab6:	f008 f8cb 	bl	8008c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aba:	2304      	movs	r3, #4
 8000abc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000ad2:	2309      	movs	r3, #9
 8000ad4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000adc:	4619      	mov	r1, r3
 8000ade:	482d      	ldr	r0, [pc, #180]	@ (8000b94 <HAL_XSPI_MspInit+0x374>)
 8000ae0:	f008 f8b6 	bl	8008c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000ae4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ae8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000afe:	2309      	movs	r3, #9
 8000b00:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b04:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4823      	ldr	r0, [pc, #140]	@ (8000b98 <HAL_XSPI_MspInit+0x378>)
 8000b0c:	f008 f8a0 	bl	8008c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b10:	2340      	movs	r3, #64	@ 0x40
 8000b12:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000b28:	230a      	movs	r3, #10
 8000b2a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b2e:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000b32:	4619      	mov	r1, r3
 8000b34:	4819      	ldr	r0, [pc, #100]	@ (8000b9c <HAL_XSPI_MspInit+0x37c>)
 8000b36:	f008 f88b 	bl	8008c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI1;
 8000b52:	2306      	movs	r3, #6
 8000b54:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4810      	ldr	r0, [pc, #64]	@ (8000ba0 <HAL_XSPI_MspInit+0x380>)
 8000b60:	f008 f876 	bl	8008c50 <HAL_GPIO_Init>

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	204e      	movs	r0, #78	@ 0x4e
 8000b6a:	f007 fb6d 	bl	8008248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8000b6e:	204e      	movs	r0, #78	@ 0x4e
 8000b70:	f007 fb84 	bl	800827c <HAL_NVIC_EnableIRQ>

    /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8000b74:	bf00      	nop
 8000b76:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	47001400 	.word	0x47001400
 8000b84:	44020c00 	.word	0x44020c00
 8000b88:	42021800 	.word	0x42021800
 8000b8c:	42020c00 	.word	0x42020c00
 8000b90:	42020400 	.word	0x42020400
 8000b94:	42021000 	.word	0x42021000
 8000b98:	42020800 	.word	0x42020800
 8000b9c:	42021400 	.word	0x42021400
 8000ba0:	42020000 	.word	0x42020000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <NMI_Handler+0x4>

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfa:	f007 fa29 	bl	8008050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_XSPI_IRQHandler(&hospi1);
 8000c08:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <OCTOSPI1_IRQHandler+0x10>)
 8000c0a:	f00b fa73 	bl	800c0f4 <HAL_XSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200001c8 	.word	0x200001c8

08000c18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return 1;
 8000c1c:	2301      	movs	r3, #1
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <_kill>:

int _kill(int pid, int sig)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c32:	f00c fa67 	bl	800d104 <__errno>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2216      	movs	r2, #22
 8000c3a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <_exit>:

void _exit (int status)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ffe7 	bl	8000c28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c5a:	bf00      	nop
 8000c5c:	e7fd      	b.n	8000c5a <_exit+0x12>

08000c5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	60f8      	str	r0, [r7, #12]
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	e00a      	b.n	8000c86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c70:	f3af 8000 	nop.w
 8000c74:	4601      	mov	r1, r0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	60ba      	str	r2, [r7, #8]
 8000c7c:	b2ca      	uxtb	r2, r1
 8000c7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3301      	adds	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	dbf0      	blt.n	8000c70 <_read+0x12>
  }

  return len;
 8000c8e:	687b      	ldr	r3, [r7, #4]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	e009      	b.n	8000cbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1c5a      	adds	r2, r3, #1
 8000cae:	60ba      	str	r2, [r7, #8]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	dbf1      	blt.n	8000caa <_write+0x12>
  }
  return len;
 8000cc6:	687b      	ldr	r3, [r7, #4]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_close>:

int _close(int file)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cf8:	605a      	str	r2, [r3, #4]
  return 0;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_isatty>:

int _isatty(int file)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d10:	2301      	movs	r3, #1
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b085      	sub	sp, #20
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f00c f9cc 	bl	800d104 <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200a0000 	.word	0x200a0000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	200002a4 	.word	0x200002a4
 8000da0:	200003f8 	.word	0x200003f8

08000da4 <XSPI_Erase_Block>:
int XSPI_Init(void) {
    // Si déjà initialisé dans MX_XSPI1_Init(), rien à faire
    return 0;
}

int XSPI_Erase_Block(uint32_t address) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b096      	sub	sp, #88	@ 0x58
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
    XSPI_RegularCmdTypeDef sCommand = {0};
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	2250      	movs	r2, #80	@ 0x50
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f00c f926 	bl	800d006 <memset>

    sCommand.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
    sCommand.InstructionMode    = HAL_XSPI_INSTRUCTION_1_LINE;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
    sCommand.Instruction        = 0x20; // Sector erase
 8000dc2:	2320      	movs	r3, #32
 8000dc4:	613b      	str	r3, [r7, #16]
    sCommand.AddressMode        = HAL_XSPI_ADDRESS_1_LINE;
 8000dc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressWidth        = HAL_XSPI_ADDRESS_24_BITS;
 8000dcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.Address            = address;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	623b      	str	r3, [r7, #32]
    sCommand.DataMode           = HAL_XSPI_DATA_NONE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.DummyCycles        = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
    sCommand.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	64bb      	str	r3, [r7, #72]	@ 0x48

    if (HAL_XSPI_Command(&hospi1, &sCommand, XSPI_TIMEOUT) != HAL_OK)
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000df2:	4619      	mov	r1, r3
 8000df4:	4806      	ldr	r0, [pc, #24]	@ (8000e10 <XSPI_Erase_Block+0x6c>)
 8000df6:	f00b fad1 	bl	800c39c <HAL_XSPI_Command>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <XSPI_Erase_Block+0x62>
        return -1;
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295
 8000e04:	e000      	b.n	8000e08 <XSPI_Erase_Block+0x64>

    // Attente que l'effacement soit terminé (ajouter si nécessaire)
    return 0;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3758      	adds	r7, #88	@ 0x58
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200001c8 	.word	0x200001c8

08000e14 <XSPI_Write>:

int XSPI_Write(const void *buffer, uint32_t address, size_t size) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b098      	sub	sp, #96	@ 0x60
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
    XSPI_RegularCmdTypeDef sCommand = {0};
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	2250      	movs	r2, #80	@ 0x50
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f00c f8ec 	bl	800d006 <memset>

    sCommand.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
    sCommand.InstructionMode    = HAL_XSPI_INSTRUCTION_1_LINE;
 8000e32:	2301      	movs	r3, #1
 8000e34:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction        = 0x02; // Page program
 8000e36:	2302      	movs	r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode        = HAL_XSPI_ADDRESS_1_LINE;
 8000e3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AddressWidth        = HAL_XSPI_ADDRESS_24_BITS;
 8000e40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e44:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.Address            = address;
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.DataMode           = HAL_XSPI_DATA_1_LINE;
 8000e4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DataLength         = size;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sCommand.DummyCycles        = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	653b      	str	r3, [r7, #80]	@ 0x50

    if (HAL_XSPI_Command(&hospi1, &sCommand, XSPI_TIMEOUT) != HAL_OK)
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480d      	ldr	r0, [pc, #52]	@ (8000ea4 <XSPI_Write+0x90>)
 8000e70:	f00b fa94 	bl	800c39c <HAL_XSPI_Command>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d002      	beq.n	8000e80 <XSPI_Write+0x6c>
        return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	e00c      	b.n	8000e9a <XSPI_Write+0x86>

    if (HAL_XSPI_Transmit(&hospi1, (uint8_t *)buffer, XSPI_TIMEOUT) != HAL_OK)
 8000e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e84:	68f9      	ldr	r1, [r7, #12]
 8000e86:	4807      	ldr	r0, [pc, #28]	@ (8000ea4 <XSPI_Write+0x90>)
 8000e88:	f00b fb18 	bl	800c4bc <HAL_XSPI_Transmit>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d002      	beq.n	8000e98 <XSPI_Write+0x84>
        return -1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e000      	b.n	8000e9a <XSPI_Write+0x86>

    return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3760      	adds	r7, #96	@ 0x60
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200001c8 	.word	0x200001c8

08000ea8 <XSPI_Read>:

int XSPI_Read(void *buffer, uint32_t address, size_t size) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b098      	sub	sp, #96	@ 0x60
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
    XSPI_RegularCmdTypeDef sCommand = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2250      	movs	r2, #80	@ 0x50
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f00c f8a2 	bl	800d006 <memset>

    sCommand.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
    sCommand.InstructionMode    = HAL_XSPI_INSTRUCTION_1_LINE;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction        = 0x03; // Read data
 8000eca:	2303      	movs	r3, #3
 8000ecc:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode        = HAL_XSPI_ADDRESS_1_LINE;
 8000ece:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AddressWidth        = HAL_XSPI_ADDRESS_24_BITS;
 8000ed4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ed8:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.Address            = address;
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.DataMode           = HAL_XSPI_DATA_1_LINE;
 8000ede:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DataLength         = size;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sCommand.DummyCycles        = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	653b      	str	r3, [r7, #80]	@ 0x50

    if (HAL_XSPI_Command(&hospi1, &sCommand, XSPI_TIMEOUT) != HAL_OK)
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f00:	4619      	mov	r1, r3
 8000f02:	480d      	ldr	r0, [pc, #52]	@ (8000f38 <XSPI_Read+0x90>)
 8000f04:	f00b fa4a 	bl	800c39c <HAL_XSPI_Command>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <XSPI_Read+0x6c>
        return -1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e00c      	b.n	8000f2e <XSPI_Read+0x86>

    if (HAL_XSPI_Receive(&hospi1, (uint8_t *)buffer, XSPI_TIMEOUT) != HAL_OK)
 8000f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f18:	68f9      	ldr	r1, [r7, #12]
 8000f1a:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <XSPI_Read+0x90>)
 8000f1c:	f00b fb41 	bl	800c5a2 <HAL_XSPI_Receive>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <XSPI_Read+0x84>
        return -1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	e000      	b.n	8000f2e <XSPI_Read+0x86>

    return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3760      	adds	r7, #96	@ 0x60
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200001c8 	.word	0x200001c8

08000f3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f3c:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f3e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f40:	f006 ff6c 	bl	8007e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f46:	490d      	ldr	r1, [pc, #52]	@ (8000f7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f48:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <LoopForever+0xe>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f88 <LoopForever+0x16>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f6a:	f00c f8d1 	bl	800d110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f6e:	f7ff f9ff 	bl	8000370 <main>

08000f72 <LoopForever>:

LoopForever:
    b LoopForever
 8000f72:	e7fe      	b.n	8000f72 <LoopForever>
  ldr   r0, =_estack
 8000f74:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8000f80:	0800ec54 	.word	0x0800ec54
  ldr r2, =_sbss
 8000f84:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8000f88:	200003f8 	.word	0x200003f8

08000f8c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC1_IRQHandler>

08000f8e <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	bf38      	it	cc
 8000fa0:	4613      	movcc	r3, r2
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	bf28      	it	cs
 8000fc0:	4613      	movcs	r3, r2
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	fbb3 f2f2 	udiv	r2, r3, r2
 8000fe0:	6839      	ldr	r1, [r7, #0]
 8000fe2:	fb01 f202 	mul.w	r2, r1, r2
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	1ad3      	subs	r3, r2, r3
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	4413      	add	r3, r2
 8001008:	3b01      	subs	r3, #1
 800100a:	6839      	ldr	r1, [r7, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffde 	bl	8000fce <lfs_aligndown>
 8001012:	4603      	mov	r3, r0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	fab3 f383 	clz	r3, r3
 800102c:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	fa93 f3a3 	rbit	r3, r3
 800104a:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff f91a 	bl	800029c <__popcountsi2>
 8001068:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	1ad3      	subs	r3, r2, r3
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8001096:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ffee 	bl	800108e <lfs_fromle32>
 80010b2:	4603      	mov	r3, r0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ffed 	bl	80010bc <lfs_frombe32>
 80010e2:	4603      	mov	r3, r0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f00b fd8f 	bl	800cc18 <malloc>
 80010fa:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f00b fd8b 	bl	800cc28 <free>
#else
    (void)p;
#endif
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f04f 32ff 	mov.w	r2, #4294967295
 800112a:	601a      	str	r2, [r3, #0]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68d8      	ldr	r0, [r3, #12]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800114a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800114c:	461a      	mov	r2, r3
 800114e:	21ff      	movs	r1, #255	@ 0xff
 8001150:	f00b ff59 	bl	800d006 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f04f 32ff 	mov.w	r2, #4294967295
 800115a:	601a      	str	r2, [r3, #0]
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8001164:	b5b0      	push	{r4, r5, r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001174:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8001176:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800117a:	441a      	add	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	429a      	cmp	r2, r3
 8001184:	d80a      	bhi.n	800119c <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 8124 	beq.w	80013d8 <lfs_bd_read+0x274>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001196:	429a      	cmp	r2, r3
 8001198:	f0c0 811e 	bcc.w	80013d8 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 800119c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80011a0:	e11f      	b.n	80013e2 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80011a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011a4:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d03f      	beq.n	800122c <lfs_bd_read+0xc8>
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d13a      	bne.n	800122c <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 80011c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d232      	bcs.n	800122c <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d324      	bcc.n	800121a <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	6859      	ldr	r1, [r3, #4]
 80011d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011da:	1acb      	subs	r3, r1, r3
 80011dc:	4413      	add	r3, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	69b8      	ldr	r0, [r7, #24]
 80011e2:	f7ff fee4 	bl	8000fae <lfs_min>
 80011e6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80011f2:	1acb      	subs	r3, r1, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4619      	mov	r1, r3
 80011fa:	69f8      	ldr	r0, [r7, #28]
 80011fc:	f00b ffaf 	bl	800d15e <memcpy>

                data += diff;
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4413      	add	r3, r2
 8001206:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4413      	add	r3, r2
 800120e:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8001210:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8001218:	e0de      	b.n	80013d8 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	4619      	mov	r1, r3
 8001224:	69b8      	ldr	r0, [r7, #24]
 8001226:	f7ff fec2 	bl	8000fae <lfs_min>
 800122a:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001232:	429a      	cmp	r2, r3
 8001234:	d13a      	bne.n	80012ac <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	4413      	add	r3, r2
        if (block == rcache->block &&
 8001240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001242:	429a      	cmp	r2, r3
 8001244:	d232      	bcs.n	80012ac <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800124c:	429a      	cmp	r2, r3
 800124e:	d324      	bcc.n	800129a <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6859      	ldr	r1, [r3, #4]
 8001258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800125a:	1acb      	subs	r3, r1, r3
 800125c:	4413      	add	r3, r2
 800125e:	4619      	mov	r1, r3
 8001260:	69b8      	ldr	r0, [r7, #24]
 8001262:	f7ff fea4 	bl	8000fae <lfs_min>
 8001266:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001272:	1acb      	subs	r3, r1, r3
 8001274:	4413      	add	r3, r2
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4619      	mov	r1, r3
 800127a:	69f8      	ldr	r0, [r7, #28]
 800127c:	f00b ff6f 	bl	800d15e <memcpy>

                data += diff;
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	4413      	add	r3, r2
 8001286:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001288:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4413      	add	r3, r2
 800128e:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8001290:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8001298:	e09e      	b.n	80013d8 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	4619      	mov	r1, r3
 80012a4:	69b8      	ldr	r0, [r7, #24]
 80012a6:	f7ff fe82 	bl	8000fae <lfs_min>
 80012aa:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80012ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d336      	bcc.n	8001322 <lfs_bd_read+0x1be>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80012c0:	fb01 f202 	mul.w	r2, r1, r2
 80012c4:	1a9b      	subs	r3, r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d12b      	bne.n	8001322 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80012ce:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80012d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d325      	bcc.n	8001322 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	4619      	mov	r1, r3
 80012de:	69b8      	ldr	r0, [r7, #24]
 80012e0:	f7ff fe75 	bl	8000fce <lfs_aligndown>
 80012e4:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80012ea:	685c      	ldr	r4, [r3, #4]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012fa:	47a0      	blx	r4
 80012fc:	6178      	str	r0, [r7, #20]
            if (err) {
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <lfs_bd_read+0x1a4>
                return err;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	e06c      	b.n	80013e2 <lfs_bd_read+0x27e>
            }

            data += diff;
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4413      	add	r3, r2
 800130e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8001310:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4413      	add	r3, r2
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 8001318:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 8001320:	e05a      	b.n	80013d8 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00a      	beq.n	8001340 <lfs_bd_read+0x1dc>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800132e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001330:	429a      	cmp	r2, r3
 8001332:	d305      	bcc.n	8001340 <lfs_bd_read+0x1dc>
 8001334:	4b2d      	ldr	r3, [pc, #180]	@ (80013ec <lfs_bd_read+0x288>)
 8001336:	4a2e      	ldr	r2, [pc, #184]	@ (80013f0 <lfs_bd_read+0x28c>)
 8001338:	216b      	movs	r1, #107	@ 0x6b
 800133a:	482e      	ldr	r0, [pc, #184]	@ (80013f4 <lfs_bd_read+0x290>)
 800133c:	f00b fc4e 	bl	800cbdc <__assert_func>
        rcache->block = block;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001344:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	4619      	mov	r1, r3
 800134e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001350:	f7ff fe3d 	bl	8000fce <lfs_aligndown>
 8001354:	4602      	mov	r2, r0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800135a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001364:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8001366:	4619      	mov	r1, r3
 8001368:	4610      	mov	r0, r2
 800136a:	f7ff fe45 	bl	8000ff8 <lfs_alignup>
 800136e:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001374:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8001376:	4619      	mov	r1, r3
 8001378:	4610      	mov	r0, r2
 800137a:	f7ff fe18 	bl	8000fae <lfs_min>
 800137e:	4602      	mov	r2, r0
                - rcache->off,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8001384:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 800138c:	4619      	mov	r1, r3
 800138e:	4610      	mov	r0, r2
 8001390:	f7ff fe0d 	bl	8000fae <lfs_min>
 8001394:	4602      	mov	r2, r0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800139e:	685c      	ldr	r4, [r3, #4]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6819      	ldr	r1, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	462b      	mov	r3, r5
 80013b8:	47a0      	blx	r4
 80013ba:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dd05      	ble.n	80013ce <lfs_bd_read+0x26a>
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <lfs_bd_read+0x294>)
 80013c4:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <lfs_bd_read+0x28c>)
 80013c6:	2176      	movs	r1, #118	@ 0x76
 80013c8:	480a      	ldr	r0, [pc, #40]	@ (80013f4 <lfs_bd_read+0x290>)
 80013ca:	f00b fc07 	bl	800cbdc <__assert_func>
        if (err) {
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <lfs_bd_read+0x274>
            return err;
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	e004      	b.n	80013e2 <lfs_bd_read+0x27e>
    while (size > 0) {
 80013d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f47f aee1 	bne.w	80011a2 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bdb0      	pop	{r4, r5, r7, pc}
 80013ea:	bf00      	nop
 80013ec:	0800dc44 	.word	0x0800dc44
 80013f0:	0800ea40 	.word	0x0800ea40
 80013f4:	0800dc74 	.word	0x0800dc74
 80013f8:	0800dcac 	.word	0x0800dcac

080013fc <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b090      	sub	sp, #64	@ 0x40
 8001400:	af04      	add	r7, sp, #16
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800140a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001416:	e039      	b.n	800148c <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8001418:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800141a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2108      	movs	r1, #8
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fdc4 	bl	8000fae <lfs_min>
 8001426:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800142c:	1ad1      	subs	r1, r2, r3
 800142e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001432:	4413      	add	r3, r2
 8001434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001436:	9203      	str	r2, [sp, #12]
 8001438:	f107 0214 	add.w	r2, r7, #20
 800143c:	9202      	str	r2, [sp, #8]
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	460b      	mov	r3, r1
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff fe8a 	bl	8001164 <lfs_bd_read>
 8001450:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <lfs_bd_cmp+0x60>
            return err;
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	e01c      	b.n	8001496 <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 800145c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800145e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001460:	18d1      	adds	r1, r2, r3
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001468:	4618      	mov	r0, r3
 800146a:	f00b fdbc 	bl	800cfe6 <memcmp>
 800146e:	61f8      	str	r0, [r7, #28]
        if (res) {
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	2b00      	cmp	r3, #0
 800147a:	da01      	bge.n	8001480 <lfs_bd_cmp+0x84>
 800147c:	2301      	movs	r3, #1
 800147e:	e00a      	b.n	8001496 <lfs_bd_cmp+0x9a>
 8001480:	2302      	movs	r3, #2
 8001482:	e008      	b.n	8001496 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8001484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	4413      	add	r3, r2
 800148a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800148c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800148e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001490:	429a      	cmp	r2, r3
 8001492:	d3c1      	bcc.n	8001418 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3730      	adds	r7, #48	@ 0x30
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 800149e:	b580      	push	{r7, lr}
 80014a0:	b08e      	sub	sp, #56	@ 0x38
 80014a2:	af04      	add	r7, sp, #16
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014b4:	e030      	b.n	8001518 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 80014b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80014b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2108      	movs	r1, #8
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fd75 	bl	8000fae <lfs_min>
 80014c4:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ca:	1ad1      	subs	r1, r2, r3
 80014cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	4413      	add	r3, r2
 80014d2:	6a3a      	ldr	r2, [r7, #32]
 80014d4:	9203      	str	r2, [sp, #12]
 80014d6:	f107 0214 	add.w	r2, r7, #20
 80014da:	9202      	str	r2, [sp, #8]
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	460b      	mov	r3, r1
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	68b9      	ldr	r1, [r7, #8]
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f7ff fe3b 	bl	8001164 <lfs_bd_read>
 80014ee:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <lfs_bd_crc+0x5c>
            return err;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	e013      	b.n	8001522 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 80014fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f107 0114 	add.w	r1, r7, #20
 8001502:	6a3a      	ldr	r2, [r7, #32]
 8001504:	4618      	mov	r0, r3
 8001506:	f006 fc4b 	bl	8007da0 <lfs_crc>
 800150a:	4602      	mov	r2, r0
 800150c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800150e:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8001510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	4413      	add	r3, r2
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
 8001518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800151a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800151c:	429a      	cmp	r2, r3
 800151e:	d3ca      	bcc.n	80014b6 <lfs_bd_crc+0x18>
    }

    return 0;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3728      	adds	r7, #40	@ 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	b08c      	sub	sp, #48	@ 0x30
 8001530:	af04      	add	r7, sp, #16
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001542:	d060      	beq.n	8001606 <lfs_bd_flush+0xda>
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f113 0f02 	cmn.w	r3, #2
 800154c:	d05b      	beq.n	8001606 <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001556:	429a      	cmp	r2, r3
 8001558:	d305      	bcc.n	8001566 <lfs_bd_flush+0x3a>
 800155a:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <lfs_bd_flush+0xe4>)
 800155c:	4a2d      	ldr	r2, [pc, #180]	@ (8001614 <lfs_bd_flush+0xe8>)
 800155e:	21b3      	movs	r1, #179	@ 0xb3
 8001560:	482d      	ldr	r0, [pc, #180]	@ (8001618 <lfs_bd_flush+0xec>)
 8001562:	f00b fb3b 	bl	800cbdc <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4619      	mov	r1, r3
 8001572:	4610      	mov	r0, r2
 8001574:	f7ff fd40 	bl	8000ff8 <lfs_alignup>
 8001578:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800157e:	689c      	ldr	r4, [r3, #8]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	6819      	ldr	r1, [r3, #0]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	462b      	mov	r3, r5
 8001596:	47a0      	blx	r4
 8001598:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b00      	cmp	r3, #0
 800159e:	dd05      	ble.n	80015ac <lfs_bd_flush+0x80>
 80015a0:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <lfs_bd_flush+0xf0>)
 80015a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001614 <lfs_bd_flush+0xe8>)
 80015a4:	21b7      	movs	r1, #183	@ 0xb7
 80015a6:	481c      	ldr	r0, [pc, #112]	@ (8001618 <lfs_bd_flush+0xec>)
 80015a8:	f00b fb18 	bl	800cbdc <__assert_func>
        if (err) {
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <lfs_bd_flush+0x8a>
            return err;
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	e028      	b.n	8001608 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d020      	beq.n	80015fe <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f7ff fdab 	bl	800111a <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 80015d0:	69f8      	ldr	r0, [r7, #28]
 80015d2:	9003      	str	r0, [sp, #12]
 80015d4:	9102      	str	r1, [sp, #8]
 80015d6:	9201      	str	r2, [sp, #4]
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	2100      	movs	r1, #0
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7ff ff0b 	bl	80013fc <lfs_bd_cmp>
 80015e6:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	da01      	bge.n	80015f2 <lfs_bd_flush+0xc6>
                return res;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	e00a      	b.n	8001608 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 80015f8:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80015fc:	e004      	b.n	8001608 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 80015fe:	68b9      	ldr	r1, [r7, #8]
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff fd99 	bl	8001138 <lfs_cache_zero>
    }

    return 0;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3720      	adds	r7, #32
 800160c:	46bd      	mov	sp, r7
 800160e:	bdb0      	pop	{r4, r5, r7, pc}
 8001610:	0800dcb8 	.word	0x0800dcb8
 8001614:	0800ea4c 	.word	0x0800ea4c
 8001618:	0800dc74 	.word	0x0800dc74
 800161c:	0800dcac 	.word	0x0800dcac

08001620 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f7ff fd72 	bl	800111a <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7ff ff75 	bl	800152c <lfs_bd_flush>
 8001642:	6178      	str	r0, [r7, #20]
    if (err) {
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <lfs_bd_sync+0x2e>
        return err;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	e011      	b.n	8001672 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001658:	4610      	mov	r0, r2
 800165a:	4798      	blx	r3
 800165c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b00      	cmp	r3, #0
 8001662:	dd05      	ble.n	8001670 <lfs_bd_sync+0x50>
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <lfs_bd_sync+0x5c>)
 8001666:	4a06      	ldr	r2, [pc, #24]	@ (8001680 <lfs_bd_sync+0x60>)
 8001668:	21dd      	movs	r1, #221	@ 0xdd
 800166a:	4806      	ldr	r0, [pc, #24]	@ (8001684 <lfs_bd_sync+0x64>)
 800166c:	f00b fab6 	bl	800cbdc <__assert_func>
    return err;
 8001670:	697b      	ldr	r3, [r7, #20]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	0800dcac 	.word	0x0800dcac
 8001680:	0800ea5c 	.word	0x0800ea5c
 8001684:	0800dc74 	.word	0x0800dc74

08001688 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8001696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001698:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 800169a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169c:	f113 0f02 	cmn.w	r3, #2
 80016a0:	d00a      	beq.n	80016b8 <lfs_bd_prog+0x30>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d305      	bcc.n	80016b8 <lfs_bd_prog+0x30>
 80016ac:	4b48      	ldr	r3, [pc, #288]	@ (80017d0 <lfs_bd_prog+0x148>)
 80016ae:	4a49      	ldr	r2, [pc, #292]	@ (80017d4 <lfs_bd_prog+0x14c>)
 80016b0:	21e8      	movs	r1, #232	@ 0xe8
 80016b2:	4849      	ldr	r0, [pc, #292]	@ (80017d8 <lfs_bd_prog+0x150>)
 80016b4:	f00b fa92 	bl	800cbdc <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 80016b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016bc:	441a      	add	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d97a      	bls.n	80017be <lfs_bd_prog+0x136>
 80016c8:	4b44      	ldr	r3, [pc, #272]	@ (80017dc <lfs_bd_prog+0x154>)
 80016ca:	4a42      	ldr	r2, [pc, #264]	@ (80017d4 <lfs_bd_prog+0x14c>)
 80016cc:	21e9      	movs	r1, #233	@ 0xe9
 80016ce:	4842      	ldr	r0, [pc, #264]	@ (80017d8 <lfs_bd_prog+0x150>)
 80016d0:	f00b fa84 	bl	800cbdc <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016da:	429a      	cmp	r2, r3
 80016dc:	d151      	bne.n	8001782 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 80016e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d34c      	bcc.n	8001782 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f2:	4413      	add	r3, r2
                off >= pcache->off &&
 80016f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d243      	bcs.n	8001782 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001706:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8001708:	4413      	add	r3, r2
 800170a:	4619      	mov	r1, r3
 800170c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800170e:	f7ff fc4e 	bl	8000fae <lfs_min>
 8001712:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800171e:	1acb      	subs	r3, r1, r3
 8001720:	4413      	add	r3, r2
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	69f9      	ldr	r1, [r7, #28]
 8001726:	4618      	mov	r0, r3
 8001728:	f00b fd19 	bl	800d15e <memcpy>

            data += diff;
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4413      	add	r3, r2
 8001732:	61fb      	str	r3, [r7, #28]
            off += diff;
 8001734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4413      	add	r3, r2
 800173a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 800173c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	6898      	ldr	r0, [r3, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	4619      	mov	r1, r3
 8001752:	f7ff fc1c 	bl	8000f8e <lfs_max>
 8001756:	4602      	mov	r2, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001766:	429a      	cmp	r2, r3
 8001768:	d128      	bne.n	80017bc <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7ff fedb 	bl	800152c <lfs_bd_flush>
 8001776:	6178      	str	r0, [r7, #20]
                if (err) {
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01e      	beq.n	80017bc <lfs_bd_prog+0x134>
                    return err;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	e021      	b.n	80017c6 <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178a:	d006      	beq.n	800179a <lfs_bd_prog+0x112>
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <lfs_bd_prog+0x158>)
 800178e:	4a11      	ldr	r2, [pc, #68]	@ (80017d4 <lfs_bd_prog+0x14c>)
 8001790:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001794:	4810      	ldr	r0, [pc, #64]	@ (80017d8 <lfs_bd_prog+0x150>)
 8001796:	f00b fa21 	bl	800cbdc <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800179e:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4619      	mov	r1, r3
 80017a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80017aa:	f7ff fc10 	bl	8000fce <lfs_aligndown>
 80017ae:	4602      	mov	r2, r0
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	e000      	b.n	80017be <lfs_bd_prog+0x136>
            continue;
 80017bc:	bf00      	nop
    while (size > 0) {
 80017be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d187      	bne.n	80016d4 <lfs_bd_prog+0x4c>
    }

    return 0;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	0800dcdc 	.word	0x0800dcdc
 80017d4:	0800ea68 	.word	0x0800ea68
 80017d8:	0800dc74 	.word	0x0800dc74
 80017dc:	0800dd14 	.word	0x0800dd14
 80017e0:	0800dd38 	.word	0x0800dd38

080017e4 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d306      	bcc.n	8001806 <lfs_bd_erase+0x22>
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <lfs_bd_erase+0x54>)
 80017fa:	4a10      	ldr	r2, [pc, #64]	@ (800183c <lfs_bd_erase+0x58>)
 80017fc:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001800:	480f      	ldr	r0, [pc, #60]	@ (8001840 <lfs_bd_erase+0x5c>)
 8001802:	f00b f9eb 	bl	800cbdc <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001810:	6839      	ldr	r1, [r7, #0]
 8001812:	4610      	mov	r0, r2
 8001814:	4798      	blx	r3
 8001816:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	dd06      	ble.n	800182c <lfs_bd_erase+0x48>
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <lfs_bd_erase+0x60>)
 8001820:	4a06      	ldr	r2, [pc, #24]	@ (800183c <lfs_bd_erase+0x58>)
 8001822:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8001826:	4806      	ldr	r0, [pc, #24]	@ (8001840 <lfs_bd_erase+0x5c>)
 8001828:	f00b f9d8 	bl	800cbdc <__assert_func>
    return err;
 800182c:	68fb      	ldr	r3, [r7, #12]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	0800dd5c 	.word	0x0800dd5c
 800183c:	0800ea74 	.word	0x0800ea74
 8001840:	0800dc74 	.word	0x0800dc74
 8001844:	0800dcac 	.word	0x0800dcac

08001848 <lfs_path_namelen>:


/// Small type-level utilities ///

// some operations on paths
static inline lfs_size_t lfs_path_namelen(const char *path) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
    return strcspn(path, "/");
 8001850:	4904      	ldr	r1, [pc, #16]	@ (8001864 <lfs_path_namelen+0x1c>)
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f00b fbdf 	bl	800d016 <strcspn>
 8001858:	4603      	mov	r3, r0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	0800dd78 	.word	0x0800dd78

08001868 <lfs_path_islast>:

static inline bool lfs_path_islast(const char *path) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    lfs_size_t namelen = lfs_path_namelen(path);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ffe9 	bl	8001848 <lfs_path_namelen>
 8001876:	60f8      	str	r0, [r7, #12]
    return path[namelen + strspn(path + namelen, "/")] == '\0';
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4413      	add	r3, r2
 800187e:	4909      	ldr	r1, [pc, #36]	@ (80018a4 <lfs_path_islast+0x3c>)
 8001880:	4618      	mov	r0, r3
 8001882:	f00b fbd9 	bl	800d038 <strspn>
 8001886:	4602      	mov	r2, r0
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	bf0c      	ite	eq
 8001896:	2301      	moveq	r3, #1
 8001898:	2300      	movne	r3, #0
 800189a:	b2db      	uxtb	r3, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	0800dd78 	.word	0x0800dd78

080018a8 <lfs_path_isdir>:

static inline bool lfs_path_isdir(const char *path) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    return path[lfs_path_namelen(path)] != '\0';
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffc9 	bl	8001848 <lfs_path_namelen>
 80018b6:	4602      	mov	r2, r0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4413      	add	r3, r2
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bf14      	ite	ne
 80018c2:	2301      	movne	r3, #1
 80018c4:	2300      	moveq	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <lfs_pair_swap>:

// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	601a      	str	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190a:	d005      	beq.n	8001918 <lfs_pair_isnull+0x1e>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3304      	adds	r3, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001916:	d101      	bne.n	800191c <lfs_pair_isnull+0x22>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <lfs_pair_isnull+0x24>
 800191c:	2300      	movs	r3, #0
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	b2db      	uxtb	r3, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d017      	beq.n	8001976 <lfs_pair_cmp+0x46>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3304      	adds	r3, #4
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	3304      	adds	r3, #4
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d00f      	beq.n	8001976 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	3304      	adds	r3, #4
 800195e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d008      	beq.n	8001976 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3304      	adds	r3, #4
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d001      	beq.n	8001976 <lfs_pair_cmp+0x46>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <lfs_pair_cmp+0x48>
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d107      	bne.n	80019aa <lfs_pair_issync+0x26>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3304      	adds	r3, #4
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	3304      	adds	r3, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d00d      	beq.n	80019c6 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	3304      	adds	r3, #4
 80019b2:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d108      	bne.n	80019ca <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3304      	adds	r3, #4
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d101      	bne.n	80019ca <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <lfs_pair_issync+0x48>
 80019ca:	2300      	movs	r3, #0
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80019de:	b590      	push	{r4, r7, lr}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fb4f 	bl	800108e <lfs_fromle32>
 80019f0:	4602      	mov	r2, r0
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3304      	adds	r3, #4
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	1d1c      	adds	r4, r3, #4
 8001a00:	4610      	mov	r0, r2
 8001a02:	f7ff fb44 	bl	800108e <lfs_fromle32>
 8001a06:	4603      	mov	r3, r0
 8001a08:	6023      	str	r3, [r4, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}

08001a12 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8001a12:	b590      	push	{r4, r7, lr}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fb40 	bl	80010a4 <lfs_tole32>
 8001a24:	4602      	mov	r2, r0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	1d1c      	adds	r4, r3, #4
 8001a34:	4610      	mov	r0, r2
 8001a36:	f7ff fb35 	bl	80010a4 <lfs_tole32>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6023      	str	r3, [r4, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd90      	pop	{r4, r7, pc}

08001a46 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	0fdb      	lsrs	r3, r3, #31
 8001a54:	b2db      	uxtb	r3, r3
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	059b      	lsls	r3, r3, #22
 8001a6e:	159b      	asrs	r3, r3, #22
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	bf0c      	ite	eq
 8001a76:	2301      	moveq	r3, #1
 8001a78:	2300      	movne	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	0d1b      	lsrs	r3, r3, #20
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001a9a:	b29b      	uxth	r3, r3
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	0d1b      	lsrs	r3, r3, #20
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 8001aba:	b29b      	uxth	r3, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	0d1b      	lsrs	r3, r3, #20
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ada:	b29b      	uxth	r3, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	0d1b      	lsrs	r3, r3, #20
 8001af4:	b2db      	uxtb	r3, r3
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffec 	bl	8001ae8 <lfs_tag_chunk>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b25b      	sxtb	r3, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	0a9b      	lsrs	r3, r3, #10
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b2e:	b29b      	uxth	r3, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ff7f 	bl	8001a62 <lfs_tag_isdelete>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ffe5 	bl	8001b3c <lfs_tag_size>
 8001b72:	4603      	mov	r3, r0
 8001b74:	3304      	adds	r3, #4
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
    a->tag ^= b->tag;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	405a      	eors	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	601a      	str	r2, [r3, #0]
    a->pair[0] ^= b->pair[0];
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	405a      	eors	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	605a      	str	r2, [r3, #4]
    a->pair[1] ^= b->pair[1];
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	405a      	eors	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
    return a->tag == 0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
            && a->pair[0] == 0
            && a->pair[1] == 0;
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <lfs_gstate_iszero+0x24>
            && a->pair[0] == 0
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d105      	bne.n	8001be2 <lfs_gstate_iszero+0x24>
            && a->pair[1] == 0;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <lfs_gstate_iszero+0x24>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <lfs_gstate_iszero+0x26>
 8001be2:	2300      	movs	r3, #0
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff9a 	bl	8001b3c <lfs_tag_size>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bf14      	ite	ne
 8001c0e:	2301      	movne	r3, #1
 8001c10:	2300      	moveq	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff87 	bl	8001b3c <lfs_tag_size>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	b2db      	uxtb	r3, r3
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff1e 	bl	8001a88 <lfs_tag_type1>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bf14      	ite	ne
 8001c52:	2301      	movne	r3, #1
 8001c54:	2300      	moveq	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff65 	bl	8001b3c <lfs_tag_size>
 8001c72:	4603      	mov	r3, r0
 8001c74:	0a5b      	lsrs	r3, r3, #9
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bf14      	ite	ne
 8001c7a:	2301      	movne	r3, #1
 8001c7c:	2300      	moveq	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fef6 	bl	8001a88 <lfs_tag_type1>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <lfs_gstate_hasmovehere+0x30>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	6839      	ldr	r1, [r7, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fe41 	bl	8001930 <lfs_pair_cmp>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <lfs_gstate_hasmovehere+0x30>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <lfs_gstate_hasmovehere+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff f9da 	bl	800108e <lfs_fromle32>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff f9d2 	bl	800108e <lfs_fromle32>
 8001cea:	4602      	mov	r2, r0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff f9ca 	bl	800108e <lfs_fromle32>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff f9c5 	bl	80010a4 <lfs_tole32>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff f9bd 	bl	80010a4 <lfs_tole32>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff f9b5 	bl	80010a4 <lfs_tole32>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff f99a 	bl	800108e <lfs_fromle32>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f992 	bl	800108e <lfs_fromle32>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	605a      	str	r2, [r3, #4]
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff f98d 	bl	80010a4 <lfs_tole32>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff f985 	bl	80010a4 <lfs_tole32>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	605a      	str	r2, [r3, #4]
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff f96a 	bl	800108e <lfs_fromle32>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff f962 	bl	800108e <lfs_fromle32>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	605a      	str	r2, [r3, #4]
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff f95d 	bl	80010a4 <lfs_tole32>
 8001dea:	4602      	mov	r2, r0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f955 	bl	80010a4 <lfs_tole32>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	605a      	str	r2, [r3, #4]
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff f93a 	bl	800108e <lfs_fromle32>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f932 	bl	800108e <lfs_fromle32>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff f92a 	bl	800108e <lfs_fromle32>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f922 	bl	800108e <lfs_fromle32>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff f91a 	bl	800108e <lfs_fromle32>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff f912 	bl	800108e <lfs_fromle32>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	615a      	str	r2, [r3, #20]
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff f90d 	bl	80010a4 <lfs_tole32>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f905 	bl	80010a4 <lfs_tole32>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff f8fd 	bl	80010a4 <lfs_tole32>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff f8f5 	bl	80010a4 <lfs_tole32>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff f8ed 	bl	80010a4 <lfs_tole32>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f8e5 	bl	80010a4 <lfs_tole32>
 8001eda:	4602      	mov	r2, r0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	615a      	str	r2, [r3, #20]
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	e009      	b.n	8001f0c <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d101      	bne.n	8001f06 <lfs_mlist_isopen+0x1e>
            return true;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e007      	b.n	8001f16 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f1      	bne.n	8001ef8 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001f22:	b480      	push	{r7}
 8001f24:	b085      	sub	sp, #20
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3328      	adds	r3, #40	@ 0x28
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	e00d      	b.n	8001f50 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d105      	bne.n	8001f4a <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	601a      	str	r2, [r3, #0]
            break;
 8001f48:	e007      	b.n	8001f5a <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1ed      	bne.n	8001f34 <lfs_mlist_remove+0x12>
        }
    }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8001f94:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <lfs_fs_disk_version+0x18>)
    }
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	00020001 	.word	0x00020001

08001fa8 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ffeb 	bl	8001f8c <lfs_fs_disk_version>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	0c1b      	lsrs	r3, r3, #16
 8001fba:	b29b      	uxth	r3, r3

}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ffdd 	bl	8001f8c <lfs_fs_disk_version>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	b29b      	uxth	r3, r3
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ffe5 	bl	8001fde <lfs_alloc_ckpoint>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002036:	4413      	add	r3, r2
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 800203c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002040:	fb01 f202 	mul.w	r2, r1, r2
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	429a      	cmp	r2, r3
 8002050:	d212      	bcs.n	8002078 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	08db      	lsrs	r3, r3, #3
 800205a:	441a      	add	r2, r3
 800205c:	7811      	ldrb	r1, [r2, #0]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f002 0207 	and.w	r2, r2, #7
 8002064:	2001      	movs	r0, #1
 8002066:	fa00 f202 	lsl.w	r2, r0, r2
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8002070:	4403      	add	r3, r0
 8002072:	430a      	orrs	r2, r1
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002098:	4413      	add	r3, r2
            % lfs->block_count;
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800209e:	fbb3 f1f2 	udiv	r1, r3, r2
 80020a2:	fb01 f202 	mul.w	r2, r1, r2
 80020a6:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    lfs->lookahead.size = lfs_min(
 80020b8:	00da      	lsls	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020be:	4619      	mov	r1, r3
 80020c0:	4610      	mov	r0, r2
 80020c2:	f7fe ff74 	bl	8000fae <lfs_min>
 80020c6:	4602      	mov	r2, r0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d6:	461a      	mov	r2, r3
 80020d8:	2100      	movs	r1, #0
 80020da:	f00a ff94 	bl	800d006 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 80020de:	2301      	movs	r3, #1
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	4909      	ldr	r1, [pc, #36]	@ (8002108 <lfs_alloc_scan+0x80>)
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f004 ffc7 	bl	8007078 <lfs_fs_traverse_>
 80020ea:	60f8      	str	r0, [r7, #12]
    if (err) {
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d004      	beq.n	80020fc <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ff81 	bl	8001ffa <lfs_alloc_drop>
        return err;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	e000      	b.n	80020fe <lfs_alloc_scan+0x76>
    }

    return 0;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	0800201d 	.word	0x0800201d

0800210c <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af02      	add	r7, sp, #8
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8002116:	e04d      	b.n	80021b4 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212c:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d131      	bne.n	80021a0 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002144:	4413      	add	r3, r2
                        % lfs->block_count;
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800214a:	fbb3 f1f2 	udiv	r1, r3, r2
 800214e:	fb01 f202 	mul.w	r2, r1, r2
 8002152:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002166:	1e5a      	subs	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002174:	429a      	cmp	r2, r3
 8002176:	d211      	bcs.n	800219c <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002180:	08db      	lsrs	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218c:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1dd      	bne.n	8002158 <lfs_alloc+0x4c>
                        return 0;
 800219c:	2300      	movs	r3, #0
 800219e:	e032      	b.n	8002206 <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ae:	1e5a      	subs	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021bc:	429a      	cmp	r2, r3
 80021be:	d3ab      	bcc.n	8002118 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d116      	bne.n	80021f6 <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d0:	4413      	add	r3, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80021d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80021da:	fb01 f202 	mul.w	r2, r1, r2
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002210 <lfs_alloc+0x104>)
 80021e2:	9200      	str	r2, [sp, #0]
 80021e4:	f240 22bd 	movw	r2, #701	@ 0x2bd
 80021e8:	490a      	ldr	r1, [pc, #40]	@ (8002214 <lfs_alloc+0x108>)
 80021ea:	480b      	ldr	r0, [pc, #44]	@ (8002218 <lfs_alloc+0x10c>)
 80021ec:	f00a fea6 	bl	800cf3c <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 80021f0:	f06f 031b 	mvn.w	r3, #27
 80021f4:	e007      	b.n	8002206 <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ff46 	bl	8002088 <lfs_alloc_scan>
 80021fc:	60f8      	str	r0, [r7, #12]
        if(err) {
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d088      	beq.n	8002116 <lfs_alloc+0xa>
            return err;
 8002204:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	0800dda8 	.word	0x0800dda8
 8002214:	0800dc74 	.word	0x0800dc74
 8002218:	0800dd7c 	.word	0x0800dd7c

0800221c <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b08f      	sub	sp, #60	@ 0x3c
 8002220:	af04      	add	r7, sp, #16
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	333c      	adds	r3, #60	@ 0x3c
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fd20 	bl	8001c88 <lfs_gstate_hasmovehere>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80ca 	beq.w	80023e4 <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff fc63 	bl	8001b1c <lfs_tag_id>
 8002256:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80c3 	beq.w	80023e4 <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fc5a 	bl	8001b1c <lfs_tag_id>
 8002268:	4603      	mov	r3, r0
 800226a:	461c      	mov	r4, r3
 800226c:	6838      	ldr	r0, [r7, #0]
 800226e:	f7ff fc55 	bl	8001b1c <lfs_tag_id>
 8002272:	4603      	mov	r3, r0
 8002274:	429c      	cmp	r4, r3
 8002276:	d102      	bne.n	800227e <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 8002278:	f06f 0301 	mvn.w	r3, #1
 800227c:	e0be      	b.n	80023fc <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fc4a 	bl	8001b1c <lfs_tag_id>
 8002288:	4603      	mov	r3, r0
 800228a:	461c      	mov	r4, r3
 800228c:	6838      	ldr	r0, [r7, #0]
 800228e:	f7ff fc45 	bl	8001b1c <lfs_tag_id>
 8002292:	4603      	mov	r3, r0
 8002294:	429c      	cmp	r4, r3
 8002296:	f080 80a5 	bcs.w	80023e4 <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80022a0:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80022a2:	e09f      	b.n	80023e4 <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fc55 	bl	8001b56 <lfs_tag_dsize>
 80022ac:	4602      	mov	r2, r0
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 80022b8:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 80022be:	2204      	movs	r2, #4
 80022c0:	9203      	str	r2, [sp, #12]
 80022c2:	f107 0210 	add.w	r2, r7, #16
 80022c6:	9202      	str	r2, [sp, #8]
 80022c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ca:	9201      	str	r2, [sp, #4]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2304      	movs	r3, #4
 80022d0:	460a      	mov	r2, r1
 80022d2:	2100      	movs	r1, #0
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f7fe ff45 	bl	8001164 <lfs_bd_read>
 80022da:	61b8      	str	r0, [r7, #24]
        if (err) {
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <lfs_dir_getslice+0xca>
            return err;
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	e08a      	b.n	80023fc <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fee7 	bl	80010bc <lfs_frombe32>
 80022ee:	4602      	mov	r2, r0
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	4053      	eors	r3, r2
 80022f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022f8:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fc0e 	bl	8001b1c <lfs_tag_id>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d02b      	beq.n	800235e <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002306:	69f8      	ldr	r0, [r7, #28]
 8002308:	f7ff fbbe 	bl	8001a88 <lfs_tag_type1>
 800230c:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800230e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002312:	d124      	bne.n	800235e <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8002314:	69f8      	ldr	r0, [r7, #28]
 8002316:	f7ff fc01 	bl	8001b1c <lfs_tag_id>
 800231a:	4603      	mov	r3, r0
 800231c:	461c      	mov	r4, r3
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fbf9 	bl	8001b1c <lfs_tag_id>
 800232a:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800232c:	429c      	cmp	r4, r3
 800232e:	d816      	bhi.n	800235e <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	1ad2      	subs	r2, r2, r3
 8002336:	4b33      	ldr	r3, [pc, #204]	@ (8002404 <lfs_dir_getslice+0x1e8>)
 8002338:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800233a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800233e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	429a      	cmp	r2, r3
 8002346:	d102      	bne.n	800234e <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 8002348:	f06f 0301 	mvn.w	r3, #1
 800234c:	e056      	b.n	80023fc <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800234e:	69f8      	ldr	r0, [r7, #28]
 8002350:	f7ff fbd7 	bl	8001b02 <lfs_tag_splice>
 8002354:	4603      	mov	r3, r0
 8002356:	029a      	lsls	r2, r3, #10
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	4413      	add	r3, r2
 800235c:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	401a      	ands	r2, r3
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	6839      	ldr	r1, [r7, #0]
 8002368:	1ac9      	subs	r1, r1, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	400b      	ands	r3, r1
 800236e:	429a      	cmp	r2, r3
 8002370:	d138      	bne.n	80023e4 <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 8002372:	69f8      	ldr	r0, [r7, #28]
 8002374:	f7ff fb75 	bl	8001a62 <lfs_tag_isdelete>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 800237e:	f06f 0301 	mvn.w	r3, #1
 8002382:	e03b      	b.n	80023fc <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8002384:	69f8      	ldr	r0, [r7, #28]
 8002386:	f7ff fbd9 	bl	8001b3c <lfs_tag_size>
 800238a:	4603      	mov	r3, r0
 800238c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fe0d 	bl	8000fae <lfs_min>
 8002394:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8002396:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800239e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023a0:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 80023a2:	3204      	adds	r2, #4
 80023a4:	6979      	ldr	r1, [r7, #20]
 80023a6:	9103      	str	r1, [sp, #12]
 80023a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80023aa:	9102      	str	r1, [sp, #8]
 80023ac:	9201      	str	r2, [sp, #4]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4602      	mov	r2, r0
 80023b4:	2100      	movs	r1, #0
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f7fe fed4 	bl	8001164 <lfs_bd_read>
 80023bc:	61b8      	str	r0, [r7, #24]
            if (err) {
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <lfs_dir_getslice+0x1ac>
                return err;
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	e019      	b.n	80023fc <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 80023c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	18d0      	adds	r0, r2, r3
 80023ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	2100      	movs	r1, #0
 80023d8:	f00a fe15 	bl	800d006 <memset>

            return tag + gdiff;
 80023dc:	6a3a      	ldr	r2, [r7, #32]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	4413      	add	r3, r2
 80023e2:	e00b      	b.n	80023fc <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fbb5 	bl	8001b56 <lfs_tag_dsize>
 80023ec:	4603      	mov	r3, r0
 80023ee:	3304      	adds	r3, #4
 80023f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f2:	429a      	cmp	r2, r3
 80023f4:	f4bf af56 	bcs.w	80022a4 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 80023f8:	f06f 0301 	mvn.w	r3, #1
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	372c      	adds	r7, #44	@ 0x2c
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}
 8002404:	000ffc00 	.word	0x000ffc00

08002408 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af04      	add	r7, sp, #16
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8002416:	6838      	ldr	r0, [r7, #0]
 8002418:	f7ff fb90 	bl	8001b3c <lfs_tag_size>
 800241c:	4603      	mov	r3, r0
 800241e:	9302      	str	r3, [sp, #8]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	2300      	movs	r3, #0
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f7ff fef4 	bl	800221c <lfs_dir_getslice>
 8002434:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800243e:	b580      	push	{r7, lr}
 8002440:	b08c      	sub	sp, #48	@ 0x30
 8002442:	af04      	add	r7, sp, #16
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800244c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244e:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8002450:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002454:	441a      	add	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	429a      	cmp	r2, r3
 800245e:	f240 80c0 	bls.w	80025e2 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8002462:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8002466:	e0c1      	b.n	80025ec <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8002468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800246a:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d03f      	beq.n	80024f2 <lfs_dir_getread+0xb4>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f113 0f02 	cmn.w	r3, #2
 800247a:	d13a      	bne.n	80024f2 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8002486:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002488:	429a      	cmp	r2, r3
 800248a:	d232      	bcs.n	80024f2 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002492:	429a      	cmp	r2, r3
 8002494:	d324      	bcc.n	80024e0 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6859      	ldr	r1, [r3, #4]
 800249e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a0:	1acb      	subs	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	69b8      	ldr	r0, [r7, #24]
 80024a8:	f7fe fd81 	bl	8000fae <lfs_min>
 80024ac:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80024b8:	1acb      	subs	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4619      	mov	r1, r3
 80024c0:	69f8      	ldr	r0, [r7, #28]
 80024c2:	f00a fe4c 	bl	800d15e <memcpy>

                data += diff;
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	4413      	add	r3, r2
 80024cc:	61fb      	str	r3, [r7, #28]
                off += diff;
 80024ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	4413      	add	r3, r2
 80024d4:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 80024d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 80024de:	e080      	b.n	80025e2 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	4619      	mov	r1, r3
 80024ea:	69b8      	ldr	r0, [r7, #24]
 80024ec:	f7fe fd5f 	bl	8000fae <lfs_min>
 80024f0:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f113 0f02 	cmn.w	r3, #2
 80024fa:	d13a      	bne.n	8002572 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8002506:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002508:	429a      	cmp	r2, r3
 800250a:	d232      	bcs.n	8002572 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002512:	429a      	cmp	r2, r3
 8002514:	d324      	bcc.n	8002560 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6859      	ldr	r1, [r3, #4]
 800251e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002520:	1acb      	subs	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	4619      	mov	r1, r3
 8002526:	69b8      	ldr	r0, [r7, #24]
 8002528:	f7fe fd41 	bl	8000fae <lfs_min>
 800252c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002538:	1acb      	subs	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4619      	mov	r1, r3
 8002540:	69f8      	ldr	r0, [r7, #28]
 8002542:	f00a fe0c 	bl	800d15e <memcpy>

                data += diff;
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	4413      	add	r3, r2
 800254c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800254e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	4413      	add	r3, r2
 8002554:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8002556:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800255e:	e040      	b.n	80025e2 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	4619      	mov	r1, r3
 800256a:	69b8      	ldr	r0, [r7, #24]
 800256c:	f7fe fd1f 	bl	8000fae <lfs_min>
 8002570:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f06f 0201 	mvn.w	r2, #1
 8002578:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	4619      	mov	r1, r3
 8002582:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002584:	f7fe fd23 	bl	8000fce <lfs_aligndown>
 8002588:	4602      	mov	r2, r0
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800258e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002592:	441a      	add	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	4619      	mov	r1, r3
 800259c:	4610      	mov	r0, r2
 800259e:	f7fe fd2b 	bl	8000ff8 <lfs_alignup>
 80025a2:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80025aa:	4619      	mov	r1, r3
 80025ac:	4610      	mov	r0, r2
 80025ae:	f7fe fcfe 	bl	8000fae <lfs_min>
 80025b2:	4602      	mov	r2, r0
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80025c0:	6839      	ldr	r1, [r7, #0]
 80025c2:	6889      	ldr	r1, [r1, #8]
 80025c4:	9102      	str	r1, [sp, #8]
 80025c6:	9201      	str	r2, [sp, #4]
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7ff fe23 	bl	800221c <lfs_dir_getslice>
 80025d6:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	da01      	bge.n	80025e2 <lfs_dir_getread+0x1a4>
            return err;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	e004      	b.n	80025ec <lfs_dir_getread+0x1ae>
    while (size > 0) {
 80025e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f47f af3f 	bne.w	8002468 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3720      	adds	r7, #32
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <lfs_dir_traverse_filter+0x1e>
 800260e:	4b24      	ldr	r3, [pc, #144]	@ (80026a0 <lfs_dir_traverse_filter+0xac>)
 8002610:	e000      	b.n	8002614 <lfs_dir_traverse_filter+0x20>
 8002612:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8002614:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	405a      	eors	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d014      	beq.n	8002650 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fa19 	bl	8001a62 <lfs_tag_isdelete>
 8002630:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	4a19      	ldr	r2, [pc, #100]	@ (80026a0 <lfs_dir_traverse_filter+0xac>)
 800263a:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	6819      	ldr	r1, [r3, #0]
 8002640:	4b19      	ldr	r3, [pc, #100]	@ (80026a8 <lfs_dir_traverse_filter+0xb4>)
 8002642:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002644:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8002648:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d104      	bne.n	800265a <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
        return true;
 8002656:	2301      	movs	r3, #1
 8002658:	e01e      	b.n	8002698 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800265a:	68b8      	ldr	r0, [r7, #8]
 800265c:	f7ff fa14 	bl	8001a88 <lfs_tag_type1>
 8002660:	4603      	mov	r3, r0
 8002662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002666:	d116      	bne.n	8002696 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8002668:	68b8      	ldr	r0, [r7, #8]
 800266a:	f7ff fa57 	bl	8001b1c <lfs_tag_id>
 800266e:	4603      	mov	r3, r0
 8002670:	461c      	mov	r4, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fa50 	bl	8001b1c <lfs_tag_id>
 800267c:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800267e:	429c      	cmp	r4, r3
 8002680:	d809      	bhi.n	8002696 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002682:	68b8      	ldr	r0, [r7, #8]
 8002684:	f7ff fa3d 	bl	8001b02 <lfs_tag_splice>
 8002688:	4603      	mov	r3, r0
 800268a:	029a      	lsls	r2, r3, #10
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	441a      	add	r2, r3
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	601a      	str	r2, [r3, #0]
    }

    return false;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	bd90      	pop	{r4, r7, pc}
 80026a0:	7ffffc00 	.word	0x7ffffc00
 80026a4:	700ffc00 	.word	0x700ffc00
 80026a8:	000ffc00 	.word	0x000ffc00

080026ac <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b0c1      	sub	sp, #260	@ 0x104
 80026b0:	af04      	add	r7, sp, #16
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 80026c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 80026ca:	6838      	ldr	r0, [r7, #0]
 80026cc:	f7ff fa43 	bl	8001b56 <lfs_tag_dsize>
 80026d0:	4602      	mov	r2, r0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	441a      	add	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d237      	bcs.n	800274e <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 80026de:	6838      	ldr	r0, [r7, #0]
 80026e0:	f7ff fa39 	bl	8001b56 <lfs_tag_dsize>
 80026e4:	4602      	mov	r2, r0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 80026ec:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 80026f2:	2204      	movs	r2, #4
 80026f4:	9203      	str	r2, [sp, #12]
 80026f6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80026fa:	9202      	str	r2, [sp, #8]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	9201      	str	r2, [sp, #4]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	2304      	movs	r3, #4
 8002704:	460a      	mov	r2, r1
 8002706:	2100      	movs	r1, #0
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7fe fd2b 	bl	8001164 <lfs_bd_read>
 800270e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 8002712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <lfs_dir_traverse+0x74>
                    return err;
 800271a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800271e:	e3a5      	b.n	8002e6c <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8002720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fcca 	bl	80010bc <lfs_frombe32>
 8002728:	4602      	mov	r2, r0
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	4053      	eors	r3, r2
 800272e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002732:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3304      	adds	r3, #4
 800273e:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 8002740:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002744:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 8002748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	e01b      	b.n	8002786 <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 800274e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002752:	2b00      	cmp	r3, #0
 8002754:	dd13      	ble.n	800277e <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 8002756:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 800275e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 8002768:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800276c:	3308      	adds	r3, #8
 800276e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 8002772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002776:	3b01      	subs	r3, #1
 8002778:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800277c:	e003      	b.n	8002786 <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 8002784:	e2a1      	b.n	8002cca <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8002786:	4b7e      	ldr	r3, [pc, #504]	@ (8002980 <lfs_dir_traverse+0x2d4>)
 8002788:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800278c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800278e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002792:	405a      	eors	r2, r3
 8002794:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8002798:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800279c:	400b      	ands	r3, r1
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f040 8284 	bne.w	8002cae <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 80027a6:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80027aa:	f7ff f9b7 	bl	8001b1c <lfs_tag_id>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80ef 	beq.w	8002994 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 80027b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d906      	bls.n	80027cc <lfs_dir_traverse+0x120>
 80027be:	4b71      	ldr	r3, [pc, #452]	@ (8002984 <lfs_dir_traverse+0x2d8>)
 80027c0:	4a71      	ldr	r2, [pc, #452]	@ (8002988 <lfs_dir_traverse+0x2dc>)
 80027c2:	f240 31c2 	movw	r1, #962	@ 0x3c2
 80027c6:	4871      	ldr	r0, [pc, #452]	@ (800298c <lfs_dir_traverse+0x2e0>)
 80027c8:	f00a fa08 	bl	800cbdc <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 80027cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027ce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80027d2:	4613      	mov	r3, r2
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	33f0      	adds	r3, #240	@ 0xf0
 80027dc:	443b      	add	r3, r7
 80027de:	3b98      	subs	r3, #152	@ 0x98
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80027e8:	4613      	mov	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	33f0      	adds	r3, #240	@ 0xf0
 80027f2:	443b      	add	r3, r7
 80027f4:	3b94      	subs	r3, #148	@ 0x94
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80027fe:	4613      	mov	r3, r2
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	33f0      	adds	r3, #240	@ 0xf0
 8002808:	443b      	add	r3, r7
 800280a:	3b90      	subs	r3, #144	@ 0x90
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	33f0      	adds	r3, #240	@ 0xf0
 800281e:	443b      	add	r3, r7
 8002820:	3b8c      	subs	r3, #140	@ 0x8c
 8002822:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	33f0      	adds	r3, #240	@ 0xf0
 8002836:	443b      	add	r3, r7
 8002838:	3b88      	subs	r3, #136	@ 0x88
 800283a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	33f0      	adds	r3, #240	@ 0xf0
 800284e:	443b      	add	r3, r7
 8002850:	3b84      	subs	r3, #132	@ 0x84
 8002852:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	33f0      	adds	r3, #240	@ 0xf0
 8002866:	443b      	add	r3, r7
 8002868:	3b80      	subs	r3, #128	@ 0x80
 800286a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	33f0      	adds	r3, #240	@ 0xf0
 800287e:	443b      	add	r3, r7
 8002880:	3b7c      	subs	r3, #124	@ 0x7c
 8002882:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 8002886:	801a      	strh	r2, [r3, #0]
 8002888:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	33f0      	adds	r3, #240	@ 0xf0
 8002896:	443b      	add	r3, r7
 8002898:	3b7a      	subs	r3, #122	@ 0x7a
 800289a:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	33f0      	adds	r3, #240	@ 0xf0
 80028ae:	443b      	add	r3, r7
 80028b0:	3b78      	subs	r3, #120	@ 0x78
 80028b2:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 80028b6:	801a      	strh	r2, [r3, #0]
 80028b8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	33f0      	adds	r3, #240	@ 0xf0
 80028c6:	443b      	add	r3, r7
 80028c8:	3b74      	subs	r3, #116	@ 0x74
 80028ca:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	33f0      	adds	r3, #240	@ 0xf0
 80028de:	443b      	add	r3, r7
 80028e0:	3b70      	subs	r3, #112	@ 0x70
 80028e2:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	33f0      	adds	r3, #240	@ 0xf0
 80028f6:	443b      	add	r3, r7
 80028f8:	3b6c      	subs	r3, #108	@ 0x6c
 80028fa:	6019      	str	r1, [r3, #0]
 80028fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	33f0      	adds	r3, #240	@ 0xf0
 800290a:	443b      	add	r3, r7
 800290c:	3b68      	subs	r3, #104	@ 0x68
 800290e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	33f0      	adds	r3, #240	@ 0xf0
 8002922:	443b      	add	r3, r7
 8002924:	3b68      	subs	r3, #104	@ 0x68
 8002926:	3304      	adds	r3, #4
 8002928:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800292c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002930:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8002934:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002938:	3301      	adds	r3, #1
 800293a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 800295c:	4b0c      	ldr	r3, [pc, #48]	@ (8002990 <lfs_dir_traverse+0x2e4>)
 800295e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 8002962:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002966:	1e5a      	subs	r2, r3, #1
 8002968:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	3328      	adds	r3, #40	@ 0x28
 8002976:	440b      	add	r3, r1
 8002978:	3304      	adds	r3, #4
 800297a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 800297e:	e19d      	b.n	8002cbc <lfs_dir_traverse+0x610>
 8002980:	7ff00000 	.word	0x7ff00000
 8002984:	0800ddac 	.word	0x0800ddac
 8002988:	0800ea84 	.word	0x0800ea84
 800298c:	0800dc74 	.word	0x0800dc74
 8002990:	080025f5 	.word	0x080025f5
            }
        }

popped:
 8002994:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8002996:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800299a:	f7ff f8bf 	bl	8001b1c <lfs_tag_id>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80029a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff f8b8 	bl	8001b1c <lfs_tag_id>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 80029b0:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 80029b4:	4293      	cmp	r3, r2
 80029b6:	f200 817c 	bhi.w	8002cb2 <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80029ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff f8ad 	bl	8001b1c <lfs_tag_id>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 80029ca:	4293      	cmp	r3, r2
 80029cc:	f240 8171 	bls.w	8002cb2 <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 80029d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff f878 	bl	8001ac8 <lfs_tag_type3>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f43f ae75 	beq.w	80026ca <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 80029e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff f870 	bl	8001ac8 <lfs_tag_type3>
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	f240 1301 	movw	r3, #257	@ 0x101
 80029f0:	429a      	cmp	r2, r3
 80029f2:	f040 80e0 	bne.w	8002bb6 <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 80029f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029fa:	4ab1      	ldr	r2, [pc, #708]	@ (8002cc0 <lfs_dir_traverse+0x614>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	f000 815a 	beq.w	8002cb6 <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8002a02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	33f0      	adds	r3, #240	@ 0xf0
 8002a10:	443b      	add	r3, r7
 8002a12:	3b98      	subs	r3, #152	@ 0x98
 8002a14:	4618      	mov	r0, r3
 8002a16:	233c      	movs	r3, #60	@ 0x3c
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	f00a faf3 	bl	800d006 <memset>
 8002a20:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	33f0      	adds	r3, #240	@ 0xf0
 8002a2e:	443b      	add	r3, r7
 8002a30:	3b98      	subs	r3, #152	@ 0x98
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	33f0      	adds	r3, #240	@ 0xf0
 8002a44:	443b      	add	r3, r7
 8002a46:	3b94      	subs	r3, #148	@ 0x94
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	33f0      	adds	r3, #240	@ 0xf0
 8002a5a:	443b      	add	r3, r7
 8002a5c:	3b90      	subs	r3, #144	@ 0x90
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	33f0      	adds	r3, #240	@ 0xf0
 8002a70:	443b      	add	r3, r7
 8002a72:	3b8c      	subs	r3, #140	@ 0x8c
 8002a74:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	33f0      	adds	r3, #240	@ 0xf0
 8002a88:	443b      	add	r3, r7
 8002a8a:	3b88      	subs	r3, #136	@ 0x88
 8002a8c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002a96:	4613      	mov	r3, r2
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	33f0      	adds	r3, #240	@ 0xf0
 8002aa0:	443b      	add	r3, r7
 8002aa2:	3b84      	subs	r3, #132	@ 0x84
 8002aa4:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002aae:	4613      	mov	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	33f0      	adds	r3, #240	@ 0xf0
 8002ab8:	443b      	add	r3, r7
 8002aba:	3b80      	subs	r3, #128	@ 0x80
 8002abc:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	33f0      	adds	r3, #240	@ 0xf0
 8002ad0:	443b      	add	r3, r7
 8002ad2:	3b7c      	subs	r3, #124	@ 0x7c
 8002ad4:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 8002ad8:	801a      	strh	r2, [r3, #0]
 8002ada:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	33f0      	adds	r3, #240	@ 0xf0
 8002ae8:	443b      	add	r3, r7
 8002aea:	3b7a      	subs	r3, #122	@ 0x7a
 8002aec:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8002af0:	801a      	strh	r2, [r3, #0]
 8002af2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002af6:	4613      	mov	r3, r2
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	33f0      	adds	r3, #240	@ 0xf0
 8002b00:	443b      	add	r3, r7
 8002b02:	3b78      	subs	r3, #120	@ 0x78
 8002b04:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 8002b08:	801a      	strh	r2, [r3, #0]
 8002b0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	33f0      	adds	r3, #240	@ 0xf0
 8002b18:	443b      	add	r3, r7
 8002b1a:	3b74      	subs	r3, #116	@ 0x74
 8002b1c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	33f0      	adds	r3, #240	@ 0xf0
 8002b30:	443b      	add	r3, r7
 8002b32:	3b70      	subs	r3, #112	@ 0x70
 8002b34:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8002b38:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8002b3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8002b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fff8 	bl	8001b3c <lfs_tag_size>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8002b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe ffe1 	bl	8001b1c <lfs_tag_id>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 8002b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b64:	60bb      	str	r3, [r7, #8]
            off = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8002b7c:	4b51      	ldr	r3, [pc, #324]	@ (8002cc4 <lfs_dir_traverse+0x618>)
 8002b7e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8002b82:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002b86:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 8002b8a:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8002b8e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 8002b92:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8002b96:	3301      	adds	r3, #1
 8002b98:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 8002b9c:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 8002ba0:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8002bac:	4413      	add	r3, r2
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 8002bb4:	e589      	b.n	80026ca <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8002bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe ff85 	bl	8001ac8 <lfs_tag_type3>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002bc4:	d159      	bne.n	8002c7a <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002bcc:	e04b      	b.n	8002c66 <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 8002bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002bd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	461a      	mov	r2, r3
 8002be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002be8:	4413      	add	r3, r2
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002bf0:	051c      	lsls	r4, r3, #20
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe ff91 	bl	8001b1c <lfs_tag_id>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8002c02:	4413      	add	r3, r2
 8002c04:	029b      	lsls	r3, r3, #10
 8002c06:	ea44 0103 	orr.w	r1, r4, r3
 8002c0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	461a      	mov	r2, r3
 8002c18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c1c:	4413      	add	r3, r2
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8002c22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c34:	4413      	add	r3, r2
 8002c36:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002c38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c3c:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8002c40:	4798      	blx	r3
 8002c42:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 8002c46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	da02      	bge.n	8002c54 <lfs_dir_traverse+0x5a8>
                    return res;
 8002c4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002c52:	e10b      	b.n	8002e6c <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 8002c54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d12e      	bne.n	8002cba <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c60:	3301      	adds	r3, #1
 8002c62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe ff67 	bl	8001b3c <lfs_tag_size>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d3aa      	bcc.n	8002bce <lfs_dir_traverse+0x522>
 8002c78:	e527      	b.n	80026ca <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8002c7a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8002c7e:	029a      	lsls	r2, r3, #10
 8002c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c82:	18d1      	adds	r1, r2, r3
 8002c84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c88:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002c8c:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8002c90:	4798      	blx	r3
 8002c92:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 8002c96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	da02      	bge.n	8002ca4 <lfs_dir_traverse+0x5f8>
                return res;
 8002c9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002ca2:	e0e3      	b.n	8002e6c <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 8002ca4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10d      	bne.n	8002cc8 <lfs_dir_traverse+0x61c>
 8002cac:	e50d      	b.n	80026ca <lfs_dir_traverse+0x1e>
                continue;
 8002cae:	bf00      	nop
 8002cb0:	e50b      	b.n	80026ca <lfs_dir_traverse+0x1e>
            continue;
 8002cb2:	bf00      	nop
 8002cb4:	e509      	b.n	80026ca <lfs_dir_traverse+0x1e>
                continue;
 8002cb6:	bf00      	nop
 8002cb8:	e507      	b.n	80026ca <lfs_dir_traverse+0x1e>
                    break;
 8002cba:	bf00      	nop
        {
 8002cbc:	e505      	b.n	80026ca <lfs_dir_traverse+0x1e>
 8002cbe:	bf00      	nop
 8002cc0:	080025f5 	.word	0x080025f5
 8002cc4:	600ffc00 	.word	0x600ffc00
                break;
 8002cc8:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8002cca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80ca 	beq.w	8002e68 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8002cd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002cd8:	1e5a      	subs	r2, r3, #1
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	33f0      	adds	r3, #240	@ 0xf0
 8002ce4:	443b      	add	r3, r7
 8002ce6:	3b98      	subs	r3, #152	@ 0x98
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8002cec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002cf0:	1e5a      	subs	r2, r3, #1
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	33f0      	adds	r3, #240	@ 0xf0
 8002cfc:	443b      	add	r3, r7
 8002cfe:	3b94      	subs	r3, #148	@ 0x94
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8002d04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002d08:	1e5a      	subs	r2, r3, #1
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	33f0      	adds	r3, #240	@ 0xf0
 8002d14:	443b      	add	r3, r7
 8002d16:	3b90      	subs	r3, #144	@ 0x90
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8002d1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002d20:	1e5a      	subs	r2, r3, #1
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	33f0      	adds	r3, #240	@ 0xf0
 8002d2c:	443b      	add	r3, r7
 8002d2e:	3b8c      	subs	r3, #140	@ 0x8c
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 8002d36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002d3a:	1e5a      	subs	r2, r3, #1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	33f0      	adds	r3, #240	@ 0xf0
 8002d46:	443b      	add	r3, r7
 8002d48:	3b88      	subs	r3, #136	@ 0x88
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 8002d50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002d54:	1e5a      	subs	r2, r3, #1
 8002d56:	4613      	mov	r3, r2
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	33f0      	adds	r3, #240	@ 0xf0
 8002d60:	443b      	add	r3, r7
 8002d62:	3b84      	subs	r3, #132	@ 0x84
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 8002d6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002d6e:	1e5a      	subs	r2, r3, #1
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	33f0      	adds	r3, #240	@ 0xf0
 8002d7a:	443b      	add	r3, r7
 8002d7c:	3b80      	subs	r3, #128	@ 0x80
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 8002d84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002d88:	1e5a      	subs	r2, r3, #1
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	33f0      	adds	r3, #240	@ 0xf0
 8002d94:	443b      	add	r3, r7
 8002d96:	3b7c      	subs	r3, #124	@ 0x7c
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 8002d9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002da2:	1e5a      	subs	r2, r3, #1
 8002da4:	4613      	mov	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	33f0      	adds	r3, #240	@ 0xf0
 8002dae:	443b      	add	r3, r7
 8002db0:	3b7a      	subs	r3, #122	@ 0x7a
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 8002db8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002dbc:	1e5a      	subs	r2, r3, #1
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	33f0      	adds	r3, #240	@ 0xf0
 8002dc8:	443b      	add	r3, r7
 8002dca:	3b78      	subs	r3, #120	@ 0x78
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 8002dd2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002dd6:	1e5a      	subs	r2, r3, #1
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	33f0      	adds	r3, #240	@ 0xf0
 8002de2:	443b      	add	r3, r7
 8002de4:	3b74      	subs	r3, #116	@ 0x74
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 8002dec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002df0:	1e5a      	subs	r2, r3, #1
 8002df2:	4613      	mov	r3, r2
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	33f0      	adds	r3, #240	@ 0xf0
 8002dfc:	443b      	add	r3, r7
 8002dfe:	3b70      	subs	r3, #112	@ 0x70
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 8002e06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002e0a:	1e5a      	subs	r2, r3, #1
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	33f0      	adds	r3, #240	@ 0xf0
 8002e16:	443b      	add	r3, r7
 8002e18:	3b6c      	subs	r3, #108	@ 0x6c
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 8002e1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002e22:	1e5a      	subs	r2, r3, #1
 8002e24:	4613      	mov	r3, r2
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	33f0      	adds	r3, #240	@ 0xf0
 8002e2e:	443b      	add	r3, r7
 8002e30:	3b68      	subs	r3, #104	@ 0x68
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 8002e38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002e3c:	1e5a      	subs	r2, r3, #1
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	33f0      	adds	r3, #240	@ 0xf0
 8002e48:	443b      	add	r3, r7
 8002e4a:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 8002e4e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002e52:	3204      	adds	r2, #4
 8002e54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e58:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8002e5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002e60:	3b01      	subs	r3, #1
 8002e62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 8002e66:	e596      	b.n	8002996 <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 8002e68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	37f4      	adds	r7, #244	@ 0xf4
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd90      	pop	{r4, r7, pc}

08002e74 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e76:	b0a5      	sub	sp, #148	@ 0x94
 8002e78:	af04      	add	r7, sp, #16
 8002e7a:	6178      	str	r0, [r7, #20]
 8002e7c:	6139      	str	r1, [r7, #16]
 8002e7e:	60fa      	str	r2, [r7, #12]
 8002e80:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
 8002e86:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00f      	beq.n	8002eb0 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d206      	bcs.n	8002eaa <lfs_dir_fetchmatch+0x36>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 8002eaa:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8002eae:	e3a4      	b.n	80035fa <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ec0:	e05a      	b.n	8002f78 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 8002ec2:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002ec4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8002ecc:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002ece:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8002ed2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ed4:	0092      	lsls	r2, r2, #2
 8002ed6:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8002ed8:	2104      	movs	r1, #4
 8002eda:	9103      	str	r1, [sp, #12]
 8002edc:	9202      	str	r2, [sp, #8]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	9201      	str	r2, [sp, #4]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	6978      	ldr	r0, [r7, #20]
 8002eec:	f7fe f93a 	bl	8001164 <lfs_bd_read>
 8002ef0:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8002ef2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	3378      	adds	r3, #120	@ 0x78
 8002ef8:	f107 0208 	add.w	r2, r7, #8
 8002efc:	4413      	add	r3, r2
 8002efe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe f8c3 	bl	800108e <lfs_fromle32>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	3378      	adds	r3, #120	@ 0x78
 8002f10:	f107 0108 	add.w	r1, r7, #8
 8002f14:	440b      	add	r3, r1
 8002f16:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 8002f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <lfs_dir_fetchmatch+0xb8>
 8002f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f22:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002f26:	d001      	beq.n	8002f2c <lfs_dir_fetchmatch+0xb8>
            return err;
 8002f28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f2a:	e366      	b.n	80035fa <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 8002f2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f2e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002f32:	d01e      	beq.n	8002f72 <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8002f34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	3378      	adds	r3, #120	@ 0x78
 8002f3a:	f107 0208 	add.w	r2, r7, #8
 8002f3e:	4413      	add	r3, r2
 8002f40:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002f44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f46:	3301      	adds	r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	bfb8      	it	lt
 8002f50:	425b      	neglt	r3, r3
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	3378      	adds	r3, #120	@ 0x78
 8002f56:	f107 0108 	add.w	r1, r7, #8
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002f60:	4619      	mov	r1, r3
 8002f62:	4610      	mov	r0, r2
 8002f64:	f7fe f885 	bl	8001072 <lfs_scmp>
 8002f68:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	dd01      	ble.n	8002f72 <lfs_dir_fetchmatch+0xfe>
            r = i;
 8002f6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f70:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 8002f72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f74:	3301      	adds	r3, #1
 8002f76:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	dda1      	ble.n	8002ec2 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8002f7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	bfb8      	it	lt
 8002f88:	425b      	neglt	r3, r3
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8002f96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f98:	3301      	adds	r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	bfb8      	it	lt
 8002fa2:	425b      	neglt	r3, r3
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4413      	add	r3, r2
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002fb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	bfb8      	it	lt
 8002fba:	425b      	neglt	r3, r3
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	3378      	adds	r3, #120	@ 0x78
 8002fc0:	f107 0208 	add.w	r2, r7, #8
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fd8:	e2fb      	b.n	80035d2 <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe2:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8002fea:	4aa9      	ldr	r2, [pc, #676]	@ (8003290 <lfs_dir_fetchmatch+0x41c>)
 8002fec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002ff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ff4:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 8002ffe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003000:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8003002:	2300      	movs	r3, #0
 8003004:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 8003008:	2300      	movs	r3, #0
 800300a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe f846 	bl	80010a4 <lfs_tole32>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	3308      	adds	r3, #8
 8003022:	2204      	movs	r2, #4
 8003024:	4619      	mov	r1, r3
 8003026:	f04f 30ff 	mov.w	r0, #4294967295
 800302a:	f004 feb9 	bl	8007da0 <lfs_crc>
 800302e:	4603      	mov	r3, r0
 8003030:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe f829 	bl	800108e <lfs_fromle32>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8003042:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003044:	f7fe fd87 	bl	8001b56 <lfs_tag_dsize>
 8003048:	4602      	mov	r2, r0
 800304a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800304c:	4413      	add	r3, r2
 800304e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 8003050:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003056:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2204      	movs	r2, #4
 800305e:	9203      	str	r2, [sp, #12]
 8003060:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003064:	9202      	str	r2, [sp, #8]
 8003066:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003068:	9201      	str	r2, [sp, #4]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	4603      	mov	r3, r0
 800306e:	460a      	mov	r2, r1
 8003070:	2100      	movs	r1, #0
 8003072:	6978      	ldr	r0, [r7, #20]
 8003074:	f7fe f876 	bl	8001164 <lfs_bd_read>
 8003078:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800307a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 8003080:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003082:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003086:	f000 81d6 	beq.w	8003436 <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 800308a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800308c:	e2b5      	b.n	80035fa <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800308e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003090:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8003094:	2204      	movs	r2, #4
 8003096:	4618      	mov	r0, r3
 8003098:	f004 fe82 	bl	8007da0 <lfs_crc>
 800309c:	4603      	mov	r3, r0
 800309e:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 80030a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe f80a 	bl	80010bc <lfs_frombe32>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030ac:	4053      	eors	r3, r2
 80030ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 80030b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fcc7 	bl	8001a46 <lfs_tag_isvalid>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f083 0301 	eor.w	r3, r3, #1
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00b      	beq.n	80030dc <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 80030c4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80030c6:	f7fe fcef 	bl	8001aa8 <lfs_tag_type2>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 80030da:	e1bb      	b.n	8003454 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80030dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fd39 	bl	8001b56 <lfs_tag_dsize>
 80030e4:	4602      	mov	r2, r0
 80030e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030e8:	441a      	add	r2, r3
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	f200 81a2 	bhi.w	800343a <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 80030f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f8:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 80030fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe fcd3 	bl	8001aa8 <lfs_tag_type2>
 8003102:	4603      	mov	r3, r0
 8003104:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003108:	d15e      	bne.n	80031c8 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800310a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003110:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003118:	3204      	adds	r2, #4
 800311a:	2104      	movs	r1, #4
 800311c:	9103      	str	r1, [sp, #12]
 800311e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003122:	9102      	str	r1, [sp, #8]
 8003124:	9201      	str	r2, [sp, #4]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	4623      	mov	r3, r4
 800312a:	4602      	mov	r2, r0
 800312c:	2100      	movs	r1, #0
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7fe f818 	bl	8001164 <lfs_bd_read>
 8003134:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8003136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003138:	2b00      	cmp	r3, #0
 800313a:	d006      	beq.n	800314a <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 800313c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800313e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003142:	f000 817c 	beq.w	800343e <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 8003146:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 8003148:	e257      	b.n	80035fa <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 800314a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd ff9e 	bl	800108e <lfs_fromle32>
 8003152:	4603      	mov	r3, r0
 8003154:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 8003156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315a:	429a      	cmp	r2, r3
 800315c:	f040 8171 	bne.w	8003442 <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8003160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe fcc0 	bl	8001ae8 <lfs_tag_chunk>
 8003168:	4603      	mov	r3, r0
 800316a:	07db      	lsls	r3, r3, #31
 800316c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800316e:	4053      	eors	r3, r2
 8003170:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003176:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800317a:	2204      	movs	r2, #4
 800317c:	4618      	mov	r0, r3
 800317e:	f004 fe0f 	bl	8007da0 <lfs_crc>
 8003182:	4602      	mov	r2, r0
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8003188:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800318a:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 800318c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fce1 	bl	8001b56 <lfs_tag_dsize>
 8003194:	4602      	mov	r2, r0
 8003196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003198:	441a      	add	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80031a2:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80031aa:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 80031ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 80031b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 80031be:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295
 80031c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80031c6:	e73c      	b.n	8003042 <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 80031c8:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	681c      	ldr	r4, [r3, #0]
 80031d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031d8:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 80031da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe fcba 	bl	8001b56 <lfs_tag_dsize>
 80031e2:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 80031e4:	3b04      	subs	r3, #4
 80031e6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80031ea:	9203      	str	r2, [sp, #12]
 80031ec:	9302      	str	r3, [sp, #8]
 80031ee:	9501      	str	r5, [sp, #4]
 80031f0:	9400      	str	r4, [sp, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4632      	mov	r2, r6
 80031f6:	2100      	movs	r1, #0
 80031f8:	6978      	ldr	r0, [r7, #20]
 80031fa:	f7fe f950 	bl	800149e <lfs_bd_crc>
 80031fe:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 8003200:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003202:	2b00      	cmp	r3, #0
 8003204:	d006      	beq.n	8003214 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 8003206:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003208:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800320c:	f000 811b 	beq.w	8003446 <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 8003210:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003212:	e1f2      	b.n	80035fa <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8003214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe fc36 	bl	8001a88 <lfs_tag_type1>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d113      	bne.n	800324a <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8003222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe fc79 	bl	8001b1c <lfs_tag_id>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003232:	4293      	cmp	r3, r2
 8003234:	f200 80b6 	bhi.w	80033a4 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 8003238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fc6e 	bl	8001b1c <lfs_tag_id>
 8003240:	4603      	mov	r3, r0
 8003242:	3301      	adds	r3, #1
 8003244:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003248:	e0ac      	b.n	80033a4 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800324a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe fc1b 	bl	8001a88 <lfs_tag_type1>
 8003252:	4603      	mov	r3, r0
 8003254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003258:	d13a      	bne.n	80032d0 <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 800325a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe fc50 	bl	8001b02 <lfs_tag_splice>
 8003262:	4603      	mov	r3, r0
 8003264:	b29a      	uxth	r2, r3
 8003266:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800326a:	4413      	add	r3, r2
 800326c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8003270:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003272:	4b08      	ldr	r3, [pc, #32]	@ (8003294 <lfs_dir_fetchmatch+0x420>)
 8003274:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003276:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800327a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800327e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003280:	4293      	cmp	r3, r2
 8003282:	d109      	bne.n	8003298 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 8003284:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003286:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800328a:	663b      	str	r3, [r7, #96]	@ 0x60
 800328c:	e08a      	b.n	80033a4 <lfs_dir_fetchmatch+0x530>
 800328e:	bf00      	nop
 8003290:	0800ddec 	.word	0x0800ddec
 8003294:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8003298:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800329a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329e:	f000 8081 	beq.w	80033a4 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80032a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe fc39 	bl	8001b1c <lfs_tag_id>
 80032aa:	4603      	mov	r3, r0
 80032ac:	461c      	mov	r4, r3
 80032ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe fc33 	bl	8001b1c <lfs_tag_id>
 80032b6:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 80032b8:	429c      	cmp	r4, r3
 80032ba:	d873      	bhi.n	80033a4 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80032bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fc1f 	bl	8001b02 <lfs_tag_splice>
 80032c4:	4603      	mov	r3, r0
 80032c6:	029a      	lsls	r2, r3, #10
 80032c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032ca:	4413      	add	r3, r2
 80032cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80032ce:	e069      	b.n	80033a4 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 80032d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fbd8 	bl	8001a88 <lfs_tag_type1>
 80032d8:	4603      	mov	r3, r0
 80032da:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80032de:	d132      	bne.n	8003346 <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 80032e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe fc00 	bl	8001ae8 <lfs_tag_chunk>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf14      	ite	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	2300      	moveq	r3, #0
 80032f6:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 80032fa:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003300:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003308:	3204      	adds	r2, #4
 800330a:	2108      	movs	r1, #8
 800330c:	9103      	str	r1, [sp, #12]
 800330e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8003312:	9102      	str	r1, [sp, #8]
 8003314:	9201      	str	r2, [sp, #4]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	4623      	mov	r3, r4
 800331a:	4602      	mov	r2, r0
 800331c:	2100      	movs	r1, #0
 800331e:	6978      	ldr	r0, [r7, #20]
 8003320:	f7fd ff20 	bl	8001164 <lfs_bd_read>
 8003324:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8003326:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003328:	2b00      	cmp	r3, #0
 800332a:	d006      	beq.n	800333a <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 800332c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800332e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003332:	f000 808a 	beq.w	800344a <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 8003336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003338:	e15f      	b.n	80035fa <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 800333a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fb4d 	bl	80019de <lfs_pair_fromle32>
 8003344:	e02e      	b.n	80033a4 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8003346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe fbbd 	bl	8001ac8 <lfs_tag_type3>
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 8003356:	429a      	cmp	r2, r3
 8003358:	d124      	bne.n	80033a4 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 800335a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003360:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003368:	3204      	adds	r2, #4
 800336a:	2108      	movs	r1, #8
 800336c:	9103      	str	r1, [sp, #12]
 800336e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8003372:	9102      	str	r1, [sp, #8]
 8003374:	9201      	str	r2, [sp, #4]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	4623      	mov	r3, r4
 800337a:	4602      	mov	r2, r0
 800337c:	2100      	movs	r1, #0
 800337e:	6978      	ldr	r0, [r7, #20]
 8003380:	f7fd fef0 	bl	8001164 <lfs_bd_read>
 8003384:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8003386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 800338c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800338e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003392:	d05c      	beq.n	800344e <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8003394:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe fcd5 	bl	8001d48 <lfs_fcrc_fromle32>
                hasfcrc = true;
 800339e:	2301      	movs	r3, #1
 80033a0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 80033a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033aa:	405a      	eors	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f47f ae46 	bne.w	8003042 <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 80033b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 80033bc:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 80033be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c0:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c4:	f107 0220 	add.w	r2, r7, #32
 80033c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033cc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80033d0:	4798      	blx	r3
 80033d2:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 80033d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	da05      	bge.n	80033e6 <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 80033da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033dc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80033e0:	d037      	beq.n	8003452 <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 80033e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 80033e4:	e109      	b.n	80035fa <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 80033e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d102      	bne.n	80033f2 <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 80033ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80033f0:	e627      	b.n	8003042 <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 80033f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033f6:	405a      	eors	r2, r3
 80033f8:	4b82      	ldr	r3, [pc, #520]	@ (8003604 <lfs_dir_fetchmatch+0x790>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8003400:	f04f 33ff 	mov.w	r3, #4294967295
 8003404:	663b      	str	r3, [r7, #96]	@ 0x60
 8003406:	e61c      	b.n	8003042 <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 8003408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340a:	2b02      	cmp	r3, #2
 800340c:	f47f ae19 	bne.w	8003042 <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8003410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe fb82 	bl	8001b1c <lfs_tag_id>
 8003418:	4603      	mov	r3, r0
 800341a:	461c      	mov	r4, r3
 800341c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe fb7c 	bl	8001b1c <lfs_tag_id>
 8003424:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8003426:	429c      	cmp	r4, r3
 8003428:	f63f ae0b 	bhi.w	8003042 <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800342c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003432:	663b      	str	r3, [r7, #96]	@ 0x60
 8003434:	e605      	b.n	8003042 <lfs_dir_fetchmatch+0x1ce>
                    break;
 8003436:	bf00      	nop
 8003438:	e00c      	b.n	8003454 <lfs_dir_fetchmatch+0x5e0>
                break;
 800343a:	bf00      	nop
 800343c:	e00a      	b.n	8003454 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800343e:	bf00      	nop
 8003440:	e008      	b.n	8003454 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8003442:	bf00      	nop
 8003444:	e006      	b.n	8003454 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8003446:	bf00      	nop
 8003448:	e004      	b.n	8003454 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800344a:	bf00      	nop
 800344c:	e002      	b.n	8003454 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800344e:	bf00      	nop
 8003450:	e000      	b.n	8003454 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8003452:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d000      	beq.n	800345e <lfs_dir_fetchmatch+0x5ea>
 800345c:	e017      	b.n	800348e <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe fa35 	bl	80018d0 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8003466:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003468:	3301      	adds	r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	bfb8      	it	lt
 8003472:	425b      	neglt	r3, r3
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	3378      	adds	r3, #120	@ 0x78
 8003478:	f107 0208 	add.w	r2, r7, #8
 800347c:	4413      	add	r3, r2
 800347e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8003486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003488:	3301      	adds	r3, #1
 800348a:	673b      	str	r3, [r7, #112]	@ 0x70
 800348c:	e0a1      	b.n	80035d2 <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2200      	movs	r2, #0
 8003492:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8003494:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003498:	2b00      	cmp	r3, #0
 800349a:	d03a      	beq.n	8003512 <lfs_dir_fetchmatch+0x69e>
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80034a4:	6992      	ldr	r2, [r2, #24]
 80034a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80034aa:	fb01 f202 	mul.w	r2, r1, r2
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d12e      	bne.n	8003512 <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 80034b4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02a      	beq.n	8003512 <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 80034bc:	f04f 33ff 	mov.w	r3, #4294967295
 80034c0:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 80034c2:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034c8:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	68d2      	ldr	r2, [r2, #12]
 80034d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80034d4:	f107 001c 	add.w	r0, r7, #28
 80034d8:	9003      	str	r0, [sp, #12]
 80034da:	9102      	str	r1, [sp, #8]
 80034dc:	9201      	str	r2, [sp, #4]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	462b      	mov	r3, r5
 80034e2:	4622      	mov	r2, r4
 80034e4:	2100      	movs	r1, #0
 80034e6:	6978      	ldr	r0, [r7, #20]
 80034e8:	f7fd ffd9 	bl	800149e <lfs_bd_crc>
 80034ec:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 80034ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <lfs_dir_fetchmatch+0x68c>
 80034f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034f6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80034fa:	d001      	beq.n	8003500 <lfs_dir_fetchmatch+0x68c>
                    return err;
 80034fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034fe:	e07c      	b.n	80035fa <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8003500:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	429a      	cmp	r2, r3
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2da      	uxtb	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	333c      	adds	r3, #60	@ 0x3c
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fbb4 	bl	8001c88 <lfs_gstate_hasmovehere>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d028      	beq.n	8003578 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe faf6 	bl	8001b1c <lfs_tag_id>
 8003530:	4603      	mov	r3, r0
 8003532:	461c      	mov	r4, r3
 8003534:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe faf0 	bl	8001b1c <lfs_tag_id>
 800353c:	4603      	mov	r3, r0
 800353e:	429c      	cmp	r4, r3
 8003540:	d104      	bne.n	800354c <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 8003542:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003544:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003548:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800354a:	e015      	b.n	8003578 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 800354c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800354e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003552:	d011      	beq.n	8003578 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe fadf 	bl	8001b1c <lfs_tag_id>
 800355e:	4603      	mov	r3, r0
 8003560:	461c      	mov	r4, r3
 8003562:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe fad9 	bl	8001b1c <lfs_tag_id>
 800356a:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 800356c:	429c      	cmp	r4, r3
 800356e:	d203      	bcs.n	8003578 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 8003570:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003572:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003576:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8003578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d010      	beq.n	80035a2 <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8003580:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe faca 	bl	8001b1c <lfs_tag_id>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	8a9b      	ldrh	r3, [r3, #20]
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f7fd fd0b 	bl	8000fae <lfs_min>
 8003598:	4603      	mov	r3, r0
 800359a:	b29a      	uxth	r2, r3
 800359c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035a0:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 80035a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe fa4e 	bl	8001a46 <lfs_tag_isvalid>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <lfs_dir_fetchmatch+0x740>
            return besttag;
 80035b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035b2:	e022      	b.n	80035fa <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 80035b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe fab0 	bl	8001b1c <lfs_tag_id>
 80035bc:	4603      	mov	r3, r0
 80035be:	461a      	mov	r2, r3
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	8a9b      	ldrh	r3, [r3, #20]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d202      	bcs.n	80035ce <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 80035c8:	f06f 0301 	mvn.w	r3, #1
 80035cc:	e015      	b.n	80035fa <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e013      	b.n	80035fa <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 80035d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	f77f ad00 	ble.w	8002fda <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4909      	ldr	r1, [pc, #36]	@ (8003608 <lfs_dir_fetchmatch+0x794>)
 80035e4:	9101      	str	r1, [sp, #4]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	4613      	mov	r3, r2
 80035ea:	f240 5265 	movw	r2, #1381	@ 0x565
 80035ee:	4907      	ldr	r1, [pc, #28]	@ (800360c <lfs_dir_fetchmatch+0x798>)
 80035f0:	4807      	ldr	r0, [pc, #28]	@ (8003610 <lfs_dir_fetchmatch+0x79c>)
 80035f2:	f009 fca3 	bl	800cf3c <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 80035f6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3784      	adds	r7, #132	@ 0x84
 80035fe:	46bd      	mov	sp, r7
 8003600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003602:	bf00      	nop
 8003604:	7ffffc00 	.word	0x7ffffc00
 8003608:	0800dda8 	.word	0x0800dda8
 800360c:	0800dc74 	.word	0x0800dc74
 8003610:	0800ddb4 	.word	0x0800ddb4

08003614 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af04      	add	r7, sp, #16
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8003620:	2300      	movs	r3, #0
 8003622:	9303      	str	r3, [sp, #12]
 8003624:	2300      	movs	r3, #0
 8003626:	9302      	str	r3, [sp, #8]
 8003628:	2300      	movs	r3, #0
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	f04f 33ff 	mov.w	r3, #4294967295
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	f04f 33ff 	mov.w	r3, #4294967295
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff fc1a 	bl	8002e74 <lfs_dir_fetchmatch>
 8003640:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	@ 0x28
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8003658:	f107 0310 	add.w	r3, r7, #16
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <lfs_dir_getgstate+0x5c>)
 8003660:	4a12      	ldr	r2, [pc, #72]	@ (80036ac <lfs_dir_getgstate+0x60>)
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f7fe fecf 	bl	8002408 <lfs_dir_get>
 800366a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	da05      	bge.n	800367e <lfs_dir_getgstate+0x32>
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f113 0f02 	cmn.w	r3, #2
 8003678:	d001      	beq.n	800367e <lfs_dir_getgstate+0x32>
        return res;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	e00f      	b.n	800369e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f113 0f02 	cmn.w	r3, #2
 8003684:	d00a      	beq.n	800369c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8003686:	f107 0310 	add.w	r3, r7, #16
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe fb1c 	bl	8001cc8 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8003690:	f107 0310 	add.w	r3, r7, #16
 8003694:	4619      	mov	r1, r3
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fe fa71 	bl	8001b7e <lfs_gstate_xor>
    }

    return 0;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3720      	adds	r7, #32
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	7ff0000c 	.word	0x7ff0000c
 80036ac:	7ff00000 	.word	0x7ff00000

080036b0 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b08f      	sub	sp, #60	@ 0x3c
 80036b4:	af04      	add	r7, sp, #16
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	689c      	ldr	r4, [r3, #8]
 80036ce:	68b8      	ldr	r0, [r7, #8]
 80036d0:	f7fe fa34 	bl	8001b3c <lfs_tag_size>
 80036d4:	4603      	mov	r3, r0
 80036d6:	4619      	mov	r1, r3
 80036d8:	4620      	mov	r0, r4
 80036da:	f7fd fc68 	bl	8000fae <lfs_min>
 80036de:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 80036e0:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 80036ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036ec:	6849      	ldr	r1, [r1, #4]
 80036ee:	69b8      	ldr	r0, [r7, #24]
 80036f0:	9003      	str	r0, [sp, #12]
 80036f2:	9102      	str	r1, [sp, #8]
 80036f4:	9201      	str	r2, [sp, #4]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	4622      	mov	r2, r4
 80036fc:	2100      	movs	r1, #0
 80036fe:	6a38      	ldr	r0, [r7, #32]
 8003700:	f7fd fe7c 	bl	80013fc <lfs_bd_cmp>
 8003704:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <lfs_dir_find_match+0x60>
        return res;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	e014      	b.n	800373a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	689c      	ldr	r4, [r3, #8]
 8003714:	68b8      	ldr	r0, [r7, #8]
 8003716:	f7fe fa11 	bl	8001b3c <lfs_tag_size>
 800371a:	4603      	mov	r3, r0
 800371c:	429c      	cmp	r4, r3
 800371e:	d00b      	beq.n	8003738 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	689c      	ldr	r4, [r3, #8]
 8003724:	68b8      	ldr	r0, [r7, #8]
 8003726:	f7fe fa09 	bl	8001b3c <lfs_tag_size>
 800372a:	4603      	mov	r3, r0
 800372c:	429c      	cmp	r4, r3
 800372e:	d201      	bcs.n	8003734 <lfs_dir_find_match+0x84>
 8003730:	2301      	movs	r3, #1
 8003732:	e002      	b.n	800373a <lfs_dir_find_match+0x8a>
 8003734:	2302      	movs	r3, #2
 8003736:	e000      	b.n	800373a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	372c      	adds	r7, #44	@ 0x2c
 800373e:	46bd      	mov	sp, r7
 8003740:	bd90      	pop	{r4, r7, pc}
	...

08003744 <lfs_dir_find>:
// returns:
// - 0                  if file is found
// - LFS_ERR_NOENT      if file or parent is not found
// - LFS_ERR_NOTDIR     if parent is not a dir
static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b092      	sub	sp, #72	@ 0x48
 8003748:	af04      	add	r7, sp, #16
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	637b      	str	r3, [r7, #52]	@ 0x34

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8003758:	4b76      	ldr	r3, [pc, #472]	@ (8003934 <lfs_dir_find+0x1f0>)
 800375a:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a1a      	ldr	r2, [r3, #32]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	61da      	str	r2, [r3, #28]

    // empty paths are not allowed
    if (*name == '\0') {
 800376c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <lfs_dir_find+0x34>
        return LFS_ERR_INVAL;
    }

    while (true) {
nextname:
 8003774:	bf00      	nop
 8003776:	e002      	b.n	800377e <lfs_dir_find+0x3a>
        return LFS_ERR_INVAL;
 8003778:	f06f 0315 	mvn.w	r3, #21
 800377c:	e0d6      	b.n	800392c <lfs_dir_find+0x1e8>
        // skip slashes if we're a directory
        if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 800377e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003780:	4618      	mov	r0, r3
 8003782:	f7fe f9a1 	bl	8001ac8 <lfs_tag_type3>
 8003786:	4603      	mov	r3, r0
 8003788:	2b02      	cmp	r3, #2
 800378a:	d107      	bne.n	800379c <lfs_dir_find+0x58>
            name += strspn(name, "/");
 800378c:	496a      	ldr	r1, [pc, #424]	@ (8003938 <lfs_dir_find+0x1f4>)
 800378e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003790:	f009 fc52 	bl	800d038 <strspn>
 8003794:	4602      	mov	r2, r0
 8003796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003798:	4413      	add	r3, r2
 800379a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        lfs_size_t namelen = strcspn(name, "/");
 800379c:	4966      	ldr	r1, [pc, #408]	@ (8003938 <lfs_dir_find+0x1f4>)
 800379e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80037a0:	f009 fc39 	bl	800d016 <strcspn>
 80037a4:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.'
        if (namelen == 1 && memcmp(name, ".", 1) == 0) {
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d10a      	bne.n	80037c2 <lfs_dir_find+0x7e>
 80037ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ae:	781a      	ldrb	r2, [r3, #0]
 80037b0:	4b62      	ldr	r3, [pc, #392]	@ (800393c <lfs_dir_find+0x1f8>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d104      	bne.n	80037c2 <lfs_dir_find+0x7e>
            name += namelen;
 80037b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	4413      	add	r3, r2
 80037be:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 80037c0:	e7dd      	b.n	800377e <lfs_dir_find+0x3a>
        }

        // error on unmatched '..', trying to go above root?
        if (namelen == 2 && memcmp(name, "..", 2) == 0) {
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d10a      	bne.n	80037de <lfs_dir_find+0x9a>
 80037c8:	2202      	movs	r2, #2
 80037ca:	495d      	ldr	r1, [pc, #372]	@ (8003940 <lfs_dir_find+0x1fc>)
 80037cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80037ce:	f009 fc0a 	bl	800cfe6 <memcmp>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <lfs_dir_find+0x9a>
            return LFS_ERR_INVAL;
 80037d8:	f06f 0315 	mvn.w	r3, #21
 80037dc:	e0a6      	b.n	800392c <lfs_dir_find+0x1e8>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 80037de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e2:	4413      	add	r3, r2
 80037e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 80037e6:	2301      	movs	r3, #1
 80037e8:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 80037ea:	4953      	ldr	r1, [pc, #332]	@ (8003938 <lfs_dir_find+0x1f4>)
 80037ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80037ee:	f009 fc23 	bl	800d038 <strspn>
 80037f2:	4602      	mov	r2, r0
 80037f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f6:	4413      	add	r3, r2
 80037f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 80037fa:	494f      	ldr	r1, [pc, #316]	@ (8003938 <lfs_dir_find+0x1f4>)
 80037fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80037fe:	f009 fc0a 	bl	800d016 <strcspn>
 8003802:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d026      	beq.n	8003858 <lfs_dir_find+0x114>
                break;
            }

            if (sufflen == 1 && memcmp(suffix, ".", 1) == 0) {
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <lfs_dir_find+0xd8>
 8003810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	4b49      	ldr	r3, [pc, #292]	@ (800393c <lfs_dir_find+0x1f8>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d018      	beq.n	800384e <lfs_dir_find+0x10a>
                // noop
            } else if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d112      	bne.n	8003848 <lfs_dir_find+0x104>
 8003822:	2202      	movs	r2, #2
 8003824:	4946      	ldr	r1, [pc, #280]	@ (8003940 <lfs_dir_find+0x1fc>)
 8003826:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003828:	f009 fbdd 	bl	800cfe6 <memcmp>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10a      	bne.n	8003848 <lfs_dir_find+0x104>
                depth -= 1;
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	3b01      	subs	r3, #1
 8003836:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 8003838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383a:	2b00      	cmp	r3, #0
 800383c:	d107      	bne.n	800384e <lfs_dir_find+0x10a>
                    name = suffix + sufflen;
 800383e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	4413      	add	r3, r2
 8003844:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 8003846:	e79a      	b.n	800377e <lfs_dir_find+0x3a>
                }
            } else {
                depth += 1;
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	3301      	adds	r3, #1
 800384c:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 800384e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	4413      	add	r3, r2
 8003854:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 8003856:	e7c8      	b.n	80037ea <lfs_dir_find+0xa6>
                break;
 8003858:	bf00      	nop
        }

        // found path
        if (*name == '\0') {
 800385a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <lfs_dir_find+0x122>
            return tag;
 8003862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003864:	e062      	b.n	800392c <lfs_dir_find+0x1e8>
        }

        // update what we've found so far
        *path = name;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800386a:	601a      	str	r2, [r3, #0]

        // only continue if we're a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800386c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe f92a 	bl	8001ac8 <lfs_tag_type3>
 8003874:	4603      	mov	r3, r0
 8003876:	2b02      	cmp	r3, #2
 8003878:	d002      	beq.n	8003880 <lfs_dir_find+0x13c>
            return LFS_ERR_NOTDIR;
 800387a:	f06f 0313 	mvn.w	r3, #19
 800387e:	e055      	b.n	800392c <lfs_dir_find+0x1e8>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8003880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe f94a 	bl	8001b1c <lfs_tag_id>
 8003888:	4603      	mov	r3, r0
 800388a:	461a      	mov	r2, r3
 800388c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8003890:	429a      	cmp	r2, r3
 8003892:	d01c      	beq.n	80038ce <lfs_dir_find+0x18a>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8003894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe f940 	bl	8001b1c <lfs_tag_id>
 800389c:	4603      	mov	r3, r0
 800389e:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80038a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80038a4:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80038ac:	9200      	str	r2, [sp, #0]
 80038ae:	4a25      	ldr	r2, [pc, #148]	@ (8003944 <lfs_dir_find+0x200>)
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f7fe fda8 	bl	8002408 <lfs_dir_get>
 80038b8:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	da01      	bge.n	80038c4 <lfs_dir_find+0x180>
                return res;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	e033      	b.n	800392c <lfs_dir_find+0x1e8>
            }
            lfs_pair_fromle32(dir->tail);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	3318      	adds	r3, #24
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fe f888 	bl	80019de <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f103 0218 	add.w	r2, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                    id,
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	61bb      	str	r3, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80038e0:	f107 0310 	add.w	r3, r7, #16
 80038e4:	9303      	str	r3, [sp, #12]
 80038e6:	4b18      	ldr	r3, [pc, #96]	@ (8003948 <lfs_dir_find+0x204>)
 80038e8:	9302      	str	r3, [sp, #8]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f7ff fabb 	bl	8002e74 <lfs_dir_fetchmatch>
 80038fe:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8003900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003902:	2b00      	cmp	r3, #0
 8003904:	da01      	bge.n	800390a <lfs_dir_find+0x1c6>
                return tag;
 8003906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003908:	e010      	b.n	800392c <lfs_dir_find+0x1e8>
            }

            if (tag) {
 800390a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <lfs_dir_find+0x1d6>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8003910:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	4413      	add	r3, r2
 8003916:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 8003918:	e731      	b.n	800377e <lfs_dir_find+0x3a>
            if (!dir->split) {
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	7ddb      	ldrb	r3, [r3, #23]
 800391e:	f083 0301 	eor.w	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0d2      	beq.n	80038ce <lfs_dir_find+0x18a>
                return LFS_ERR_NOENT;
 8003928:	f06f 0301 	mvn.w	r3, #1
    }
}
 800392c:	4618      	mov	r0, r3
 800392e:	3738      	adds	r7, #56	@ 0x38
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	002ffc00 	.word	0x002ffc00
 8003938:	0800dd78 	.word	0x0800dd78
 800393c:	0800ddf4 	.word	0x0800ddf4
 8003940:	0800ddf8 	.word	0x0800ddf8
 8003944:	700ffc00 	.word	0x700ffc00
 8003948:	080036b1 	.word	0x080036b1

0800394c <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b08b      	sub	sp, #44	@ 0x2c
 8003950:	af04      	add	r7, sp, #16
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f103 0010 	add.w	r0, r3, #16
 8003960:	68fc      	ldr	r4, [r7, #12]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	6852      	ldr	r2, [r2, #4]
 800396a:	6839      	ldr	r1, [r7, #0]
 800396c:	9103      	str	r1, [sp, #12]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	9102      	str	r1, [sp, #8]
 8003972:	9201      	str	r2, [sp, #4]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	2300      	movs	r3, #0
 8003978:	4622      	mov	r2, r4
 800397a:	4601      	mov	r1, r0
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f7fd fe83 	bl	8001688 <lfs_bd_prog>
 8003982:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <lfs_dir_commitprog+0x42>
        return err;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	e010      	b.n	80039b0 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4618      	mov	r0, r3
 8003998:	f004 fa02 	bl	8007da0 <lfs_crc>
 800399c:	4602      	mov	r2, r0
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	60da      	str	r2, [r3, #12]
    commit->off += size;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	441a      	add	r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	605a      	str	r2, [r3, #4]
    return 0;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	371c      	adds	r7, #28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd90      	pop	{r4, r7, pc}

080039b8 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b08f      	sub	sp, #60	@ 0x3c
 80039bc:	af04      	add	r7, sp, #16
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fe f8c5 	bl	8001b56 <lfs_tag_dsize>
 80039cc:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	441a      	add	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d902      	bls.n	80039e4 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 80039de:	f06f 031b 	mvn.w	r3, #27
 80039e2:	e065      	b.n	8003ab0 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	4053      	eors	r3, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fd fb6f 	bl	80010d4 <lfs_tobe32>
 80039f6:	4603      	mov	r3, r0
 80039f8:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80039fa:	f107 0214 	add.w	r2, r7, #20
 80039fe:	2304      	movs	r3, #4
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f7ff ffa2 	bl	800394c <lfs_dir_commitprog>
 8003a08:	61f8      	str	r0, [r7, #28]
    if (err) {
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <lfs_dir_commitattr+0x5c>
        return err;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	e04d      	b.n	8003ab0 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	db0c      	blt.n	8003a34 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	3b04      	subs	r3, #4
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7ff ff92 	bl	800394c <lfs_dir_commitprog>
 8003a28:	61f8      	str	r0, [r7, #28]
        if (err) {
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d039      	beq.n	8003aa4 <lfs_dir_commitattr+0xec>
            return err;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	e03d      	b.n	8003ab0 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a3c:	e02d      	b.n	8003a9a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8003a3e:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8003a40:	6a3a      	ldr	r2, [r7, #32]
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8003a46:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8003a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a52:	440a      	add	r2, r1
 8003a54:	2101      	movs	r1, #1
 8003a56:	9103      	str	r1, [sp, #12]
 8003a58:	f107 0113 	add.w	r1, r7, #19
 8003a5c:	9102      	str	r1, [sp, #8]
 8003a5e:	9201      	str	r2, [sp, #4]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	4623      	mov	r3, r4
 8003a64:	4602      	mov	r2, r0
 8003a66:	2100      	movs	r1, #0
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f7fd fb7b 	bl	8001164 <lfs_bd_read>
 8003a6e:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <lfs_dir_commitattr+0xc2>
                return err;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	e01a      	b.n	8003ab0 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8003a7a:	f107 0213 	add.w	r2, r7, #19
 8003a7e:	2301      	movs	r3, #1
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f7ff ff62 	bl	800394c <lfs_dir_commitprog>
 8003a88:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <lfs_dir_commitattr+0xdc>
                return err;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	e00d      	b.n	8003ab0 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	3301      	adds	r3, #1
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	3b04      	subs	r3, #4
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3cc      	bcc.n	8003a3e <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	609a      	str	r2, [r3, #8]
    return 0;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	372c      	adds	r7, #44	@ 0x2c
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd90      	pop	{r4, r7, pc}

08003ab8 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8003ab8:	b590      	push	{r4, r7, lr}
 8003aba:	b097      	sub	sp, #92	@ 0x5c
 8003abc:	af04      	add	r7, sp, #16
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8003ac6:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ace:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f7fd fa6b 	bl	8000fae <lfs_min>
 8003ad8:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ade:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f7fd fa88 	bl	8000ff8 <lfs_alignup>
 8003ae8:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8003af2:	e0fe      	b.n	8003cf2 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	3b04      	subs	r3, #4
 8003afe:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd fa53 	bl	8000fae <lfs_min>
 8003b08:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4413      	add	r3, r2
        lfs_off_t noff = (
 8003b10:	3304      	adds	r3, #4
 8003b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8003b14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d206      	bcs.n	8003b2a <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1e:	3b14      	subs	r3, #20
 8003b20:	4619      	mov	r1, r3
 8003b22:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003b24:	f7fd fa43 	bl	8000fae <lfs_min>
 8003b28:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 8003b2a:	23ff      	movs	r3, #255	@ 0xff
 8003b2c:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 8003b2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d35f      	bcc.n	8003bf6 <lfs_dir_commitcrc+0x13e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d855      	bhi.n	8003bf6 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 8003b4a:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b50:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2201      	movs	r2, #1
 8003b58:	9203      	str	r2, [sp, #12]
 8003b5a:	f107 021b 	add.w	r2, r7, #27
 8003b5e:	9202      	str	r2, [sp, #8]
 8003b60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b62:	9201      	str	r2, [sp, #4]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	4603      	mov	r3, r0
 8003b68:	460a      	mov	r2, r1
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7fd faf9 	bl	8001164 <lfs_bd_read>
 8003b72:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8003b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <lfs_dir_commitcrc+0xce>
 8003b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003b80:	d001      	beq.n	8003b86 <lfs_dir_commitcrc+0xce>
                return err;
 8003b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b84:	e101      	b.n	8003d8a <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b8a:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b92:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8003b94:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b9a:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	f107 0108 	add.w	r1, r7, #8
 8003ba6:	3104      	adds	r1, #4
 8003ba8:	9103      	str	r1, [sp, #12]
 8003baa:	9202      	str	r2, [sp, #8]
 8003bac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bae:	9201      	str	r2, [sp, #4]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7fd fc70 	bl	800149e <lfs_bd_crc>
 8003bbe:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8003bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <lfs_dir_commitcrc+0x11a>
 8003bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003bcc:	d001      	beq.n	8003bd2 <lfs_dir_commitcrc+0x11a>
                    return err;
 8003bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd0:	e010      	b.n	8003bf4 <lfs_dir_commitcrc+0x13c>
                }

                lfs_fcrc_tole32(&fcrc);
 8003bd2:	f107 0308 	add.w	r3, r7, #8
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe f8ce 	bl	8001d78 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 8003bdc:	f107 0308 	add.w	r3, r7, #8
 8003be0:	4a6c      	ldr	r2, [pc, #432]	@ (8003d94 <lfs_dir_commitcrc+0x2dc>)
 8003be2:	6839      	ldr	r1, [r7, #0]
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff fee7 	bl	80039b8 <lfs_dir_commitattr>
 8003bea:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 8003bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <lfs_dir_commitcrc+0x13e>
                    return err;
 8003bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 8003bf4:	e0c9      	b.n	8003d8a <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 8003bf6:	7efb      	ldrb	r3, [r7, #27]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	09db      	lsrs	r3, r3, #7
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c04:	051a      	lsls	r2, r3, #20
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c0c:	1acb      	subs	r3, r1, r3
 8003c0e:	3b04      	subs	r3, #4
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 8003c16:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8003c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c22:	4053      	eors	r3, r2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fd fa55 	bl	80010d4 <lfs_tobe32>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f107 0110 	add.w	r1, r7, #16
 8003c36:	2204      	movs	r2, #4
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f004 f8b1 	bl	8007da0 <lfs_crc>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fd fa2b 	bl	80010a4 <lfs_tole32>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f103 0010 	add.w	r0, r3, #16
 8003c58:	687c      	ldr	r4, [r7, #4]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	6852      	ldr	r2, [r2, #4]
 8003c62:	2108      	movs	r1, #8
 8003c64:	9103      	str	r1, [sp, #12]
 8003c66:	f107 0110 	add.w	r1, r7, #16
 8003c6a:	9102      	str	r1, [sp, #8]
 8003c6c:	9201      	str	r2, [sp, #4]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2300      	movs	r3, #0
 8003c72:	4622      	mov	r2, r4
 8003c74:	4601      	mov	r1, r0
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fd fd06 	bl	8001688 <lfs_bd_prog>
 8003c7c:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <lfs_dir_commitcrc+0x1d0>
            return err;
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	e080      	b.n	8003d8a <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8003c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	3304      	adds	r3, #4
 8003c94:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ca0:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8003ca2:	7efb      	ldrb	r3, [r7, #27]
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	061b      	lsls	r3, r3, #24
 8003ca8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cae:	405a      	eors	r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cba:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8003cbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d208      	bcs.n	8003cd6 <lfs_dir_commitcrc+0x21e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	4413      	add	r3, r2
 8003cd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d30d      	bcc.n	8003cf2 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f103 0110 	add.w	r1, r3, #16
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7fd fc9d 	bl	8001620 <lfs_bd_sync>
 8003ce6:	6238      	str	r0, [r7, #32]
            if (err) {
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <lfs_dir_commitcrc+0x23a>
                return err;
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	e04b      	b.n	8003d8a <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	f63f aefb 	bhi.w	8003af4 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295
 8003d08:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d0e:	1d1c      	adds	r4, r3, #4
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003d16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d18:	1a8a      	subs	r2, r1, r2
 8003d1a:	f107 011c 	add.w	r1, r7, #28
 8003d1e:	9103      	str	r1, [sp, #12]
 8003d20:	9202      	str	r2, [sp, #8]
 8003d22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d24:	9201      	str	r2, [sp, #4]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	4623      	mov	r3, r4
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fbb5 	bl	800149e <lfs_bd_crc>
 8003d34:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 8003d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <lfs_dir_commitcrc+0x288>
        return err;
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3e:	e024      	b.n	8003d8a <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d002      	beq.n	8003d4e <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8003d48:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8003d4c:	e01d      	b.n	8003d8a <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f107 021c 	add.w	r2, r7, #28
 8003d58:	9203      	str	r2, [sp, #12]
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	9202      	str	r2, [sp, #8]
 8003d5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d60:	9201      	str	r2, [sp, #4]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	2304      	movs	r3, #4
 8003d66:	460a      	mov	r2, r1
 8003d68:	2100      	movs	r1, #0
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fd fb97 	bl	800149e <lfs_bd_crc>
 8003d70:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8003d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <lfs_dir_commitcrc+0x2c4>
        return err;
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	e006      	b.n	8003d8a <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8003d82:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8003d86:	e000      	b.n	8003d8a <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	374c      	adds	r7, #76	@ 0x4c
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd90      	pop	{r4, r7, pc}
 8003d92:	bf00      	nop
 8003d94:	5ffffc08 	.word	0x5ffffc08

08003d98 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08a      	sub	sp, #40	@ 0x28
 8003d9c:	af04      	add	r7, sp, #16
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	e016      	b.n	8003dd6 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	3301      	adds	r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	bfb8      	it	lt
 8003db4:	425b      	neglt	r3, r3
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	4413      	add	r3, r2
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fe f9a4 	bl	800210c <lfs_alloc>
 8003dc4:	60f8      	str	r0, [r7, #12]
        if (err) {
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <lfs_dir_alloc+0x38>
            return err;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	e058      	b.n	8003e82 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	dde5      	ble.n	8003da8 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8003dec:	2004      	movs	r0, #4
 8003dee:	9003      	str	r0, [sp, #12]
 8003df0:	9202      	str	r2, [sp, #8]
 8003df2:	2200      	movs	r2, #0
 8003df4:	9201      	str	r2, [sp, #4]
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	2304      	movs	r3, #4
 8003dfa:	460a      	mov	r2, r1
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fd f9b0 	bl	8001164 <lfs_bd_read>
 8003e04:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fd f93f 	bl	800108e <lfs_fromle32>
 8003e10:	4602      	mov	r2, r0
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <lfs_dir_alloc+0x90>
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003e22:	d001      	beq.n	8003e28 <lfs_dir_alloc+0x90>
        return err;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	e02c      	b.n	8003e82 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	dd0e      	ble.n	8003e50 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	4619      	mov	r1, r3
 8003e44:	4610      	mov	r0, r2
 8003e46:	f7fd f8d7 	bl	8000ff8 <lfs_alignup>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2204      	movs	r2, #4
 8003e54:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5c:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2200      	movs	r2, #0
 8003e62:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e72:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2200      	movs	r2, #0
 8003e78:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b092      	sub	sp, #72	@ 0x48
 8003e8e:	af04      	add	r7, sp, #16
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8003e98:	f107 0310 	add.w	r3, r7, #16
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff ff7a 	bl	8003d98 <lfs_dir_alloc>
 8003ea4:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <lfs_dir_split+0x26>
        return err;
 8003eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eae:	e03c      	b.n	8003f2a <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	7ddb      	ldrb	r3, [r3, #23]
 8003eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8003ec4:	f107 0110 	add.w	r1, r7, #16
 8003ec8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003ecc:	9302      	str	r3, [sp, #8]
 8003ece:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f879 	bl	8003fd4 <lfs_dir_compact>
 8003ee2:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	da01      	bge.n	8003eee <lfs_dir_split+0x64>
        return res;
 8003eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eec:	e01d      	b.n	8003f2a <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2201      	movs	r2, #1
 8003efe:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	3320      	adds	r3, #32
 8003f06:	4619      	mov	r1, r3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	f7fd fd11 	bl	8001930 <lfs_pair_cmp>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <lfs_dir_split+0x9e>
 8003f14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3738      	adds	r7, #56	@ 0x38
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8003f42:	68b8      	ldr	r0, [r7, #8]
 8003f44:	f7fd fe07 	bl	8001b56 <lfs_tag_dsize>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	441a      	add	r2, r3
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	601a      	str	r2, [r3, #0]
    return 0;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b086      	sub	sp, #24
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	6859      	ldr	r1, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	f7ff fd1d 	bl	80039b8 <lfs_dir_commitattr>
 8003f7e:	4603      	mov	r3, r0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	dd11      	ble.n	8003fc0 <lfs_dir_needsrelocation+0x38>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003fa6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fa8:	3201      	adds	r2, #1
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fb2:	fb01 f202 	mul.w	r2, r1, r2
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <lfs_dir_needsrelocation+0x38>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <lfs_dir_needsrelocation+0x3a>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	b2db      	uxtb	r3, r3
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b0a4      	sub	sp, #144	@ 0x90
 8003fd8:	af0a      	add	r7, sp, #40	@ 0x28
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f7ff ffcc 	bl	8003f88 <lfs_dir_needsrelocation>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8004000:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00e      	beq.n	8004026 <lfs_dir_compact+0x52>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2200      	movs	r2, #0
 800400c:	657a      	str	r2, [r7, #84]	@ 0x54
 800400e:	2201      	movs	r2, #1
 8004010:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004012:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f7fd fc89 	bl	8001930 <lfs_pair_cmp>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	f040 8155 	bne.w	80042d0 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800402a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800402c:	2300      	movs	r3, #0
 800402e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004030:	f04f 33ff 	mov.w	r3, #4294967295
 8004034:	647b      	str	r3, [r7, #68]	@ 0x44
 8004036:	f04f 33ff 	mov.w	r3, #4294967295
 800403a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800403c:	2300      	movs	r3, #0
 800403e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8004046:	2b00      	cmp	r3, #0
 8004048:	d004      	beq.n	8004054 <lfs_dir_compact+0x80>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800404e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004050:	3b08      	subs	r3, #8
 8004052:	e003      	b.n	800405c <lfs_dir_compact+0x88>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800405c:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4619      	mov	r1, r3
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f7fd fbbd 	bl	80017e4 <lfs_bd_erase>
 800406a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800406c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d006      	beq.n	8004080 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8004072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004074:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004078:	f000 812c 	beq.w	80042d4 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800407c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800407e:	e188      	b.n	8004392 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4618      	mov	r0, r3
 8004086:	f7fd f80d 	bl	80010a4 <lfs_tole32>
 800408a:	4602      	mov	r2, r0
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8004096:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800409a:	2304      	movs	r3, #4
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff fc55 	bl	800394c <lfs_dir_commitprog>
 80040a2:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fc fff0 	bl	800108e <lfs_fromle32>
 80040ae:	4602      	mov	r2, r0
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	609a      	str	r2, [r3, #8]
            if (err) {
 80040b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d006      	beq.n	80040c8 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80040ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040bc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80040c0:	f000 810a 	beq.w	80042d8 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80040c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040c6:	e164      	b.n	8004392 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80040c8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80040cc:	425b      	negs	r3, r3
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	637a      	str	r2, [r7, #52]	@ 0x34
 80040d6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80040da:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 80040dc:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80040e0:	9208      	str	r2, [sp, #32]
 80040e2:	4aae      	ldr	r2, [pc, #696]	@ (800439c <lfs_dir_compact+0x3c8>)
 80040e4:	9207      	str	r2, [sp, #28]
 80040e6:	9306      	str	r3, [sp, #24]
 80040e8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80040ec:	9305      	str	r3, [sp, #20]
 80040ee:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80040f2:	9304      	str	r3, [sp, #16]
 80040f4:	2300      	movs	r3, #0
 80040f6:	9303      	str	r3, [sp, #12]
 80040f8:	4ba9      	ldr	r3, [pc, #676]	@ (80043a0 <lfs_dir_compact+0x3cc>)
 80040fa:	9302      	str	r3, [sp, #8]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	f04f 33ff 	mov.w	r3, #4294967295
 8004108:	2200      	movs	r2, #0
 800410a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f7fe facd 	bl	80026ac <lfs_dir_traverse>
 8004112:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 8004114:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004116:	2b00      	cmp	r3, #0
 8004118:	d006      	beq.n	8004128 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 800411a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800411c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004120:	f000 80dc 	beq.w	80042dc <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8004124:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004126:	e134      	b.n	8004392 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	3318      	adds	r3, #24
 800412c:	4618      	mov	r0, r3
 800412e:	f7fd fbe4 	bl	80018fa <lfs_pair_isnull>
 8004132:	4603      	mov	r3, r0
 8004134:	f083 0301 	eor.w	r3, r3, #1
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d022      	beq.n	8004184 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	3318      	adds	r3, #24
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd fc65 	bl	8001a12 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	7ddb      	ldrb	r3, [r3, #23]
 800414c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8004150:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8004152:	4a94      	ldr	r2, [pc, #592]	@ (80043a4 <lfs_dir_compact+0x3d0>)
 8004154:	431a      	orrs	r2, r3
                        dir->tail);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800415a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7ff fc2a 	bl	80039b8 <lfs_dir_commitattr>
 8004164:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	3318      	adds	r3, #24
 800416a:	4618      	mov	r0, r3
 800416c:	f7fd fc37 	bl	80019de <lfs_pair_fromle32>
                if (err) {
 8004170:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d006      	beq.n	8004184 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8004176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004178:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800417c:	f000 80b0 	beq.w	80042e0 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8004180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004182:	e106      	b.n	8004392 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8004184:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	605a      	str	r2, [r3, #4]
 800418e:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8004190:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004194:	f083 0301 	eor.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d011      	beq.n	80041c2 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80041a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041a8:	4611      	mov	r1, r2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd fce7 	bl	8001b7e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80041b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fd fcde 	bl	8001b7e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80041c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd fcd5 	bl	8001b7e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80041d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80041e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041e4:	461a      	mov	r2, r3
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff fa2f 	bl	800364c <lfs_dir_getgstate>
 80041ee:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 80041f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <lfs_dir_compact+0x226>
                return err;
 80041f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041f8:	e0cb      	b.n	8004392 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80041fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fd fcdd 	bl	8001bbe <lfs_gstate_iszero>
 8004204:	4603      	mov	r3, r0
 8004206:	f083 0301 	eor.w	r3, r3, #1
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d016      	beq.n	800423e <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8004210:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004214:	4618      	mov	r0, r3
 8004216:	f7fd fd77 	bl	8001d08 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800421a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800421e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8004222:	4a61      	ldr	r2, [pc, #388]	@ (80043a8 <lfs_dir_compact+0x3d4>)
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff fbc7 	bl	80039b8 <lfs_dir_commitattr>
 800422a:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800422c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8004232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004234:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004238:	d054      	beq.n	80042e4 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 800423a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800423c:	e0a9      	b.n	8004392 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800423e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004242:	4619      	mov	r1, r3
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f7ff fc37 	bl	8003ab8 <lfs_dir_commitcrc>
 800424a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800424c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8004252:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004254:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004258:	d046      	beq.n	80042e8 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 800425a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800425c:	e099      	b.n	8004392 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800425e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004264:	6992      	ldr	r2, [r2, #24]
 8004266:	fbb3 f1f2 	udiv	r1, r3, r2
 800426a:	fb01 f202 	mul.w	r2, r1, r2
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d006      	beq.n	8004282 <lfs_dir_compact+0x2ae>
 8004274:	4b4d      	ldr	r3, [pc, #308]	@ (80043ac <lfs_dir_compact+0x3d8>)
 8004276:	4a4e      	ldr	r2, [pc, #312]	@ (80043b0 <lfs_dir_compact+0x3dc>)
 8004278:	f640 0121 	movw	r1, #2081	@ 0x821
 800427c:	484d      	ldr	r0, [pc, #308]	@ (80043b4 <lfs_dir_compact+0x3e0>)
 800427e:	f008 fcad 	bl	800cbdc <__assert_func>
            lfs_pair_swap(dir->pair);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fd fb23 	bl	80018d0 <lfs_pair_swap>
            dir->count = end - begin;
 800428a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 800428e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	b29a      	uxth	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800429a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 80042a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3348      	adds	r3, #72	@ 0x48
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80042b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80042b6:	f083 0301 	eor.w	r3, r3, #1
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d065      	beq.n	800438c <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	333c      	adds	r3, #60	@ 0x3c
 80042c6:	3230      	adds	r2, #48	@ 0x30
 80042c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80042ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 80042ce:	e05d      	b.n	800438c <lfs_dir_compact+0x3b8>
        goto relocate;
 80042d0:	bf00      	nop
 80042d2:	e00a      	b.n	80042ea <lfs_dir_compact+0x316>
                    goto relocate;
 80042d4:	bf00      	nop
 80042d6:	e008      	b.n	80042ea <lfs_dir_compact+0x316>
                    goto relocate;
 80042d8:	bf00      	nop
 80042da:	e006      	b.n	80042ea <lfs_dir_compact+0x316>
                    goto relocate;
 80042dc:	bf00      	nop
 80042de:	e004      	b.n	80042ea <lfs_dir_compact+0x316>
                        goto relocate;
 80042e0:	bf00      	nop
 80042e2:	e002      	b.n	80042ea <lfs_dir_compact+0x316>
                        goto relocate;
 80042e4:	bf00      	nop
 80042e6:	e000      	b.n	80042ea <lfs_dir_compact+0x316>
                    goto relocate;
 80042e8:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3310      	adds	r3, #16
 80042f4:	4619      	mov	r1, r3
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f7fc ff0f 	bl	800111a <lfs_cache_drop>
        if (!tired) {
 80042fc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004300:	f083 0301 	eor.w	r3, r3, #1
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a2a      	ldr	r2, [pc, #168]	@ (80043b8 <lfs_dir_compact+0x3e4>)
 8004310:	9200      	str	r2, [sp, #0]
 8004312:	f640 0233 	movw	r2, #2099	@ 0x833
 8004316:	4927      	ldr	r1, [pc, #156]	@ (80043b4 <lfs_dir_compact+0x3e0>)
 8004318:	4828      	ldr	r0, [pc, #160]	@ (80043bc <lfs_dir_compact+0x3e8>)
 800431a:	f008 fe0f 	bl	800cf3c <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2200      	movs	r2, #0
 8004322:	617a      	str	r2, [r7, #20]
 8004324:	2201      	movs	r2, #1
 8004326:	61ba      	str	r2, [r7, #24]
 8004328:	f107 0214 	add.w	r2, r7, #20
 800432c:	4611      	mov	r1, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f7fd fafe 	bl	8001930 <lfs_pair_cmp>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10c      	bne.n	8004354 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4a1e      	ldr	r2, [pc, #120]	@ (80043b8 <lfs_dir_compact+0x3e4>)
 8004340:	9200      	str	r2, [sp, #0]
 8004342:	f640 0238 	movw	r2, #2104	@ 0x838
 8004346:	491b      	ldr	r1, [pc, #108]	@ (80043b4 <lfs_dir_compact+0x3e0>)
 8004348:	481d      	ldr	r0, [pc, #116]	@ (80043c0 <lfs_dir_compact+0x3ec>)
 800434a:	f008 fdf7 	bl	800cf3c <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800434e:	f06f 031b 	mvn.w	r3, #27
 8004352:	e01e      	b.n	8004392 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3304      	adds	r3, #4
 8004358:	4619      	mov	r1, r3
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f7fd fed6 	bl	800210c <lfs_alloc>
 8004360:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8004362:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00c      	beq.n	8004382 <lfs_dir_compact+0x3ae>
 8004368:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800436a:	f113 0f1c 	cmn.w	r3, #28
 800436e:	d106      	bne.n	800437e <lfs_dir_compact+0x3aa>
 8004370:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004374:	f083 0301 	eor.w	r3, r3, #1
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <lfs_dir_compact+0x3ae>
            return err;
 800437e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004380:	e007      	b.n	8004392 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8004382:	2300      	movs	r3, #0
 8004384:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 8004388:	bf00      	nop
    while (true) {
 800438a:	e64c      	b.n	8004026 <lfs_dir_compact+0x52>
        break;
 800438c:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 800438e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8004392:	4618      	mov	r0, r3
 8004394:	3768      	adds	r7, #104	@ 0x68
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	08003f5f 	.word	0x08003f5f
 80043a0:	400ffc00 	.word	0x400ffc00
 80043a4:	000ffc08 	.word	0x000ffc08
 80043a8:	7ffffc0c 	.word	0x7ffffc0c
 80043ac:	0800ddfc 	.word	0x0800ddfc
 80043b0:	0800ea98 	.word	0x0800ea98
 80043b4:	0800dc74 	.word	0x0800dc74
 80043b8:	0800dda8 	.word	0x0800dda8
 80043bc:	0800de24 	.word	0x0800de24
 80043c0:	0800de48 	.word	0x0800de48

080043c4 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80043c4:	b590      	push	{r4, r7, lr}
 80043c6:	b099      	sub	sp, #100	@ 0x64
 80043c8:	af0a      	add	r7, sp, #40	@ 0x28
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 80043d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80043d6:	637b      	str	r3, [r7, #52]	@ 0x34
        while (end - split > 1) {
 80043d8:	e057      	b.n	800448a <lfs_dir_splittingcompact+0xc6>
            lfs_size_t size = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
            int err = lfs_dir_traverse(lfs,
 80043de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043e4:	b292      	uxth	r2, r2
 80043e6:	4252      	negs	r2, r2
 80043e8:	b292      	uxth	r2, r2
 80043ea:	b212      	sxth	r2, r2
 80043ec:	f107 011c 	add.w	r1, r7, #28
 80043f0:	9108      	str	r1, [sp, #32]
 80043f2:	4979      	ldr	r1, [pc, #484]	@ (80045d8 <lfs_dir_splittingcompact+0x214>)
 80043f4:	9107      	str	r1, [sp, #28]
 80043f6:	9206      	str	r2, [sp, #24]
 80043f8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80043fc:	9205      	str	r2, [sp, #20]
 80043fe:	9304      	str	r3, [sp, #16]
 8004400:	2300      	movs	r3, #0
 8004402:	9303      	str	r3, [sp, #12]
 8004404:	4b75      	ldr	r3, [pc, #468]	@ (80045dc <lfs_dir_splittingcompact+0x218>)
 8004406:	9302      	str	r3, [sp, #8]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	f04f 33ff 	mov.w	r3, #4294967295
 8004414:	2200      	movs	r2, #0
 8004416:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7fe f947 	bl	80026ac <lfs_dir_traverse>
 800441e:	6338      	str	r0, [r7, #48]	@ 0x30
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8004420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <lfs_dir_splittingcompact+0x66>
                return err;
 8004426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004428:	e0d1      	b.n	80045ce <lfs_dir_splittingcompact+0x20a>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            lfs_size_t metadata_max = (lfs->cfg->metadata_max)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800442e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    ? lfs->cfg->metadata_max
                    : lfs->cfg->block_size;
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <lfs_dir_splittingcompact+0x78>
                    ? lfs->cfg->metadata_max
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                    : lfs->cfg->block_size;
 8004438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443a:	e002      	b.n	8004442 <lfs_dir_splittingcompact+0x7e>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004440:	69db      	ldr	r3, [r3, #28]
            lfs_size_t metadata_max = (lfs->cfg->metadata_max)
 8004442:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (end - split < 0xff
 8004444:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2bfe      	cmp	r3, #254	@ 0xfe
 800444e:	d814      	bhi.n	800447a <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 8004450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004452:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
 8004456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004458:	085a      	lsrs	r2, r3, #1
                        metadata_max - 40,
                        lfs_alignup(
                            metadata_max/2,
                            lfs->cfg->prog_size))) {
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800445e:	699b      	ldr	r3, [r3, #24]
                    && size <= lfs_min(
 8004460:	4619      	mov	r1, r3
 8004462:	4610      	mov	r0, r2
 8004464:	f7fc fdc8 	bl	8000ff8 <lfs_alignup>
 8004468:	4603      	mov	r3, r0
 800446a:	4619      	mov	r1, r3
 800446c:	4620      	mov	r0, r4
 800446e:	f7fc fd9e 	bl	8000fae <lfs_min>
 8004472:	4602      	mov	r2, r0
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	429a      	cmp	r2, r3
 8004478:	d20e      	bcs.n	8004498 <lfs_dir_splittingcompact+0xd4>
                break;
            }

            split = split + ((end - split) / 2);
 800447a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800447e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004486:	4413      	add	r3, r2
 8004488:	637b      	str	r3, [r7, #52]	@ 0x34
        while (end - split > 1) {
 800448a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800448e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b01      	cmp	r3, #1
 8004494:	d8a1      	bhi.n	80043da <lfs_dir_splittingcompact+0x16>
 8004496:	e000      	b.n	800449a <lfs_dir_splittingcompact+0xd6>
                break;
 8004498:	bf00      	nop
        }

        if (split == begin) {
 800449a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800449e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d02d      	beq.n	8004500 <lfs_dir_splittingcompact+0x13c>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80044a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80044ac:	9202      	str	r2, [sp, #8]
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff fce5 	bl	8003e8a <lfs_dir_split>
 80044c0:	62b8      	str	r0, [r7, #40]	@ 0x28
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 80044c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <lfs_dir_splittingcompact+0x110>
 80044c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ca:	f113 0f1c 	cmn.w	r3, #28
 80044ce:	d001      	beq.n	80044d4 <lfs_dir_splittingcompact+0x110>
            return err;
 80044d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d2:	e07c      	b.n	80045ce <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 80044d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00e      	beq.n	80044f8 <lfs_dir_splittingcompact+0x134>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	493f      	ldr	r1, [pc, #252]	@ (80045e0 <lfs_dir_splittingcompact+0x21c>)
 80044e4:	9101      	str	r1, [sp, #4]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	f640 028c 	movw	r2, #2188	@ 0x88c
 80044ee:	493d      	ldr	r1, [pc, #244]	@ (80045e4 <lfs_dir_splittingcompact+0x220>)
 80044f0:	483d      	ldr	r0, [pc, #244]	@ (80045e8 <lfs_dir_splittingcompact+0x224>)
 80044f2:	f008 fd23 	bl	800cf3c <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 80044f6:	e004      	b.n	8004502 <lfs_dir_splittingcompact+0x13e>
        } else {
            end = split;
 80044f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044fa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    while (true) {
 80044fe:	e768      	b.n	80043d2 <lfs_dir_splittingcompact+0xe>
            break;
 8004500:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7ff fd3f 	bl	8003f88 <lfs_dir_needsrelocation>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d04f      	beq.n	80045b0 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2200      	movs	r2, #0
 8004514:	617a      	str	r2, [r7, #20]
 8004516:	2201      	movs	r2, #1
 8004518:	61ba      	str	r2, [r7, #24]
 800451a:	f107 0214 	add.w	r2, r7, #20
 800451e:	4611      	mov	r1, r2
 8004520:	4618      	mov	r0, r3
 8004522:	f7fd fa05 	bl	8001930 <lfs_pair_cmp>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d141      	bne.n	80045b0 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f003 fb31 	bl	8007b94 <lfs_fs_size_>
 8004532:	6278      	str	r0, [r7, #36]	@ 0x24
        if (size < 0) {
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	2b00      	cmp	r3, #0
 8004538:	da01      	bge.n	800453e <lfs_dir_splittingcompact+0x17a>
            return size;
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	e047      	b.n	80045ce <lfs_dir_splittingcompact+0x20a>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	1ad2      	subs	r2, r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800454a:	08db      	lsrs	r3, r3, #3
 800454c:	429a      	cmp	r2, r3
 800454e:	d92f      	bls.n	80045b0 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	4a22      	ldr	r2, [pc, #136]	@ (80045e0 <lfs_dir_splittingcompact+0x21c>)
 8004556:	9200      	str	r2, [sp, #0]
 8004558:	f640 02a2 	movw	r2, #2210	@ 0x8a2
 800455c:	4921      	ldr	r1, [pc, #132]	@ (80045e4 <lfs_dir_splittingcompact+0x220>)
 800455e:	4823      	ldr	r0, [pc, #140]	@ (80045ec <lfs_dir_splittingcompact+0x228>)
 8004560:	f008 fcec 	bl	800cf3c <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8004564:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004568:	9302      	str	r3, [sp, #8]
 800456a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800456e:	9301      	str	r3, [sp, #4]
 8004570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff fc85 	bl	8003e8a <lfs_dir_split>
 8004580:	6238      	str	r0, [r7, #32]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <lfs_dir_splittingcompact+0x1d0>
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	f113 0f1c 	cmn.w	r3, #28
 800458e:	d001      	beq.n	8004594 <lfs_dir_splittingcompact+0x1d0>
                return err;
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	e01c      	b.n	80045ce <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <lfs_dir_splittingcompact+0x1e6>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 800459a:	4b11      	ldr	r3, [pc, #68]	@ (80045e0 <lfs_dir_splittingcompact+0x21c>)
 800459c:	f640 02ac 	movw	r2, #2220	@ 0x8ac
 80045a0:	4910      	ldr	r1, [pc, #64]	@ (80045e4 <lfs_dir_splittingcompact+0x220>)
 80045a2:	4813      	ldr	r0, [pc, #76]	@ (80045f0 <lfs_dir_splittingcompact+0x22c>)
 80045a4:	f008 fcca 	bl	800cf3c <iprintf>
 80045a8:	e002      	b.n	80045b0 <lfs_dir_splittingcompact+0x1ec>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 80045b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80045b4:	9302      	str	r3, [sp, #8]
 80045b6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80045ba:	9301      	str	r3, [sp, #4]
 80045bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f7ff fd04 	bl	8003fd4 <lfs_dir_compact>
 80045cc:	4603      	mov	r3, r0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	373c      	adds	r7, #60	@ 0x3c
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd90      	pop	{r4, r7, pc}
 80045d6:	bf00      	nop
 80045d8:	08003f33 	.word	0x08003f33
 80045dc:	400ffc00 	.word	0x400ffc00
 80045e0:	0800dda8 	.word	0x0800dda8
 80045e4:	0800dc74 	.word	0x0800dc74
 80045e8:	0800de80 	.word	0x0800de80
 80045ec:	0800deb0 	.word	0x0800deb0
 80045f0:	0800dee0 	.word	0x0800dee0

080045f4 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 80045f4:	b5b0      	push	{r4, r5, r7, lr}
 80045f6:	b0a6      	sub	sp, #152	@ 0x98
 80045f8:	af0a      	add	r7, sp, #40	@ 0x28
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
    int state = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8004606:	2300      	movs	r3, #0
 8004608:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 800460c:	2300      	movs	r3, #0
 800460e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004610:	e06d      	b.n	80046ee <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8004612:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	4413      	add	r3, r2
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7fd fa53 	bl	8001ac8 <lfs_tag_type3>
 8004622:	4603      	mov	r3, r0
 8004624:	461a      	mov	r2, r3
 8004626:	f240 4301 	movw	r3, #1025	@ 0x401
 800462a:	429a      	cmp	r2, r3
 800462c:	d106      	bne.n	800463c <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	8a9b      	ldrh	r3, [r3, #20]
 8004632:	3301      	adds	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	829a      	strh	r2, [r3, #20]
 800463a:	e055      	b.n	80046e8 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800463c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	4413      	add	r3, r2
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7fd fa3e 	bl	8001ac8 <lfs_tag_type3>
 800464c:	4603      	mov	r3, r0
 800464e:	461a      	mov	r2, r3
 8004650:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8004654:	429a      	cmp	r2, r3
 8004656:	d114      	bne.n	8004682 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	8a9b      	ldrh	r3, [r3, #20]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <lfs_dir_relocatingcommit+0x7a>
 8004660:	4ba4      	ldr	r3, [pc, #656]	@ (80048f4 <lfs_dir_relocatingcommit+0x300>)
 8004662:	4aa5      	ldr	r2, [pc, #660]	@ (80048f8 <lfs_dir_relocatingcommit+0x304>)
 8004664:	f640 01c5 	movw	r1, #2245	@ 0x8c5
 8004668:	48a4      	ldr	r0, [pc, #656]	@ (80048fc <lfs_dir_relocatingcommit+0x308>)
 800466a:	f008 fab7 	bl	800cbdc <__assert_func>
            dir->count -= 1;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	8a9b      	ldrh	r3, [r3, #20]
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800467a:	2301      	movs	r3, #1
 800467c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8004680:	e032      	b.n	80046e8 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8004682:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	4413      	add	r3, r2
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f7fd f9fb 	bl	8001a88 <lfs_tag_type1>
 8004692:	4603      	mov	r3, r0
 8004694:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004698:	d126      	bne.n	80046e8 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800469a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	4413      	add	r3, r2
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 80046aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	4413      	add	r3, r2
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 80046ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	4413      	add	r3, r2
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fd fa0f 	bl	8001ae8 <lfs_tag_chunk>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	3318      	adds	r3, #24
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fd f97b 	bl	80019de <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 80046e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046ea:	3301      	adds	r3, #1
 80046ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80046ee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80046f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046f4:	429a      	cmp	r2, r3
 80046f6:	db8c      	blt.n	8004612 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 80046f8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d02b      	beq.n	8004758 <lfs_dir_relocatingcommit+0x164>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	8a9b      	ldrh	r3, [r3, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d127      	bne.n	8004758 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8004708:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800470c:	2b00      	cmp	r3, #0
 800470e:	d106      	bne.n	800471e <lfs_dir_relocatingcommit+0x12a>
 8004710:	4b7b      	ldr	r3, [pc, #492]	@ (8004900 <lfs_dir_relocatingcommit+0x30c>)
 8004712:	4a79      	ldr	r2, [pc, #484]	@ (80048f8 <lfs_dir_relocatingcommit+0x304>)
 8004714:	f640 01d2 	movw	r1, #2258	@ 0x8d2
 8004718:	4878      	ldr	r0, [pc, #480]	@ (80048fc <lfs_dir_relocatingcommit+0x308>)
 800471a:	f008 fa5f 	bl	800cbdc <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004724:	4619      	mov	r1, r3
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f002 fdd6 	bl	80072d8 <lfs_fs_pred>
 800472c:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 800472e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <lfs_dir_relocatingcommit+0x14c>
 8004734:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004736:	f113 0f02 	cmn.w	r3, #2
 800473a:	d001      	beq.n	8004740 <lfs_dir_relocatingcommit+0x14c>
            return err;
 800473c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800473e:	e214      	b.n	8004b6a <lfs_dir_relocatingcommit+0x576>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8004740:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004742:	f113 0f02 	cmn.w	r3, #2
 8004746:	d007      	beq.n	8004758 <lfs_dir_relocatingcommit+0x164>
 8004748:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800474c:	7ddb      	ldrb	r3, [r3, #23]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8004752:	2302      	movs	r3, #2
 8004754:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 8004756:	e121      	b.n	800499c <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	7d9b      	ldrb	r3, [r3, #22]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80fb 	beq.w	8004958 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8004766:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800476c:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8004772:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004774:	f04f 33ff 	mov.w	r3, #4294967295
 8004778:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800477e:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8004786:	2b00      	cmp	r3, #0
 8004788:	d004      	beq.n	8004794 <lfs_dir_relocatingcommit+0x1a0>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800478e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004790:	3b08      	subs	r3, #8
 8004792:	e003      	b.n	800479c <lfs_dir_relocatingcommit+0x1a8>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 800479c:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	3318      	adds	r3, #24
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fd f935 	bl	8001a12 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80047b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 80047ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80047be:	9308      	str	r3, [sp, #32]
 80047c0:	4b50      	ldr	r3, [pc, #320]	@ (8004904 <lfs_dir_relocatingcommit+0x310>)
 80047c2:	9307      	str	r3, [sp, #28]
 80047c4:	2300      	movs	r3, #0
 80047c6:	9306      	str	r3, [sp, #24]
 80047c8:	2300      	movs	r3, #0
 80047ca:	9305      	str	r3, [sp, #20]
 80047cc:	2300      	movs	r3, #0
 80047ce:	9304      	str	r3, [sp, #16]
 80047d0:	2300      	movs	r3, #0
 80047d2:	9303      	str	r3, [sp, #12]
 80047d4:	2300      	movs	r3, #0
 80047d6:	9302      	str	r3, [sp, #8]
 80047d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	460b      	mov	r3, r1
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f7fd ff60 	bl	80026ac <lfs_dir_traverse>
 80047ec:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3318      	adds	r3, #24
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fd f8f3 	bl	80019de <lfs_pair_fromle32>
        if (err) {
 80047f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80047fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004800:	f113 0f1c 	cmn.w	r3, #28
 8004804:	f000 80aa 	beq.w	800495c <lfs_dir_relocatingcommit+0x368>
 8004808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800480a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800480e:	f000 80a5 	beq.w	800495c <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8004812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004814:	e1a9      	b.n	8004b6a <lfs_dir_relocatingcommit+0x576>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8004816:	f107 031c 	add.w	r3, r7, #28
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	605a      	str	r2, [r3, #4]
 8004820:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004828:	f107 031c 	add.w	r3, r7, #28
 800482c:	4611      	mov	r1, r2
 800482e:	4618      	mov	r0, r3
 8004830:	f7fd f9a5 	bl	8001b7e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800483a:	f107 031c 	add.w	r3, r7, #28
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f7fd f99c 	bl	8001b7e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800484c:	f107 031c 	add.w	r3, r7, #28
 8004850:	4611      	mov	r1, r2
 8004852:	4618      	mov	r0, r3
 8004854:	f7fd f993 	bl	8001b7e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800485e:	f023 0303 	bic.w	r3, r3, #3
 8004862:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8004864:	f107 031c 	add.w	r3, r7, #28
 8004868:	4618      	mov	r0, r3
 800486a:	f7fd f9a8 	bl	8001bbe <lfs_gstate_iszero>
 800486e:	4603      	mov	r3, r0
 8004870:	f083 0301 	eor.w	r3, r3, #1
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d027      	beq.n	80048ca <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800487a:	f107 031c 	add.w	r3, r7, #28
 800487e:	461a      	mov	r2, r3
 8004880:	68b9      	ldr	r1, [r7, #8]
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f7fe fee2 	bl	800364c <lfs_dir_getgstate>
 8004888:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 800488a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8004890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004892:	e16a      	b.n	8004b6a <lfs_dir_relocatingcommit+0x576>
            }

            lfs_gstate_tole32(&delta);
 8004894:	f107 031c 	add.w	r3, r7, #28
 8004898:	4618      	mov	r0, r3
 800489a:	f7fd fa35 	bl	8001d08 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800489e:	f107 031c 	add.w	r3, r7, #28
 80048a2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80048a6:	4a18      	ldr	r2, [pc, #96]	@ (8004908 <lfs_dir_relocatingcommit+0x314>)
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f7ff f885 	bl	80039b8 <lfs_dir_commitattr>
 80048ae:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 80048b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80048b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b8:	f113 0f1c 	cmn.w	r3, #28
 80048bc:	d050      	beq.n	8004960 <lfs_dir_relocatingcommit+0x36c>
 80048be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80048c4:	d04c      	beq.n	8004960 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 80048c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c8:	e14f      	b.n	8004b6a <lfs_dir_relocatingcommit+0x576>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 80048ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80048ce:	4619      	mov	r1, r3
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff f8f1 	bl	8003ab8 <lfs_dir_commitcrc>
 80048d6:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 80048d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d016      	beq.n	800490c <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80048de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e0:	f113 0f1c 	cmn.w	r3, #28
 80048e4:	d03e      	beq.n	8004964 <lfs_dir_relocatingcommit+0x370>
 80048e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80048ec:	d03a      	beq.n	8004964 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 80048ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f0:	e13b      	b.n	8004b6a <lfs_dir_relocatingcommit+0x576>
 80048f2:	bf00      	nop
 80048f4:	0800df0c 	.word	0x0800df0c
 80048f8:	0800eaa8 	.word	0x0800eaa8
 80048fc:	0800dc74 	.word	0x0800dc74
 8004900:	0800df1c 	.word	0x0800df1c
 8004904:	08003f5f 	.word	0x08003f5f
 8004908:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800490c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004912:	6992      	ldr	r2, [r2, #24]
 8004914:	fbb3 f1f2 	udiv	r1, r3, r2
 8004918:	fb01 f202 	mul.w	r2, r1, r2
 800491c:	1a9b      	subs	r3, r3, r2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d006      	beq.n	8004930 <lfs_dir_relocatingcommit+0x33c>
 8004922:	4b94      	ldr	r3, [pc, #592]	@ (8004b74 <lfs_dir_relocatingcommit+0x580>)
 8004924:	4a94      	ldr	r2, [pc, #592]	@ (8004b78 <lfs_dir_relocatingcommit+0x584>)
 8004926:	f640 111c 	movw	r1, #2332	@ 0x91c
 800492a:	4894      	ldr	r0, [pc, #592]	@ (8004b7c <lfs_dir_relocatingcommit+0x588>)
 800492c:	f008 f956 	bl	800cbdc <__assert_func>
        dir->off = commit.off;
 8004930:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8004936:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	333c      	adds	r3, #60	@ 0x3c
 8004942:	3230      	adds	r2, #48	@ 0x30
 8004944:	ca07      	ldmia	r2, {r0, r1, r2}
 8004946:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3348      	adds	r3, #72	@ 0x48
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	605a      	str	r2, [r3, #4]
 8004954:	609a      	str	r2, [r3, #8]
 8004956:	e021      	b.n	800499c <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8004958:	bf00      	nop
 800495a:	e004      	b.n	8004966 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800495c:	bf00      	nop
 800495e:	e002      	b.n	8004966 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8004960:	bf00      	nop
 8004962:	e000      	b.n	8004966 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004964:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3310      	adds	r3, #16
 800496a:	4619      	mov	r1, r3
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7fc fbd4 	bl	800111a <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	8a9b      	ldrh	r3, [r3, #20]
 8004976:	9302      	str	r3, [sp, #8]
 8004978:	2300      	movs	r3, #0
 800497a:	9301      	str	r3, [sp, #4]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f7ff fd1b 	bl	80043c4 <lfs_dir_splittingcompact>
 800498e:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8004990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004992:	2b00      	cmp	r3, #0
 8004994:	da01      	bge.n	800499a <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8004996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004998:	e0e7      	b.n	8004b6a <lfs_dir_relocatingcommit+0x576>
    }

    goto fixmlist;
 800499a:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3304      	adds	r3, #4
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80049b0:	e0d6      	b.n	8004b60 <lfs_dir_relocatingcommit+0x56c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 80049b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049b4:	3308      	adds	r3, #8
 80049b6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fc ffb7 	bl	8001930 <lfs_pair_cmp>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f040 80c8 	bne.w	8004b5a <lfs_dir_relocatingcommit+0x566>
            d->m = *dir;
 80049ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	f103 0408 	add.w	r4, r3, #8
 80049d2:	4615      	mov	r5, r2
 80049d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80049dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80049e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049e2:	3308      	adds	r3, #8
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	f000 80ad 	beq.w	8004b46 <lfs_dir_relocatingcommit+0x552>
                for (int i = 0; i < attrcount; i++) {
 80049ec:	2300      	movs	r3, #0
 80049ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049f0:	e07f      	b.n	8004af2 <lfs_dir_relocatingcommit+0x4fe>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80049f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	4413      	add	r3, r2
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fd f863 	bl	8001ac8 <lfs_tag_type3>
 8004a02:	4603      	mov	r3, r0
 8004a04:	461a      	mov	r2, r3
 8004a06:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d119      	bne.n	8004a42 <lfs_dir_relocatingcommit+0x44e>
                            d->id == lfs_tag_id(attrs[i].tag) &&
 8004a0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a10:	889c      	ldrh	r4, [r3, #4]
 8004a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	4413      	add	r3, r2
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fd f87d 	bl	8001b1c <lfs_tag_id>
 8004a22:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004a24:	429c      	cmp	r4, r3
 8004a26:	d10c      	bne.n	8004a42 <lfs_dir_relocatingcommit+0x44e>
                            d->type != LFS_TYPE_DIR) {
 8004a28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a2a:	799b      	ldrb	r3, [r3, #6]
                            d->id == lfs_tag_id(attrs[i].tag) &&
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d008      	beq.n	8004a42 <lfs_dir_relocatingcommit+0x44e>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8004a30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a32:	f04f 32ff 	mov.w	r2, #4294967295
 8004a36:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8004a38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3e:	60da      	str	r2, [r3, #12]
 8004a40:	e054      	b.n	8004aec <lfs_dir_relocatingcommit+0x4f8>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	4413      	add	r3, r2
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fd f83b 	bl	8001ac8 <lfs_tag_type3>
 8004a52:	4603      	mov	r3, r0
 8004a54:	461a      	mov	r2, r3
 8004a56:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d11c      	bne.n	8004a98 <lfs_dir_relocatingcommit+0x4a4>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8004a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a60:	889c      	ldrh	r4, [r3, #4]
 8004a62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	4413      	add	r3, r2
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fd f855 	bl	8001b1c <lfs_tag_id>
 8004a72:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004a74:	429c      	cmp	r4, r3
 8004a76:	d90f      	bls.n	8004a98 <lfs_dir_relocatingcommit+0x4a4>
                        d->id -= 1;
 8004a78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a7a:	889b      	ldrh	r3, [r3, #4]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a82:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004a84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a86:	799b      	ldrb	r3, [r3, #6]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d12f      	bne.n	8004aec <lfs_dir_relocatingcommit+0x4f8>
                            ((lfs_dir_t*)d)->pos -= 1;
 8004a8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	1e5a      	subs	r2, r3, #1
 8004a92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a94:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8004a96:	e029      	b.n	8004aec <lfs_dir_relocatingcommit+0x4f8>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004a98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fd f810 	bl	8001ac8 <lfs_tag_type3>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f240 4301 	movw	r3, #1025	@ 0x401
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d11b      	bne.n	8004aec <lfs_dir_relocatingcommit+0x4f8>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8004ab4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ab6:	889c      	ldrh	r4, [r3, #4]
 8004ab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	4413      	add	r3, r2
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fd f82a 	bl	8001b1c <lfs_tag_id>
 8004ac8:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004aca:	429c      	cmp	r4, r3
 8004acc:	d30e      	bcc.n	8004aec <lfs_dir_relocatingcommit+0x4f8>
                        d->id += 1;
 8004ace:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ad0:	889b      	ldrh	r3, [r3, #4]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ad8:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004ada:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004adc:	799b      	ldrb	r3, [r3, #6]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d104      	bne.n	8004aec <lfs_dir_relocatingcommit+0x4f8>
                            ((lfs_dir_t*)d)->pos += 1;
 8004ae2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004aea:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 8004aec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aee:	3301      	adds	r3, #1
 8004af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004af2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004af4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004af8:	429a      	cmp	r2, r3
 8004afa:	f6ff af7a 	blt.w	80049f2 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8004afe:	e022      	b.n	8004b46 <lfs_dir_relocatingcommit+0x552>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 8004b00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b02:	f103 0220 	add.w	r2, r3, #32
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3320      	adds	r3, #32
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f7fc ff0f 	bl	8001930 <lfs_pair_cmp>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d007      	beq.n	8004b28 <lfs_dir_relocatingcommit+0x534>
                    d->id -= d->m.count;
 8004b18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b1a:	889a      	ldrh	r2, [r3, #4]
 8004b1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b1e:	8b9b      	ldrh	r3, [r3, #28]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b26:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8004b28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b2a:	f103 0108 	add.w	r1, r3, #8
 8004b2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b30:	3320      	adds	r3, #32
 8004b32:	461a      	mov	r2, r3
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7fe fd6d 	bl	8003614 <lfs_dir_fetch>
 8004b3a:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 8004b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <lfs_dir_relocatingcommit+0x552>
                    return err;
 8004b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b44:	e011      	b.n	8004b6a <lfs_dir_relocatingcommit+0x576>
            while (d->id >= d->m.count && d->m.split) {
 8004b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b48:	889a      	ldrh	r2, [r3, #4]
 8004b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b4c:	8b9b      	ldrh	r3, [r3, #28]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d303      	bcc.n	8004b5a <lfs_dir_relocatingcommit+0x566>
 8004b52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b54:	7fdb      	ldrb	r3, [r3, #31]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1d2      	bne.n	8004b00 <lfs_dir_relocatingcommit+0x50c>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004b5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f47f af25 	bne.w	80049b2 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8004b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3770      	adds	r7, #112	@ 0x70
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bdb0      	pop	{r4, r5, r7, pc}
 8004b72:	bf00      	nop
 8004b74:	0800ddfc 	.word	0x0800ddfc
 8004b78:	0800eaa8 	.word	0x0800eaa8
 8004b7c:	0800dc74 	.word	0x0800dc74

08004b80 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004b80:	b5b0      	push	{r4, r5, r7, lr}
 8004b82:	b0bc      	sub	sp, #240	@ 0xf0
 8004b84:	af04      	add	r7, sp, #16
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004b96:	e045      	b.n	8004c24 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d03a      	beq.n	8004c1a <lfs_dir_orphaningcommit+0x9a>
 8004ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ba8:	3308      	adds	r3, #8
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	4611      	mov	r1, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fc febe 	bl	8001930 <lfs_pair_cmp>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d12f      	bne.n	8004c1a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bbe:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d12a      	bne.n	8004c1a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d023      	beq.n	8004c1a <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8004bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d91b      	bls.n	8004c1a <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8004be2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f001 f802 	bl	8005bf0 <lfs_file_outline>
 8004bec:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8004bf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <lfs_dir_orphaningcommit+0x7e>
                return err;
 8004bf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004bfc:	e2ad      	b.n	800515a <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8004bfe:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f001 f816 	bl	8005c34 <lfs_file_flush>
 8004c08:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8004c0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <lfs_dir_orphaningcommit+0x9a>
                return err;
 8004c14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c18:	e29f      	b.n	800515a <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1b5      	bne.n	8004b98 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8004c42:	461d      	mov	r5, r3
 8004c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8004c56:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7ff fcc6 	bl	80045f4 <lfs_dir_relocatingcommit>
 8004c68:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8004c6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	da02      	bge.n	8004c7a <lfs_dir_orphaningcommit+0xfa>
        return state;
 8004c74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c78:	e26f      	b.n	800515a <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8004c80:	4611      	mov	r1, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fc fe54 	bl	8001930 <lfs_pair_cmp>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	461d      	mov	r5, r3
 8004c92:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8004c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c9e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8004ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d14a      	bne.n	8004d40 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3348      	adds	r3, #72	@ 0x48
 8004cae:	461a      	mov	r2, r3
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f7fe fcca 	bl	800364c <lfs_dir_getgstate>
 8004cb8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 8004cbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <lfs_dir_orphaningcommit+0x14a>
            return err;
 8004cc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cc8:	e247      	b.n	800515a <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8004cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 8004cd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	3318      	adds	r3, #24
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fc fe99 	bl	8001a12 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	7ddb      	ldrb	r3, [r3, #23]
 8004ce4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8004ce8:	051a      	lsls	r2, r3, #20
 8004cea:	4bc2      	ldr	r3, [pc, #776]	@ (8004ff4 <lfs_dir_orphaningcommit+0x474>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	3318      	adds	r3, #24
 8004cf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cf6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004cfa:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8004cfe:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8004d02:	2000      	movs	r0, #0
 8004d04:	9001      	str	r0, [sp, #4]
 8004d06:	2001      	movs	r0, #1
 8004d08:	9000      	str	r0, [sp, #0]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff fc72 	bl	80045f4 <lfs_dir_relocatingcommit>
 8004d10:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	3318      	adds	r3, #24
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fc fe60 	bl	80019de <lfs_pair_fromle32>
        if (state < 0) {
 8004d1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	da02      	bge.n	8004d2c <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8004d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d2a:	e216      	b.n	800515a <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8004d2c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8004d30:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8004d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004d3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8004d40:	2300      	movs	r3, #0
 8004d42:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 8004d46:	e1fc      	b.n	8005142 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8004d48:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8004d4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004d50:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004d54:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d58:	4ca7      	ldr	r4, [pc, #668]	@ (8004ff8 <lfs_dir_orphaningcommit+0x478>)
 8004d5a:	9403      	str	r4, [sp, #12]
 8004d5c:	9102      	str	r1, [sp, #8]
 8004d5e:	9201      	str	r2, [sp, #4]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	4603      	mov	r3, r0
 8004d64:	f640 12a9 	movw	r2, #2473	@ 0x9a9
 8004d68:	49a4      	ldr	r1, [pc, #656]	@ (8004ffc <lfs_dir_orphaningcommit+0x47c>)
 8004d6a:	48a5      	ldr	r0, [pc, #660]	@ (8005000 <lfs_dir_orphaningcommit+0x480>)
 8004d6c:	f008 f8e6 	bl	800cf3c <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f103 0220 	add.w	r2, r3, #32
 8004d7c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fc fdd4 	bl	8001930 <lfs_pair_cmp>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d107      	bne.n	8004d9e <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8004d8e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8004d96:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004da6:	e037      	b.n	8004e18 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8004da8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004dac:	f103 0208 	add.w	r2, r3, #8
 8004db0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004db4:	4611      	mov	r1, r2
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fc fdba 	bl	8001930 <lfs_pair_cmp>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8004dc2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004dc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004dca:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8004dcc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004dd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004dd4:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8004dd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004dda:	799b      	ldrb	r3, [r3, #6]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d116      	bne.n	8004e0e <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8004de0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004de4:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8004de8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004dec:	4611      	mov	r1, r2
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fc fd9e 	bl	8001930 <lfs_pair_cmp>
 8004df4:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8004dfa:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004dfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004e02:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8004e04:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004e08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004e0c:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004e0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1c3      	bne.n	8004da8 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8004e20:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8004e24:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004e28:	4619      	mov	r1, r3
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f002 fae4 	bl	80073f8 <lfs_fs_parent>
 8004e30:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8004e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	da07      	bge.n	8004e4c <lfs_dir_orphaningcommit+0x2cc>
 8004e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e40:	f113 0f02 	cmn.w	r3, #2
 8004e44:	d002      	beq.n	8004e4c <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8004e46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e4a:	e186      	b.n	800515a <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8004e4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e50:	f113 0f02 	cmn.w	r3, #2
 8004e54:	bf14      	ite	ne
 8004e56:	2301      	movne	r3, #1
 8004e58:	2300      	moveq	r3, #0
 8004e5a:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 8004e5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e62:	f113 0f02 	cmn.w	r3, #2
 8004e66:	f000 809e 	beq.w	8004fa6 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f002 fb37 	bl	80074e0 <lfs_fs_preporphans>
 8004e72:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 8004e76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <lfs_dir_orphaningcommit+0x304>
                return err;
 8004e7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004e82:	e16a      	b.n	800515a <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004e84:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8004e88:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3330      	adds	r3, #48	@ 0x30
 8004e90:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8004e94:	4611      	mov	r1, r2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fc fef6 	bl	8001c88 <lfs_gstate_hasmovehere>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d02d      	beq.n	8004efe <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fc fe38 	bl	8001b1c <lfs_tag_id>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 8004eb2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004eb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004eb6:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 8004eba:	484f      	ldr	r0, [pc, #316]	@ (8004ff8 <lfs_dir_orphaningcommit+0x478>)
 8004ebc:	9002      	str	r0, [sp, #8]
 8004ebe:	9201      	str	r2, [sp, #4]
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	f640 12d6 	movw	r2, #2518	@ 0x9d6
 8004ec8:	494c      	ldr	r1, [pc, #304]	@ (8004ffc <lfs_dir_orphaningcommit+0x47c>)
 8004eca:	484e      	ldr	r0, [pc, #312]	@ (8005004 <lfs_dir_orphaningcommit+0x484>)
 8004ecc:	f008 f836 	bl	800cf3c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f002 fb52 	bl	8007580 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8004edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fc fe1b 	bl	8001b1c <lfs_tag_id>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d205      	bcs.n	8004efe <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8004ef2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ef6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004efa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8004efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f00:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f04:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 8004f06:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fc fd81 	bl	8001a12 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8004f10:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8004f14:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d007      	beq.n	8004f2c <lfs_dir_orphaningcommit+0x3ac>
 8004f1c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8004f20:	029b      	lsls	r3, r3, #10
 8004f22:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8004f26:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8004f2a:	e000      	b.n	8004f2e <lfs_dir_orphaningcommit+0x3ae>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f30:	2300      	movs	r3, #0
 8004f32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f3a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004f3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f40:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004f44:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8004f48:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	9001      	str	r0, [sp, #4]
 8004f50:	2002      	movs	r0, #2
 8004f52:	9000      	str	r0, [sp, #0]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff fb4d 	bl	80045f4 <lfs_dir_relocatingcommit>
 8004f5a:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004f5e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fc fd3b 	bl	80019de <lfs_pair_fromle32>
            if (state < 0) {
 8004f68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	da02      	bge.n	8004f76 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8004f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f74:	e0f1      	b.n	800515a <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8004f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d113      	bne.n	8004fa6 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8004f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8004f84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 8004f8a:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8004f8e:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8004f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004f9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004fa4:	e0cd      	b.n	8005142 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004fa6:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8004faa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004fae:	4619      	mov	r1, r3
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f002 f991 	bl	80072d8 <lfs_fs_pred>
 8004fb6:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8004fba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d007      	beq.n	8004fd2 <lfs_dir_orphaningcommit+0x452>
 8004fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004fc6:	f113 0f02 	cmn.w	r3, #2
 8004fca:	d002      	beq.n	8004fd2 <lfs_dir_orphaningcommit+0x452>
            return err;
 8004fcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004fd0:	e0c3      	b.n	800515a <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8004fd2:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d01a      	beq.n	8005010 <lfs_dir_orphaningcommit+0x490>
 8004fda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004fde:	f113 0f02 	cmn.w	r3, #2
 8004fe2:	d115      	bne.n	8005010 <lfs_dir_orphaningcommit+0x490>
 8004fe4:	4b08      	ldr	r3, [pc, #32]	@ (8005008 <lfs_dir_orphaningcommit+0x488>)
 8004fe6:	4a09      	ldr	r2, [pc, #36]	@ (800500c <lfs_dir_orphaningcommit+0x48c>)
 8004fe8:	f640 11f9 	movw	r1, #2553	@ 0x9f9
 8004fec:	4803      	ldr	r0, [pc, #12]	@ (8004ffc <lfs_dir_orphaningcommit+0x47c>)
 8004fee:	f007 fdf5 	bl	800cbdc <__assert_func>
 8004ff2:	bf00      	nop
 8004ff4:	000ffc08 	.word	0x000ffc08
 8004ff8:	0800dda8 	.word	0x0800dda8
 8004ffc:	0800dc74 	.word	0x0800dc74
 8005000:	0800df24 	.word	0x0800df24
 8005004:	0800df60 	.word	0x0800df60
 8005008:	0800dfa4 	.word	0x0800dfa4
 800500c:	0800eac4 	.word	0x0800eac4

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8005010:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005014:	f113 0f02 	cmn.w	r3, #2
 8005018:	f000 8093 	beq.w	8005142 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	3330      	adds	r3, #48	@ 0x30
 8005020:	4618      	mov	r0, r3
 8005022:	f7fc fde8 	bl	8001bf6 <lfs_gstate_hasorphans>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d011      	beq.n	8005050 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -(int8_t)hasparent);
 800502c:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8005030:	425b      	negs	r3, r3
 8005032:	b2db      	uxtb	r3, r3
 8005034:	b25b      	sxtb	r3, r3
 8005036:	4619      	mov	r1, r3
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f002 fa51 	bl	80074e0 <lfs_fs_preporphans>
 800503e:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 8005042:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 800504a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800504e:	e084      	b.n	800515a <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8005050:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8005054:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3330      	adds	r3, #48	@ 0x30
 800505c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8005060:	4611      	mov	r1, r2
 8005062:	4618      	mov	r0, r3
 8005064:	f7fc fe10 	bl	8001c88 <lfs_gstate_hasmovehere>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d01c      	beq.n	80050a8 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005072:	4618      	mov	r0, r3
 8005074:	f7fc fd52 	bl	8001b1c <lfs_tag_id>
 8005078:	4603      	mov	r3, r0
 800507a:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 800507e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005080:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005082:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8005086:	4837      	ldr	r0, [pc, #220]	@ (8005164 <lfs_dir_orphaningcommit+0x5e4>)
 8005088:	9002      	str	r0, [sp, #8]
 800508a:	9201      	str	r2, [sp, #4]
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	460b      	mov	r3, r1
 8005090:	f640 220a 	movw	r2, #2570	@ 0xa0a
 8005094:	4934      	ldr	r1, [pc, #208]	@ (8005168 <lfs_dir_orphaningcommit+0x5e8>)
 8005096:	4835      	ldr	r0, [pc, #212]	@ (800516c <lfs_dir_orphaningcommit+0x5ec>)
 8005098:	f007 ff50 	bl	800cf3c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800509c:	2200      	movs	r2, #0
 800509e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f002 fa6c 	bl	8007580 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 80050a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 80050ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 80050b4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fc fcaa 	bl	8001a12 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80050be:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80050c2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d007      	beq.n	80050da <lfs_dir_orphaningcommit+0x55a>
 80050ca:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80050ce:	029b      	lsls	r3, r3, #10
 80050d0:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80050d4:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80050d8:	e000      	b.n	80050dc <lfs_dir_orphaningcommit+0x55c>
 80050da:	2300      	movs	r3, #0
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050de:	2300      	movs	r3, #0
 80050e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050e2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80050e6:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80050ea:	051a      	lsls	r2, r3, #20
 80050ec:	4b20      	ldr	r3, [pc, #128]	@ (8005170 <lfs_dir_orphaningcommit+0x5f0>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050f2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80050f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80050f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050fc:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8005100:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8005104:	2000      	movs	r0, #0
 8005106:	9001      	str	r0, [sp, #4]
 8005108:	2002      	movs	r0, #2
 800510a:	9000      	str	r0, [sp, #0]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff fa71 	bl	80045f4 <lfs_dir_relocatingcommit>
 8005112:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8005116:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800511a:	4618      	mov	r0, r3
 800511c:	f7fc fc5f 	bl	80019de <lfs_pair_fromle32>
            if (state < 0) {
 8005120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005124:	2b00      	cmp	r3, #0
 8005126:	da02      	bge.n	800512e <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8005128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800512c:	e015      	b.n	800515a <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 800512e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8005132:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8005136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800513a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800513e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8005142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005146:	2b01      	cmp	r3, #1
 8005148:	f43f adfe 	beq.w	8004d48 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 800514c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <lfs_dir_orphaningcommit+0x5d8>
 8005154:	2303      	movs	r3, #3
 8005156:	e000      	b.n	800515a <lfs_dir_orphaningcommit+0x5da>
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	37e0      	adds	r7, #224	@ 0xe0
 800515e:	46bd      	mov	sp, r7
 8005160:	bdb0      	pop	{r4, r5, r7, pc}
 8005162:	bf00      	nop
 8005164:	0800dda8 	.word	0x0800dda8
 8005168:	0800dc74 	.word	0x0800dc74
 800516c:	0800df60 	.word	0x0800df60
 8005170:	000ffc08 	.word	0x000ffc08

08005174 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f7ff fcf9 	bl	8004b80 <lfs_dir_orphaningcommit>
 800518e:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b00      	cmp	r3, #0
 8005194:	da01      	bge.n	800519a <lfs_dir_commit+0x26>
        return orphans;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	e00d      	b.n	80051b6 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d009      	beq.n	80051b4 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 80051a0:	2100      	movs	r1, #0
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f002 fb0e 	bl	80077c4 <lfs_fs_deorphan>
 80051a8:	6138      	str	r0, [r7, #16]
        if (err) {
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <lfs_dir_commit+0x40>
            return err;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	e000      	b.n	80051b6 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80051be:	b590      	push	{r4, r7, lr}
 80051c0:	b087      	sub	sp, #28
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	3b08      	subs	r3, #8
 80051d6:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e0:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <lfs_ctz_index+0x2e>
        return 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e01c      	b.n	8005226 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fb ff32 	bl	800105a <lfs_popc>
 80051f6:	4603      	mov	r3, r0
 80051f8:	3302      	adds	r3, #2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	1ad2      	subs	r2, r2, r3
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	fbb2 f3f3 	udiv	r3, r2, r3
 8005206:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	fb02 f303 	mul.w	r3, r2, r3
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	1ad4      	subs	r4, r2, r3
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7fb ff20 	bl	800105a <lfs_popc>
 800521a:	4603      	mov	r3, r0
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	1ae2      	subs	r2, r4, r3
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	601a      	str	r2, [r3, #0]
    return i;
 8005224:	68fb      	ldr	r3, [r7, #12]
}
 8005226:	4618      	mov	r0, r3
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	bd90      	pop	{r4, r7, pc}

0800522e <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800522e:	b590      	push	{r4, r7, lr}
 8005230:	b08f      	sub	sp, #60	@ 0x3c
 8005232:	af04      	add	r7, sp, #16
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800523c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523e:	2b00      	cmp	r3, #0
 8005240:	d108      	bne.n	8005254 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8005242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005244:	f04f 32ff 	mov.w	r2, #4294967295
 8005248:	601a      	str	r2, [r3, #0]
        *off = 0;
 800524a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
        return 0;
 8005250:	2300      	movs	r3, #0
 8005252:	e053      	b.n	80052fc <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8005254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005256:	3b01      	subs	r3, #1
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	f107 0314 	add.w	r3, r7, #20
 800525e:	4619      	mov	r1, r3
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f7ff ffac 	bl	80051be <lfs_ctz_index>
 8005266:	4603      	mov	r3, r0
 8005268:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800526a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800526e:	4619      	mov	r1, r3
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff ffa4 	bl	80051be <lfs_ctz_index>
 8005276:	4603      	mov	r3, r0
 8005278:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800527a:	e034      	b.n	80052e6 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800527c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	3301      	adds	r3, #1
 8005284:	4618      	mov	r0, r3
 8005286:	f7fb fec9 	bl	800101c <lfs_npw2>
 800528a:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800528c:	1e5c      	subs	r4, r3, #1
 800528e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005290:	f7fb fed4 	bl	800103c <lfs_ctz>
 8005294:	4603      	mov	r3, r0
 8005296:	4619      	mov	r1, r3
 8005298:	4620      	mov	r0, r4
 800529a:	f7fb fe88 	bl	8000fae <lfs_min>
 800529e:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	0092      	lsls	r2, r2, #2
 80052a6:	2104      	movs	r1, #4
 80052a8:	9103      	str	r1, [sp, #12]
 80052aa:	4639      	mov	r1, r7
 80052ac:	9102      	str	r1, [sp, #8]
 80052ae:	9201      	str	r2, [sp, #4]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	2304      	movs	r3, #4
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7fb ff53 	bl	8001164 <lfs_bd_read>
 80052be:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fb fee3 	bl	800108e <lfs_fromle32>
 80052c8:	4603      	mov	r3, r0
 80052ca:	603b      	str	r3, [r7, #0]
        if (err) {
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <lfs_ctz_find+0xa8>
            return err;
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	e012      	b.n	80052fc <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 80052d6:	2201      	movs	r2, #1
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	461a      	mov	r2, r3
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 80052e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d8c6      	bhi.n	800527c <lfs_ctz_find+0x4e>
    }

    *block = head;
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f2:	601a      	str	r2, [r3, #0]
    *off = pos;
 80052f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80052f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052f8:	601a      	str	r2, [r3, #0]
    return 0;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	372c      	adds	r7, #44	@ 0x2c
 8005300:	46bd      	mov	sp, r7
 8005302:	bd90      	pop	{r4, r7, pc}

08005304 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b092      	sub	sp, #72	@ 0x48
 8005308:	af04      	add	r7, sp, #16
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8005312:	f107 0320 	add.w	r3, r7, #32
 8005316:	4619      	mov	r1, r3
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7fc fef7 	bl	800210c <lfs_alloc>
 800531e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 8005320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <lfs_ctz_extend+0x26>
            return err;
 8005326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005328:	e0eb      	b.n	8005502 <lfs_ctz_extend+0x1fe>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	4619      	mov	r1, r3
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7fc fa58 	bl	80017e4 <lfs_bd_erase>
 8005334:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8005336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d006      	beq.n	800534a <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005342:	f000 80cd 	beq.w	80054e0 <lfs_ctz_extend+0x1dc>
                    goto relocate;
                }
                return err;
 8005346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005348:	e0db      	b.n	8005502 <lfs_ctz_extend+0x1fe>
            }

            if (size == 0) {
 800534a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	d107      	bne.n	8005360 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005354:	601a      	str	r2, [r3, #0]
                *off = 0;
 8005356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]
                return 0;
 800535c:	2300      	movs	r3, #0
 800535e:	e0d0      	b.n	8005502 <lfs_ctz_extend+0x1fe>
            }

            lfs_size_t noff = size - 1;
 8005360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005362:	3b01      	subs	r3, #1
 8005364:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8005366:	f107 031c 	add.w	r3, r7, #28
 800536a:	4619      	mov	r1, r3
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff ff26 	bl	80051be <lfs_ctz_index>
 8005372:	4603      	mov	r3, r0
 8005374:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	3301      	adds	r3, #1
 800537a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005380:	69da      	ldr	r2, [r3, #28]
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	429a      	cmp	r2, r3
 8005386:	d046      	beq.n	8005416 <lfs_ctz_extend+0x112>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005388:	2300      	movs	r3, #0
 800538a:	637b      	str	r3, [r7, #52]	@ 0x34
 800538c:	e037      	b.n	80053fe <lfs_ctz_extend+0xfa>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005392:	1ad2      	subs	r2, r2, r3
 8005394:	2301      	movs	r3, #1
 8005396:	9303      	str	r3, [sp, #12]
 8005398:	f107 0317 	add.w	r3, r7, #23
 800539c:	9302      	str	r3, [sp, #8]
 800539e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a0:	9301      	str	r3, [sp, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	4613      	mov	r3, r2
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	2100      	movs	r1, #0
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f7fb fed9 	bl	8001164 <lfs_bd_read>
 80053b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 80053b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <lfs_ctz_extend+0xba>
                        return err;
 80053ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053bc:	e01e      	b.n	80053fc <lfs_ctz_extend+0xf8>
                    }

                    err = lfs_bd_prog(lfs,
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2201      	movs	r2, #1
 80053c2:	9203      	str	r2, [sp, #12]
 80053c4:	f107 0217 	add.w	r2, r7, #23
 80053c8:	9202      	str	r2, [sp, #8]
 80053ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053cc:	9201      	str	r2, [sp, #4]
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	2301      	movs	r3, #1
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f7fc f956 	bl	8001688 <lfs_bd_prog>
 80053dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 80053de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 80053e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80053ea:	d101      	bne.n	80053f0 <lfs_ctz_extend+0xec>
                            goto relocate;
 80053ec:	bf00      	nop
                    goto relocate;
 80053ee:	e07a      	b.n	80054e6 <lfs_ctz_extend+0x1e2>
                        }
                        return err;
 80053f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f2:	e003      	b.n	80053fc <lfs_ctz_extend+0xf8>
                for (lfs_off_t i = 0; i < noff; i++) {
 80053f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f6:	3301      	adds	r3, #1
 80053f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053fa:	e000      	b.n	80053fe <lfs_ctz_extend+0xfa>
                return err;
 80053fc:	e081      	b.n	8005502 <lfs_ctz_extend+0x1fe>
                for (lfs_off_t i = 0; i < noff; i++) {
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005402:	429a      	cmp	r2, r3
 8005404:	d3c3      	bcc.n	800538e <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8005406:	6a3a      	ldr	r2, [r7, #32]
 8005408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800540a:	601a      	str	r2, [r3, #0]
                *off = noff;
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005410:	601a      	str	r2, [r3, #0]
                return 0;
 8005412:	2300      	movs	r3, #0
 8005414:	e075      	b.n	8005502 <lfs_ctz_extend+0x1fe>
            }

            // append block
            index += 1;
 8005416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005418:	3301      	adds	r3, #1
 800541a:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 800541c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800541e:	f7fb fe0d 	bl	800103c <lfs_ctz>
 8005422:	4603      	mov	r3, r0
 8005424:	3301      	adds	r3, #1
 8005426:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800542c:	2300      	movs	r3, #0
 800542e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005430:	e049      	b.n	80054c6 <lfs_ctz_extend+0x1c2>
                nhead = lfs_tole32(nhead);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	4618      	mov	r0, r3
 8005436:	f7fb fe35 	bl	80010a4 <lfs_tole32>
 800543a:	4603      	mov	r3, r0
 800543c:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005442:	0092      	lsls	r2, r2, #2
 8005444:	2104      	movs	r1, #4
 8005446:	9103      	str	r1, [sp, #12]
 8005448:	f107 0118 	add.w	r1, r7, #24
 800544c:	9102      	str	r1, [sp, #8]
 800544e:	9201      	str	r2, [sp, #4]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	2301      	movs	r3, #1
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f7fc f915 	bl	8001688 <lfs_bd_prog>
 800545e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	4618      	mov	r0, r3
 8005464:	f7fb fe13 	bl	800108e <lfs_fromle32>
 8005468:	4603      	mov	r3, r0
 800546a:	61bb      	str	r3, [r7, #24]
                if (err) {
 800546c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <lfs_ctz_extend+0x17a>
                    if (err == LFS_ERR_CORRUPT) {
 8005472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005474:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005478:	d034      	beq.n	80054e4 <lfs_ctz_extend+0x1e0>
                        goto relocate;
                    }
                    return err;
 800547a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547c:	e041      	b.n	8005502 <lfs_ctz_extend+0x1fe>
                }

                if (i != skips-1) {
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	3b01      	subs	r3, #1
 8005482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005484:	429a      	cmp	r2, r3
 8005486:	d01b      	beq.n	80054c0 <lfs_ctz_extend+0x1bc>
                    err = lfs_bd_read(lfs,
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800548c:	0092      	lsls	r2, r2, #2
 800548e:	2104      	movs	r1, #4
 8005490:	9103      	str	r1, [sp, #12]
 8005492:	f107 0118 	add.w	r1, r7, #24
 8005496:	9102      	str	r1, [sp, #8]
 8005498:	9201      	str	r2, [sp, #4]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	2304      	movs	r3, #4
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	2100      	movs	r1, #0
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7fb fe5e 	bl	8001164 <lfs_bd_read>
 80054a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fb fdee 	bl	800108e <lfs_fromle32>
 80054b2:	4603      	mov	r3, r0
 80054b4:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80054b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <lfs_ctz_extend+0x1bc>
                        return err;
 80054bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054be:	e020      	b.n	8005502 <lfs_ctz_extend+0x1fe>
            for (lfs_off_t i = 0; i < skips; i++) {
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	3301      	adds	r3, #1
 80054c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d3b1      	bcc.n	8005432 <lfs_ctz_extend+0x12e>
                    }
                }
            }

            *block = nblock;
 80054ce:	6a3a      	ldr	r2, [r7, #32]
 80054d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054d2:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	009a      	lsls	r2, r3, #2
 80054d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054da:	601a      	str	r2, [r3, #0]
            return 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	e010      	b.n	8005502 <lfs_ctz_extend+0x1fe>
                    goto relocate;
 80054e0:	bf00      	nop
 80054e2:	e000      	b.n	80054e6 <lfs_ctz_extend+0x1e2>
                        goto relocate;
 80054e4:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	4a08      	ldr	r2, [pc, #32]	@ (800550c <lfs_ctz_extend+0x208>)
 80054ea:	9200      	str	r2, [sp, #0]
 80054ec:	f640 32c3 	movw	r2, #3011	@ 0xbc3
 80054f0:	4907      	ldr	r1, [pc, #28]	@ (8005510 <lfs_ctz_extend+0x20c>)
 80054f2:	4808      	ldr	r0, [pc, #32]	@ (8005514 <lfs_ctz_extend+0x210>)
 80054f4:	f007 fd22 	bl	800cf3c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f7fb fe0d 	bl	800111a <lfs_cache_drop>
    while (true) {
 8005500:	e707      	b.n	8005312 <lfs_ctz_extend+0xe>
    }
}
 8005502:	4618      	mov	r0, r3
 8005504:	3738      	adds	r7, #56	@ 0x38
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	0800dda8 	.word	0x0800dda8
 8005510:	0800dc74 	.word	0x0800dc74
 8005514:	0800de24 	.word	0x0800de24

08005518 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8005518:	b580      	push	{r7, lr}
 800551a:	b090      	sub	sp, #64	@ 0x40
 800551c:	af04      	add	r7, sp, #16
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8005526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <lfs_ctz_traverse+0x18>
        return 0;
 800552c:	2300      	movs	r3, #0
 800552e:	e06b      	b.n	8005608 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8005530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005532:	3b01      	subs	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	f107 031c 	add.w	r3, r7, #28
 800553a:	4619      	mov	r1, r3
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f7ff fe3e 	bl	80051be <lfs_ctz_index>
 8005542:	4603      	mov	r3, r0
 8005544:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 8005546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800554c:	4798      	blx	r3
 800554e:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <lfs_ctz_traverse+0x42>
            return err;
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	e056      	b.n	8005608 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 800555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <lfs_ctz_traverse+0x4c>
            return 0;
 8005560:	2300      	movs	r3, #0
 8005562:	e051      	b.n	8005608 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8005564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	f1c3 0302 	rsb	r3, r3, #2
 800556e:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8005570:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8005572:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8005574:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8005576:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8005578:	9303      	str	r3, [sp, #12]
 800557a:	f107 0314 	add.w	r3, r7, #20
 800557e:	9302      	str	r3, [sp, #8]
 8005580:	2300      	movs	r3, #0
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f7fb fde8 	bl	8001164 <lfs_bd_read>
 8005594:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4618      	mov	r0, r3
 800559a:	f7fb fd78 	bl	800108e <lfs_fromle32>
 800559e:	4603      	mov	r3, r0
 80055a0:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fb fd72 	bl	800108e <lfs_fromle32>
 80055aa:	4603      	mov	r3, r0
 80055ac:	61bb      	str	r3, [r7, #24]
        if (err) {
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <lfs_ctz_traverse+0xa0>
            return err;
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	e027      	b.n	8005608 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 80055b8:	2300      	movs	r3, #0
 80055ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055bc:	e012      	b.n	80055e4 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 80055be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	3330      	adds	r3, #48	@ 0x30
 80055c4:	443b      	add	r3, r7
 80055c6:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80055ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055cc:	4611      	mov	r1, r2
 80055ce:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80055d0:	4798      	blx	r3
 80055d2:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <lfs_ctz_traverse+0xc6>
                return err;
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	e014      	b.n	8005608 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 80055de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e0:	3301      	adds	r3, #1
 80055e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055ea:	429a      	cmp	r2, r3
 80055ec:	dbe7      	blt.n	80055be <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	3330      	adds	r3, #48	@ 0x30
 80055f6:	443b      	add	r3, r7
 80055f8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80055fc:	603b      	str	r3, [r7, #0]
        index -= count;
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 8005606:	e79e      	b.n	8005546 <lfs_ctz_traverse+0x2e>
    }
}
 8005608:	4618      	mov	r0, r3
 800560a:	3730      	adds	r7, #48	@ 0x30
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8005610:	b5b0      	push	{r4, r5, r7, lr}
 8005612:	b09a      	sub	sp, #104	@ 0x68
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f002 fa7b 	bl	8007b24 <lfs_fs_forceconsistency>
 800562e:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8005630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <lfs_file_opencfg_+0x2a>
            return err;
 8005636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005638:	e1bf      	b.n	80059ba <lfs_file_opencfg_+0x3aa>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800563e:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2200      	movs	r2, #0
 800564a:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2200      	movs	r2, #0
 8005650:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2200      	movs	r2, #0
 8005656:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f103 0108 	add.w	r1, r3, #8
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	3304      	adds	r3, #4
 8005662:	1d3a      	adds	r2, r7, #4
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f7fe f86d 	bl	8003744 <lfs_dir_find>
 800566a:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && lfs_path_islast(path))) {
 800566c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800566e:	2b00      	cmp	r3, #0
 8005670:	da10      	bge.n	8005694 <lfs_file_opencfg_+0x84>
 8005672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005674:	f113 0f02 	cmn.w	r3, #2
 8005678:	d109      	bne.n	800568e <lfs_file_opencfg_+0x7e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4618      	mov	r0, r3
 800567e:	f7fc f8f3 	bl	8001868 <lfs_path_islast>
 8005682:	4603      	mov	r3, r0
 8005684:	f083 0301 	eor.w	r3, r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <lfs_file_opencfg_+0x84>
        err = tag;
 800568e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005690:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8005692:	e187      	b.n	80059a4 <lfs_file_opencfg_+0x394>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2201      	movs	r2, #1
 8005698:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800569a:	68b9      	ldr	r1, [r7, #8]
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7fc fc62 	bl	8001f66 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 80056a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056a4:	f113 0f02 	cmn.w	r3, #2
 80056a8:	d159      	bne.n	800575e <lfs_file_opencfg_+0x14e>
        if (!(flags & LFS_O_CREAT)) {
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d103      	bne.n	80056bc <lfs_file_opencfg_+0xac>
            err = LFS_ERR_NOENT;
 80056b4:	f06f 0301 	mvn.w	r3, #1
 80056b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80056ba:	e173      	b.n	80059a4 <lfs_file_opencfg_+0x394>
        }

        // don't allow trailing slashes
        if (lfs_path_isdir(path)) {
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fc f8f2 	bl	80018a8 <lfs_path_isdir>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <lfs_file_opencfg_+0xc2>
            err = LFS_ERR_NOTDIR;
 80056ca:	f06f 0313 	mvn.w	r3, #19
 80056ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80056d0:	e168      	b.n	80059a4 <lfs_file_opencfg_+0x394>
        }

        // check that name fits
        lfs_size_t nlen = lfs_path_namelen(path);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fc f8b7 	bl	8001848 <lfs_path_namelen>
 80056da:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d903      	bls.n	80056ee <lfs_file_opencfg_+0xde>
            err = LFS_ERR_NAMETOOLONG;
 80056e6:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80056ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80056ec:	e15a      	b.n	80059a4 <lfs_file_opencfg_+0x394>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f103 0108 	add.w	r1, r3, #8
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	889b      	ldrh	r3, [r3, #4]
 80056f8:	029b      	lsls	r3, r3, #10
 80056fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005704:	2300      	movs	r3, #0
 8005706:	633b      	str	r3, [r7, #48]	@ 0x30
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	889b      	ldrh	r3, [r3, #4]
 800570c:	029a      	lsls	r2, r3, #10
 800570e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005710:	4313      	orrs	r3, r2
 8005712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005716:	637b      	str	r3, [r7, #52]	@ 0x34
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	889b      	ldrh	r3, [r3, #4]
 8005720:	029b      	lsls	r3, r3, #10
 8005722:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800572a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800572c:	2300      	movs	r3, #0
 800572e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005730:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005734:	2303      	movs	r3, #3
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f7ff fd1c 	bl	8005174 <lfs_dir_commit>
 800573c:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 800573e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005740:	f113 0f1c 	cmn.w	r3, #28
 8005744:	d001      	beq.n	800574a <lfs_file_opencfg_+0x13a>
 8005746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005748:	e001      	b.n	800574e <lfs_file_opencfg_+0x13e>
 800574a:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 800574e:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 8005750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005752:	2b00      	cmp	r3, #0
 8005754:	f040 8125 	bne.w	80059a2 <lfs_file_opencfg_+0x392>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8005758:	4b9a      	ldr	r3, [pc, #616]	@ (80059c4 <lfs_file_opencfg_+0x3b4>)
 800575a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800575c:	e044      	b.n	80057e8 <lfs_file_opencfg_+0x1d8>
    } else if (flags & LFS_O_EXCL) {
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <lfs_file_opencfg_+0x160>
        err = LFS_ERR_EXIST;
 8005768:	f06f 0310 	mvn.w	r3, #16
 800576c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 800576e:	e119      	b.n	80059a4 <lfs_file_opencfg_+0x394>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8005770:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005772:	4618      	mov	r0, r3
 8005774:	f7fc f9a8 	bl	8001ac8 <lfs_tag_type3>
 8005778:	4603      	mov	r3, r0
 800577a:	2b01      	cmp	r3, #1
 800577c:	d003      	beq.n	8005786 <lfs_file_opencfg_+0x176>
        err = LFS_ERR_ISDIR;
 800577e:	f06f 0314 	mvn.w	r3, #20
 8005782:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8005784:	e10e      	b.n	80059a4 <lfs_file_opencfg_+0x394>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00e      	beq.n	80057ae <lfs_file_opencfg_+0x19e>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	889b      	ldrh	r3, [r3, #4]
 8005794:	029b      	lsls	r3, r3, #10
 8005796:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800579a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800579e:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80057ac:	e01c      	b.n	80057e8 <lfs_file_opencfg_+0x1d8>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	889b      	ldrh	r3, [r3, #4]
 80057b8:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80057ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057be:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80057c6:	9200      	str	r2, [sp, #0]
 80057c8:	4a7f      	ldr	r2, [pc, #508]	@ (80059c8 <lfs_file_opencfg_+0x3b8>)
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7fc fe1c 	bl	8002408 <lfs_dir_get>
 80057d0:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 80057d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	da02      	bge.n	80057de <lfs_file_opencfg_+0x1ce>
            err = tag;
 80057d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057da:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80057dc:	e0e2      	b.n	80059a4 <lfs_file_opencfg_+0x394>
        }
        lfs_ctz_fromle32(&file->ctz);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	3328      	adds	r3, #40	@ 0x28
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fc fae0 	bl	8001da8 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80057e8:	2300      	movs	r3, #0
 80057ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80057ec:	e063      	b.n	80058b6 <lfs_file_opencfg_+0x2a6>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d03c      	beq.n	8005874 <lfs_file_opencfg_+0x264>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005804:	6859      	ldr	r1, [r3, #4]
 8005806:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005808:	4613      	mov	r3, r2
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005818:	051a      	lsls	r2, r3, #20
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	889b      	ldrh	r3, [r3, #4]
 800581e:	029b      	lsls	r3, r3, #10
 8005820:	ea42 0103 	orr.w	r1, r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005828:	6858      	ldr	r0, [r3, #4]
 800582a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800582c:	4613      	mov	r3, r2
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4403      	add	r3, r0
 8005836:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005838:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005840:	6859      	ldr	r1, [r3, #4]
 8005842:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005844:	4613      	mov	r3, r2
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	4603      	mov	r3, r0
 8005854:	4a5d      	ldr	r2, [pc, #372]	@ (80059cc <lfs_file_opencfg_+0x3bc>)
 8005856:	4621      	mov	r1, r4
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7fc fdd5 	bl	8002408 <lfs_dir_get>
 800585e:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8005860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005862:	2b00      	cmp	r3, #0
 8005864:	da06      	bge.n	8005874 <lfs_file_opencfg_+0x264>
 8005866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005868:	f113 0f02 	cmn.w	r3, #2
 800586c:	d002      	beq.n	8005874 <lfs_file_opencfg_+0x264>
                err = res;
 800586e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005870:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8005872:	e097      	b.n	80059a4 <lfs_file_opencfg_+0x394>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d017      	beq.n	80058b0 <lfs_file_opencfg_+0x2a0>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005884:	6859      	ldr	r1, [r3, #4]
 8005886:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005888:	4613      	mov	r3, r2
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005898:	429a      	cmp	r2, r3
 800589a:	d903      	bls.n	80058a4 <lfs_file_opencfg_+0x294>
                err = LFS_ERR_NOSPC;
 800589c:	f06f 031b 	mvn.w	r3, #27
 80058a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80058a2:	e07f      	b.n	80059a4 <lfs_file_opencfg_+0x394>
            }

            file->flags |= LFS_F_DIRTY;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80058b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058b2:	3301      	adds	r3, #1
 80058b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80058be:	429a      	cmp	r2, r3
 80058c0:	d395      	bcc.n	80057ee <lfs_file_opencfg_+0x1de>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <lfs_file_opencfg_+0x2c8>
        file->cache.buffer = file->cfg->buffer;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80058d6:	e010      	b.n	80058fa <lfs_file_opencfg_+0x2ea>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fb fc04 	bl	80010ec <lfs_malloc>
 80058e4:	4602      	mov	r2, r0
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d103      	bne.n	80058fa <lfs_file_opencfg_+0x2ea>
            err = LFS_ERR_NOMEM;
 80058f2:	f06f 030b 	mvn.w	r3, #11
 80058f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80058f8:	e054      	b.n	80059a4 <lfs_file_opencfg_+0x394>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	3340      	adds	r3, #64	@ 0x40
 80058fe:	4619      	mov	r1, r3
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f7fb fc19 	bl	8001138 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8005906:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005908:	4618      	mov	r0, r3
 800590a:	f7fc f8dd 	bl	8001ac8 <lfs_tag_type3>
 800590e:	4603      	mov	r3, r0
 8005910:	461a      	mov	r2, r3
 8005912:	f240 2301 	movw	r3, #513	@ 0x201
 8005916:	429a      	cmp	r2, r3
 8005918:	d141      	bne.n	800599e <lfs_file_opencfg_+0x38e>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f06f 0201 	mvn.w	r2, #1
 8005920:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 8005922:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005924:	4618      	mov	r0, r3
 8005926:	f7fc f909 	bl	8001b3c <lfs_tag_size>
 800592a:	4602      	mov	r2, r0
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005934:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2200      	movs	r2, #0
 8005948:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800594e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d020      	beq.n	800599e <lfs_file_opencfg_+0x38e>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	889b      	ldrh	r3, [r3, #4]
 8005966:	029c      	lsls	r4, r3, #10
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800596c:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8005970:	4618      	mov	r0, r3
 8005972:	f7fb fb1c 	bl	8000fae <lfs_min>
 8005976:	4603      	mov	r3, r0
 8005978:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800597a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	4613      	mov	r3, r2
 8005986:	4a10      	ldr	r2, [pc, #64]	@ (80059c8 <lfs_file_opencfg_+0x3b8>)
 8005988:	4629      	mov	r1, r5
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7fc fd3c 	bl	8002408 <lfs_dir_get>
 8005990:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 8005992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005994:	2b00      	cmp	r3, #0
 8005996:	da02      	bge.n	800599e <lfs_file_opencfg_+0x38e>
                err = res;
 8005998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800599a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800599c:	e002      	b.n	80059a4 <lfs_file_opencfg_+0x394>
            }
        }
    }

    return 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	e00b      	b.n	80059ba <lfs_file_opencfg_+0x3aa>
            goto cleanup;
 80059a2:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f824 	bl	8005a00 <lfs_file_close_>
    return err;
 80059b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3760      	adds	r7, #96	@ 0x60
 80059be:	46bd      	mov	sp, r7
 80059c0:	bdb0      	pop	{r4, r5, r7, pc}
 80059c2:	bf00      	nop
 80059c4:	20100000 	.word	0x20100000
 80059c8:	700ffc00 	.word	0x700ffc00
 80059cc:	7ffffc00 	.word	0x7ffffc00

080059d0 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 80059de:	4b07      	ldr	r3, [pc, #28]	@ (80059fc <lfs_file_open_+0x2c>)
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff fe11 	bl	8005610 <lfs_file_opencfg_>
 80059ee:	6178      	str	r0, [r7, #20]
    return err;
 80059f0:	697b      	ldr	r3, [r7, #20]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	0800eadc 	.word	0x0800eadc

08005a00 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f9e5 	bl	8005ddc <lfs_file_sync_>
 8005a12:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fc fa83 	bl	8001f22 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d104      	bne.n	8005a30 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fb fb6a 	bl	8001104 <lfs_free>
    }

    return err;
 8005a30:	68fb      	ldr	r3, [r7, #12]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8005a3c:	b590      	push	{r4, r7, lr}
 8005a3e:	b08d      	sub	sp, #52	@ 0x34
 8005a40:	af06      	add	r7, sp, #24
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8005a46:	f107 030c 	add.w	r3, r7, #12
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7fc fb5d 	bl	800210c <lfs_alloc>
 8005a52:	6138      	str	r0, [r7, #16]
        if (err) {
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <lfs_file_relocate+0x22>
            return err;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	e0bb      	b.n	8005bd6 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4619      	mov	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fb febe 	bl	80017e4 <lfs_bd_erase>
 8005a68:	6138      	str	r0, [r7, #16]
        if (err) {
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d006      	beq.n	8005a7e <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005a76:	f000 809b 	beq.w	8005bb0 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	e0ab      	b.n	8005bd6 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005a7e:	2300      	movs	r3, #0
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e069      	b.n	8005b58 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d027      	beq.n	8005ae0 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	f103 0008 	add.w	r0, r3, #8
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	889b      	ldrh	r3, [r3, #4]
 8005aa8:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8005aaa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	9105      	str	r1, [sp, #20]
 8005ab6:	f107 010b 	add.w	r1, r7, #11
 8005aba:	9104      	str	r1, [sp, #16]
 8005abc:	6979      	ldr	r1, [r7, #20]
 8005abe:	9103      	str	r1, [sp, #12]
 8005ac0:	9302      	str	r3, [sp, #8]
 8005ac2:	4b47      	ldr	r3, [pc, #284]	@ (8005be0 <lfs_file_relocate+0x1a4>)
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	9200      	str	r2, [sp, #0]
 8005ac8:	4623      	mov	r3, r4
 8005aca:	2200      	movs	r2, #0
 8005acc:	4601      	mov	r1, r0
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7fc fcb5 	bl	800243e <lfs_dir_getread>
 8005ad4:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01e      	beq.n	8005b1a <lfs_file_relocate+0xde>
                    return err;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	e07a      	b.n	8005bd6 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 8005ae6:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	1ad4      	subs	r4, r2, r3
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af4:	2201      	movs	r2, #1
 8005af6:	9203      	str	r2, [sp, #12]
 8005af8:	f107 020b 	add.w	r2, r7, #11
 8005afc:	9202      	str	r2, [sp, #8]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	9201      	str	r2, [sp, #4]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	4623      	mov	r3, r4
 8005b06:	4602      	mov	r2, r0
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7fb fb2b 	bl	8001164 <lfs_bd_read>
 8005b0e:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <lfs_file_relocate+0xde>
                    return err;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	e05d      	b.n	8005bd6 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f103 0110 	add.w	r1, r3, #16
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	9203      	str	r2, [sp, #12]
 8005b28:	f107 020b 	add.w	r2, r7, #11
 8005b2c:	9202      	str	r2, [sp, #8]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	9201      	str	r2, [sp, #4]
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	2301      	movs	r3, #1
 8005b36:	4602      	mov	r2, r0
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fb fda5 	bl	8001688 <lfs_bd_prog>
 8005b3e:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005b4c:	d032      	beq.n	8005bb4 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	e041      	b.n	8005bd6 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	3301      	adds	r3, #1
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d390      	bcc.n	8005a84 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69d9      	ldr	r1, [r3, #28]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b70:	461a      	mov	r2, r3
 8005b72:	f007 faf4 	bl	800d15e <memcpy>
        file->cache.block = lfs->pcache.block;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695a      	ldr	r2, [r3, #20]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3310      	adds	r3, #16
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7fb facf 	bl	8001138 <lfs_cache_zero>

        file->block = nblock;
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	e012      	b.n	8005bd6 <lfs_file_relocate+0x19a>
                goto relocate;
 8005bb0:	bf00      	nop
 8005bb2:	e000      	b.n	8005bb6 <lfs_file_relocate+0x17a>
                    goto relocate;
 8005bb4:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8005be4 <lfs_file_relocate+0x1a8>)
 8005bba:	9200      	str	r2, [sp, #0]
 8005bbc:	f640 42ff 	movw	r2, #3327	@ 0xcff
 8005bc0:	4909      	ldr	r1, [pc, #36]	@ (8005be8 <lfs_file_relocate+0x1ac>)
 8005bc2:	480a      	ldr	r0, [pc, #40]	@ (8005bec <lfs_file_relocate+0x1b0>)
 8005bc4:	f007 f9ba 	bl	800cf3c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3310      	adds	r3, #16
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fb faa3 	bl	800111a <lfs_cache_drop>
    while (true) {
 8005bd4:	e737      	b.n	8005a46 <lfs_file_relocate+0xa>
    }
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd90      	pop	{r4, r7, pc}
 8005bde:	bf00      	nop
 8005be0:	fff7fc00 	.word	0xfff7fc00
 8005be4:	0800dda8 	.word	0x0800dda8
 8005be8:	0800dc74 	.word	0x0800dc74
 8005bec:	0800de24 	.word	0x0800de24

08005bf0 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fc f9eb 	bl	8001fde <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff ff16 	bl	8005a3c <lfs_file_relocate>
 8005c10:	60f8      	str	r0, [r7, #12]
    if (err) {
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <lfs_file_outline+0x2c>
        return err;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	e006      	b.n	8005c2a <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c20:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b09f      	sub	sp, #124	@ 0x7c
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d011      	beq.n	8005c6e <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d105      	bne.n	8005c62 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	3340      	adds	r3, #64	@ 0x40
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fb fa5c 	bl	800111a <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c66:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 80a4 	beq.w	8005dc4 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c80:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d176      	bne.n	8005d7c <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8005c8e:	f107 030c 	add.w	r3, r7, #12
 8005c92:	2254      	movs	r2, #84	@ 0x54
 8005c94:	2100      	movs	r1, #0
 8005c96:	4618      	mov	r0, r3
 8005c98:	f007 f9b5 	bl	800d006 <memset>
                .ctz.head = file->ctz.head,
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 8005ca0:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 8005ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ca8:	2301      	movs	r3, #1
 8005caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 8005cb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8005cb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fb fa29 	bl	800111a <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8005cc8:	e02b      	b.n	8005d22 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8005cca:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8005cce:	f107 010c 	add.w	r1, r7, #12
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f921 	bl	8005f1c <lfs_file_flushedread>
 8005cda:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8005cdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	da01      	bge.n	8005ce6 <lfs_file_flush+0xb2>
                    return res;
 8005ce2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ce4:	e06f      	b.n	8005dc6 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8005ce6:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8005cea:	2301      	movs	r3, #1
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fa1c 	bl	800612c <lfs_file_flushedwrite>
 8005cf4:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8005cf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	da01      	bge.n	8005d00 <lfs_file_flush+0xcc>
                    return res;
 8005cfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cfe:	e062      	b.n	8005dc6 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d08:	d00b      	beq.n	8005d22 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8005d0a:	f107 030c 	add.w	r3, r7, #12
 8005d0e:	3340      	adds	r3, #64	@ 0x40
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fb fa01 	bl	800111a <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7fb f9fc 	bl	800111a <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d3cd      	bcc.n	8005cca <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	2301      	movs	r3, #1
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7fb fbf7 	bl	800152c <lfs_bd_flush>
 8005d3e:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8005d40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d026      	beq.n	8005d94 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8005d46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d48:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005d4c:	d001      	beq.n	8005d52 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8005d4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d50:	e039      	b.n	8005dc6 <lfs_file_flush+0x192>
                        goto relocate;
 8005d52:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d58:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd0 <lfs_file_flush+0x19c>)
 8005d5a:	9200      	str	r2, [sp, #0]
 8005d5c:	f640 524e 	movw	r2, #3406	@ 0xd4e
 8005d60:	491c      	ldr	r1, [pc, #112]	@ (8005dd4 <lfs_file_flush+0x1a0>)
 8005d62:	481d      	ldr	r0, [pc, #116]	@ (8005dd8 <lfs_file_flush+0x1a4>)
 8005d64:	f007 f8ea 	bl	800cf3c <iprintf>
                err = lfs_file_relocate(lfs, file);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff fe66 	bl	8005a3c <lfs_file_relocate>
 8005d70:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8005d72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0da      	beq.n	8005d2e <lfs_file_flush+0xfa>
                    return err;
 8005d78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d7a:	e024      	b.n	8005dc6 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d84:	4619      	mov	r1, r3
 8005d86:	4610      	mov	r0, r2
 8005d88:	f7fb f901 	bl	8000f8e <lfs_max>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d92:	e000      	b.n	8005d96 <lfs_file_flush+0x162>
                break;
 8005d94:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005daa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dc2:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3774      	adds	r7, #116	@ 0x74
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd90      	pop	{r4, r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	0800dda8 	.word	0x0800dda8
 8005dd4:	0800dc74 	.word	0x0800dc74
 8005dd8:	0800de24 	.word	0x0800de24

08005ddc <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b090      	sub	sp, #64	@ 0x40
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	e08e      	b.n	8005f14 <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff ff1b 	bl	8005c34 <lfs_file_flush>
 8005dfe:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 8005e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d007      	beq.n	8005e16 <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	e07e      	b.n	8005f14 <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d077      	beq.n	8005f12 <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fb fd67 	bl	80018fa <lfs_pair_isnull>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f083 0301 	eor.w	r3, r3, #1
 8005e32:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d06c      	beq.n	8005f12 <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10d      	bne.n	8005e60 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f103 0110 	add.w	r1, r3, #16
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fb fbe6 	bl	8001620 <lfs_bd_sync>
 8005e54:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 8005e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <lfs_file_sync_+0x84>
                return err;
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5e:	e059      	b.n	8005f14 <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d009      	beq.n	8005e80 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8005e6c:	f240 2301 	movw	r3, #513	@ 0x201
 8005e70:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e76:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e7e:	e014      	b.n	8005eaa <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8005e80:	f240 2302 	movw	r3, #514	@ 0x202
 8005e84:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005e8c:	3228      	adds	r2, #40	@ 0x28
 8005e8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e92:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8005e96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fb ff9c 	bl	8001dd8 <lfs_ctz_tole32>
            buffer = &ctz;
 8005ea0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 8005ea6:	2308      	movs	r3, #8
 8005ea8:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	f103 0108 	add.w	r1, r3, #8
 8005eb0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005eb2:	051a      	lsls	r2, r3, #20
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	889b      	ldrh	r3, [r3, #4]
 8005eb8:	029b      	lsls	r3, r3, #10
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	889b      	ldrh	r3, [r3, #4]
 8005eca:	029a      	lsls	r2, r3, #10
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 8005ed8:	623b      	str	r3, [r7, #32]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ee2:	f107 0218 	add.w	r2, r7, #24
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff f943 	bl	8005174 <lfs_dir_commit>
 8005eee:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d007      	beq.n	8005f06 <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	e006      	b.n	8005f14 <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3740      	adds	r7, #64	@ 0x40
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005f1c:	b5b0      	push	{r4, r5, r7, lr}
 8005f1e:	b090      	sub	sp, #64	@ 0x40
 8005f20:	af06      	add	r7, sp, #24
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d301      	bcc.n	8005f42 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e0b7      	b.n	80060b2 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6838      	ldr	r0, [r7, #0]
 8005f50:	f7fb f82d 	bl	8000fae <lfs_min>
 8005f54:	6038      	str	r0, [r7, #0]
    nsize = size;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8005f5a:	e0a5      	b.n	80060a8 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d006      	beq.n	8005f76 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f70:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d130      	bne.n	8005fd8 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d11c      	bne.n	8005fbc <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	3138      	adds	r1, #56	@ 0x38
 8005f98:	68b8      	ldr	r0, [r7, #8]
 8005f9a:	303c      	adds	r0, #60	@ 0x3c
 8005f9c:	9003      	str	r0, [sp, #12]
 8005f9e:	9102      	str	r1, [sp, #8]
 8005fa0:	9201      	str	r2, [sp, #4]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	4622      	mov	r2, r4
 8005fa8:	2100      	movs	r1, #0
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f7ff f93f 	bl	800522e <lfs_ctz_find>
 8005fb0:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d009      	beq.n	8005fcc <lfs_file_flushedread+0xb0>
                    return err;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	e07a      	b.n	80060b2 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f06f 0201 	mvn.w	r2, #1
 8005fc2:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fdc:	69da      	ldr	r2, [r3, #28]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6a38      	ldr	r0, [r7, #32]
 8005fe8:	f7fa ffe1 	bl	8000fae <lfs_min>
 8005fec:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d026      	beq.n	8006048 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f103 0408 	add.w	r4, r3, #8
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800600a:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	889b      	ldrh	r3, [r3, #4]
 8006010:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8006012:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 800601e:	69b8      	ldr	r0, [r7, #24]
 8006020:	9005      	str	r0, [sp, #20]
 8006022:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006024:	9004      	str	r0, [sp, #16]
 8006026:	9103      	str	r1, [sp, #12]
 8006028:	9302      	str	r3, [sp, #8]
 800602a:	4b24      	ldr	r3, [pc, #144]	@ (80060bc <lfs_file_flushedread+0x1a0>)
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	9200      	str	r2, [sp, #0]
 8006030:	462b      	mov	r3, r5
 8006032:	2200      	movs	r2, #0
 8006034:	4621      	mov	r1, r4
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7fc fa01 	bl	800243e <lfs_dir_getread>
 800603c:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01d      	beq.n	8006080 <lfs_file_flushedread+0x164>
                return err;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	e034      	b.n	80060b2 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006052:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800605c:	69b9      	ldr	r1, [r7, #24]
 800605e:	9103      	str	r1, [sp, #12]
 8006060:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006062:	9102      	str	r1, [sp, #8]
 8006064:	9201      	str	r2, [sp, #4]
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	4623      	mov	r3, r4
 800606a:	4602      	mov	r2, r0
 800606c:	2100      	movs	r1, #0
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f7fb f878 	bl	8001164 <lfs_bd_read>
 8006074:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <lfs_file_flushedread+0x164>
                return err;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	e018      	b.n	80060b2 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	441a      	add	r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	441a      	add	r2, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8006098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	4413      	add	r3, r2
 800609e:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 80060a0:	6a3a      	ldr	r2, [r7, #32]
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f47f af56 	bne.w	8005f5c <lfs_file_flushedread+0x40>
    }

    return size;
 80060b0:	683b      	ldr	r3, [r7, #0]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3728      	adds	r7, #40	@ 0x28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bdb0      	pop	{r4, r5, r7, pc}
 80060ba:	bf00      	nop
 80060bc:	fff7fc00 	.word	0xfff7fc00

080060c0 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <lfs_file_read_+0x28>
 80060da:	4b11      	ldr	r3, [pc, #68]	@ (8006120 <lfs_file_read_+0x60>)
 80060dc:	4a11      	ldr	r2, [pc, #68]	@ (8006124 <lfs_file_read_+0x64>)
 80060de:	f640 51e2 	movw	r1, #3554	@ 0xde2
 80060e2:	4811      	ldr	r0, [pc, #68]	@ (8006128 <lfs_file_read_+0x68>)
 80060e4:	f006 fd7a 	bl	800cbdc <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d009      	beq.n	8006108 <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff fd9c 	bl	8005c34 <lfs_file_flush>
 80060fc:	6178      	str	r0, [r7, #20]
        if (err) {
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <lfs_file_read_+0x48>
            return err;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	e006      	b.n	8006116 <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7ff ff04 	bl	8005f1c <lfs_file_flushedread>
 8006114:	4603      	mov	r3, r0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	0800dfcc 	.word	0x0800dfcc
 8006124:	0800eae8 	.word	0x0800eae8
 8006128:	0800dc74 	.word	0x0800dc74

0800612c <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800612c:	b5b0      	push	{r4, r5, r7, lr}
 800612e:	b090      	sub	sp, #64	@ 0x40
 8006130:	af04      	add	r7, sp, #16
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 80f4 	beq.w	8006338 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006156:	441a      	add	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	4619      	mov	r1, r3
 800615e:	4610      	mov	r0, r2
 8006160:	f7fa ff15 	bl	8000f8e <lfs_max>
 8006164:	4602      	mov	r2, r0
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 800616a:	429a      	cmp	r2, r3
 800616c:	f240 80e4 	bls.w	8006338 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8006170:	68b9      	ldr	r1, [r7, #8]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7ff fd3c 	bl	8005bf0 <lfs_file_outline>
 8006178:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80db 	beq.w	8006338 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006186:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	e0d7      	b.n	8006342 <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d006      	beq.n	80061ac <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061a6:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d16d      	bne.n	8006288 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d159      	bne.n	800626c <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d12f      	bne.n	8006224 <lfs_file_flushedwrite+0xf8>
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d02b      	beq.n	8006224 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80061de:	3a01      	subs	r2, #1
 80061e0:	68b9      	ldr	r1, [r7, #8]
 80061e2:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80061e4:	2000      	movs	r0, #0
 80061e6:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80061e8:	f107 0010 	add.w	r0, r7, #16
 80061ec:	9003      	str	r0, [sp, #12]
 80061ee:	9102      	str	r1, [sp, #8]
 80061f0:	9201      	str	r2, [sp, #4]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	462b      	mov	r3, r5
 80061f6:	4622      	mov	r2, r4
 80061f8:	2100      	movs	r1, #0
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff f817 	bl	800522e <lfs_ctz_find>
 8006200:	6238      	str	r0, [r7, #32]
                    if (err) {
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d007      	beq.n	8006218 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	e094      	b.n	8006342 <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	3340      	adds	r3, #64	@ 0x40
 800621c:	4619      	mov	r1, r3
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f7fa ff8a 	bl	8001138 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f7fb feda 	bl	8001fde <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8006230:	68fc      	ldr	r4, [r7, #12]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	3238      	adds	r2, #56	@ 0x38
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	313c      	adds	r1, #60	@ 0x3c
 8006242:	9102      	str	r1, [sp, #8]
 8006244:	9201      	str	r2, [sp, #4]
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	462b      	mov	r3, r5
 800624a:	4622      	mov	r2, r4
 800624c:	4601      	mov	r1, r0
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f7ff f858 	bl	8005304 <lfs_ctz_extend>
 8006254:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00f      	beq.n	800627c <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006260:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	e06a      	b.n	8006342 <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f06f 0201 	mvn.w	r2, #1
 8006272:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006280:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800628c:	69da      	ldr	r2, [r3, #28]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	4619      	mov	r1, r3
 8006296:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006298:	f7fa fe89 	bl	8000fae <lfs_min>
 800629c:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80062a4:	68fc      	ldr	r4, [r7, #12]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062ae:	69b9      	ldr	r1, [r7, #24]
 80062b0:	9103      	str	r1, [sp, #12]
 80062b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062b4:	9102      	str	r1, [sp, #8]
 80062b6:	9201      	str	r2, [sp, #4]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	2301      	movs	r3, #1
 80062bc:	4622      	mov	r2, r4
 80062be:	4601      	mov	r1, r0
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7fb f9e1 	bl	8001688 <lfs_bd_prog>
 80062c6:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01c      	beq.n	8006308 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80062d4:	d007      	beq.n	80062e6 <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062da:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	e02d      	b.n	8006342 <lfs_file_flushedwrite+0x216>
                    goto relocate;
 80062e6:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f7ff fba6 	bl	8005a3c <lfs_file_relocate>
 80062f0:	6178      	str	r0, [r7, #20]
            if (err) {
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0d2      	beq.n	800629e <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062fc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	e01c      	b.n	8006342 <lfs_file_flushedwrite+0x216>
            break;
 8006308:	bf00      	nop
            }
        }

        file->pos += diff;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	441a      	add	r2, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	441a      	add	r2, r3
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8006322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	4413      	add	r3, r2
 8006328:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 800632a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7fb fe53 	bl	8001fde <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8006338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633a:	2b00      	cmp	r3, #0
 800633c:	f47f af29 	bne.w	8006192 <lfs_file_flushedwrite+0x66>
    }

    return size;
 8006340:	683b      	ldr	r3, [r7, #0]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3730      	adds	r7, #48	@ 0x30
 8006346:	46bd      	mov	sp, r7
 8006348:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800634c <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800634c:	b580      	push	{r7, lr}
 800634e:	b08a      	sub	sp, #40	@ 0x28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <lfs_file_write_+0x28>
 8006366:	4b38      	ldr	r3, [pc, #224]	@ (8006448 <lfs_file_write_+0xfc>)
 8006368:	4a38      	ldr	r2, [pc, #224]	@ (800644c <lfs_file_write_+0x100>)
 800636a:	f640 6149 	movw	r1, #3657	@ 0xe49
 800636e:	4838      	ldr	r0, [pc, #224]	@ (8006450 <lfs_file_write_+0x104>)
 8006370:	f006 fc34 	bl	800cbdc <__assert_func>

    if (file->flags & LFS_F_READING) {
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006378:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d009      	beq.n	8006394 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f7ff fc56 	bl	8005c34 <lfs_file_flush>
 8006388:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <lfs_file_write_+0x48>
            return err;
 8006390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006392:	e055      	b.n	8006440 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800639c:	2b00      	cmp	r3, #0
 800639e:	d009      	beq.n	80063b4 <lfs_file_write_+0x68>
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d203      	bcs.n	80063b4 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	441a      	add	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d902      	bls.n	80063ca <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 80063c4:	f06f 031a 	mvn.w	r3, #26
 80063c8:	e03a      	b.n	8006440 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d121      	bne.n	800641a <lfs_file_write_+0xce>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063de:	429a      	cmp	r2, r3
 80063e0:	d91b      	bls.n	800641a <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e6:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 80063f0:	e00e      	b.n	8006410 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 80063f2:	2300      	movs	r3, #0
 80063f4:	75fb      	strb	r3, [r7, #23]
 80063f6:	f107 0217 	add.w	r2, r7, #23
 80063fa:	2301      	movs	r3, #1
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f7ff fe94 	bl	800612c <lfs_file_flushedwrite>
 8006404:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	2b00      	cmp	r3, #0
 800640a:	da01      	bge.n	8006410 <lfs_file_write_+0xc4>
                return res;
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	e017      	b.n	8006440 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006414:	6a3a      	ldr	r2, [r7, #32]
 8006416:	429a      	cmp	r2, r3
 8006418:	d8eb      	bhi.n	80063f2 <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f7ff fe83 	bl	800612c <lfs_file_flushedwrite>
 8006426:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2b00      	cmp	r3, #0
 800642c:	da01      	bge.n	8006432 <lfs_file_write_+0xe6>
        return nsize;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	e006      	b.n	8006440 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006436:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 800643e:	69bb      	ldr	r3, [r7, #24]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3728      	adds	r7, #40	@ 0x28
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	0800dffc 	.word	0x0800dffc
 800644c:	0800eaf8 	.word	0x0800eaf8
 8006450:	0800dc74 	.word	0x0800dc74

08006454 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8006454:	b590      	push	{r4, r7, lr}
 8006456:	b08d      	sub	sp, #52	@ 0x34
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // note the most common reason for this failure is a before-c99 compiler,
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // check that the required io functions are provided
    LFS_ASSERT(lfs->cfg->read != NULL);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <lfs_init+0x34>
 800647a:	4b98      	ldr	r3, [pc, #608]	@ (80066dc <lfs_init+0x288>)
 800647c:	4a98      	ldr	r2, [pc, #608]	@ (80066e0 <lfs_init+0x28c>)
 800647e:	f241 0176 	movw	r1, #4214	@ 0x1076
 8006482:	4898      	ldr	r0, [pc, #608]	@ (80066e4 <lfs_init+0x290>)
 8006484:	f006 fbaa 	bl	800cbdc <__assert_func>
#ifndef LFS_READONLY
    LFS_ASSERT(lfs->cfg->prog != NULL);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <lfs_init+0x4c>
 8006492:	4b95      	ldr	r3, [pc, #596]	@ (80066e8 <lfs_init+0x294>)
 8006494:	4a92      	ldr	r2, [pc, #584]	@ (80066e0 <lfs_init+0x28c>)
 8006496:	f241 0178 	movw	r1, #4216	@ 0x1078
 800649a:	4892      	ldr	r0, [pc, #584]	@ (80066e4 <lfs_init+0x290>)
 800649c:	f006 fb9e 	bl	800cbdc <__assert_func>
    LFS_ASSERT(lfs->cfg->erase != NULL);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <lfs_init+0x64>
 80064aa:	4b90      	ldr	r3, [pc, #576]	@ (80066ec <lfs_init+0x298>)
 80064ac:	4a8c      	ldr	r2, [pc, #560]	@ (80066e0 <lfs_init+0x28c>)
 80064ae:	f241 0179 	movw	r1, #4217	@ 0x1079
 80064b2:	488c      	ldr	r0, [pc, #560]	@ (80066e4 <lfs_init+0x290>)
 80064b4:	f006 fb92 	bl	800cbdc <__assert_func>
    LFS_ASSERT(lfs->cfg->sync != NULL);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <lfs_init+0x7c>
 80064c2:	4b8b      	ldr	r3, [pc, #556]	@ (80066f0 <lfs_init+0x29c>)
 80064c4:	4a86      	ldr	r2, [pc, #536]	@ (80066e0 <lfs_init+0x28c>)
 80064c6:	f241 017a 	movw	r1, #4218	@ 0x107a
 80064ca:	4886      	ldr	r0, [pc, #536]	@ (80066e4 <lfs_init+0x290>)
 80064cc:	f006 fb86 	bl	800cbdc <__assert_func>
#endif

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <lfs_init+0x94>
 80064da:	4b86      	ldr	r3, [pc, #536]	@ (80066f4 <lfs_init+0x2a0>)
 80064dc:	4a80      	ldr	r2, [pc, #512]	@ (80066e0 <lfs_init+0x28c>)
 80064de:	f241 017f 	movw	r1, #4223	@ 0x107f
 80064e2:	4880      	ldr	r0, [pc, #512]	@ (80066e4 <lfs_init+0x290>)
 80064e4:	f006 fb7a 	bl	800cbdc <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <lfs_init+0xac>
 80064f2:	4b81      	ldr	r3, [pc, #516]	@ (80066f8 <lfs_init+0x2a4>)
 80064f4:	4a7a      	ldr	r2, [pc, #488]	@ (80066e0 <lfs_init+0x28c>)
 80064f6:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 80064fa:	487a      	ldr	r0, [pc, #488]	@ (80066e4 <lfs_init+0x290>)
 80064fc:	f006 fb6e 	bl	800cbdc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <lfs_init+0xc4>
 800650a:	4b7c      	ldr	r3, [pc, #496]	@ (80066fc <lfs_init+0x2a8>)
 800650c:	4a74      	ldr	r2, [pc, #464]	@ (80066e0 <lfs_init+0x28c>)
 800650e:	f241 0181 	movw	r1, #4225	@ 0x1081
 8006512:	4874      	ldr	r0, [pc, #464]	@ (80066e4 <lfs_init+0x290>)
 8006514:	f006 fb62 	bl	800cbdc <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800651c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006522:	6952      	ldr	r2, [r2, #20]
 8006524:	fbb3 f1f2 	udiv	r1, r3, r2
 8006528:	fb01 f202 	mul.w	r2, r1, r2
 800652c:	1a9b      	subs	r3, r3, r2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d006      	beq.n	8006540 <lfs_init+0xec>
 8006532:	4b73      	ldr	r3, [pc, #460]	@ (8006700 <lfs_init+0x2ac>)
 8006534:	4a6a      	ldr	r2, [pc, #424]	@ (80066e0 <lfs_init+0x28c>)
 8006536:	f241 0185 	movw	r1, #4229	@ 0x1085
 800653a:	486a      	ldr	r0, [pc, #424]	@ (80066e4 <lfs_init+0x290>)
 800653c:	f006 fb4e 	bl	800cbdc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800654a:	6992      	ldr	r2, [r2, #24]
 800654c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006550:	fb01 f202 	mul.w	r2, r1, r2
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d006      	beq.n	8006568 <lfs_init+0x114>
 800655a:	4b6a      	ldr	r3, [pc, #424]	@ (8006704 <lfs_init+0x2b0>)
 800655c:	4a60      	ldr	r2, [pc, #384]	@ (80066e0 <lfs_init+0x28c>)
 800655e:	f241 0186 	movw	r1, #4230	@ 0x1086
 8006562:	4860      	ldr	r0, [pc, #384]	@ (80066e4 <lfs_init+0x290>)
 8006564:	f006 fb3a 	bl	800cbdc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006572:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006574:	fbb3 f1f2 	udiv	r1, r3, r2
 8006578:	fb01 f202 	mul.w	r2, r1, r2
 800657c:	1a9b      	subs	r3, r3, r2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d006      	beq.n	8006590 <lfs_init+0x13c>
 8006582:	4b61      	ldr	r3, [pc, #388]	@ (8006708 <lfs_init+0x2b4>)
 8006584:	4a56      	ldr	r2, [pc, #344]	@ (80066e0 <lfs_init+0x28c>)
 8006586:	f241 0187 	movw	r1, #4231	@ 0x1087
 800658a:	4856      	ldr	r0, [pc, #344]	@ (80066e4 <lfs_init+0x290>)
 800658c:	f006 fb26 	bl	800cbdc <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	2b7f      	cmp	r3, #127	@ 0x7f
 8006598:	d806      	bhi.n	80065a8 <lfs_init+0x154>
 800659a:	4b5c      	ldr	r3, [pc, #368]	@ (800670c <lfs_init+0x2b8>)
 800659c:	4a50      	ldr	r2, [pc, #320]	@ (80066e0 <lfs_init+0x28c>)
 800659e:	f241 018a 	movw	r1, #4234	@ 0x108a
 80065a2:	4850      	ldr	r0, [pc, #320]	@ (80066e4 <lfs_init+0x290>)
 80065a4:	f006 fb1a 	bl	800cbdc <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	3b08      	subs	r3, #8
 80065b0:	f04f 32ff 	mov.w	r2, #4294967295
 80065b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fa fd2f 	bl	800101c <lfs_npw2>
 80065be:	4603      	mov	r3, r0
 80065c0:	009a      	lsls	r2, r3, #2
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d906      	bls.n	80065da <lfs_init+0x186>
 80065cc:	4b50      	ldr	r3, [pc, #320]	@ (8006710 <lfs_init+0x2bc>)
 80065ce:	4a44      	ldr	r2, [pc, #272]	@ (80066e0 <lfs_init+0x28c>)
 80065d0:	f241 018d 	movw	r1, #4237	@ 0x108d
 80065d4:	4843      	ldr	r0, [pc, #268]	@ (80066e4 <lfs_init+0x290>)
 80065d6:	f006 fb01 	bl	800cbdc <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d106      	bne.n	80065f2 <lfs_init+0x19e>
 80065e4:	4b4b      	ldr	r3, [pc, #300]	@ (8006714 <lfs_init+0x2c0>)
 80065e6:	4a3e      	ldr	r2, [pc, #248]	@ (80066e0 <lfs_init+0x28c>)
 80065e8:	f241 0196 	movw	r1, #4246	@ 0x1096
 80065ec:	483d      	ldr	r0, [pc, #244]	@ (80066e4 <lfs_init+0x290>)
 80065ee:	f006 faf5 	bl	800cbdc <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00f      	beq.n	800661c <lfs_init+0x1c8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	085b      	lsrs	r3, r3, #1
 800660a:	429a      	cmp	r2, r3
 800660c:	d206      	bcs.n	800661c <lfs_init+0x1c8>
 800660e:	4b42      	ldr	r3, [pc, #264]	@ (8006718 <lfs_init+0x2c4>)
 8006610:	4a33      	ldr	r2, [pc, #204]	@ (80066e0 <lfs_init+0x28c>)
 8006612:	f241 019c 	movw	r1, #4252	@ 0x109c
 8006616:	4833      	ldr	r0, [pc, #204]	@ (80066e4 <lfs_init+0x290>)
 8006618:	f006 fae0 	bl	800cbdc <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006626:	d00e      	beq.n	8006646 <lfs_init+0x1f2>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800662c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	429a      	cmp	r2, r3
 8006636:	d906      	bls.n	8006646 <lfs_init+0x1f2>
 8006638:	4b38      	ldr	r3, [pc, #224]	@ (800671c <lfs_init+0x2c8>)
 800663a:	4a29      	ldr	r2, [pc, #164]	@ (80066e0 <lfs_init+0x28c>)
 800663c:	f241 019e 	movw	r1, #4254	@ 0x109e
 8006640:	4828      	ldr	r0, [pc, #160]	@ (80066e4 <lfs_init+0x290>)
 8006642:	f006 facb 	bl	800cbdc <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // check that metadata_max is a multiple of read_size and prog_size,
    // and a factor of the block_size
    LFS_ASSERT(!lfs->cfg->metadata_max
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800664a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d013      	beq.n	8006678 <lfs_init+0x224>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800665a:	6952      	ldr	r2, [r2, #20]
 800665c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006660:	fb01 f202 	mul.w	r2, r1, r2
 8006664:	1a9b      	subs	r3, r3, r2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d006      	beq.n	8006678 <lfs_init+0x224>
 800666a:	4b2d      	ldr	r3, [pc, #180]	@ (8006720 <lfs_init+0x2cc>)
 800666c:	4a1c      	ldr	r2, [pc, #112]	@ (80066e0 <lfs_init+0x28c>)
 800666e:	f241 01a3 	movw	r1, #4259	@ 0x10a3
 8006672:	481c      	ldr	r0, [pc, #112]	@ (80066e4 <lfs_init+0x290>)
 8006674:	f006 fab2 	bl	800cbdc <__assert_func>
            || lfs->cfg->metadata_max % lfs->cfg->read_size == 0);
    LFS_ASSERT(!lfs->cfg->metadata_max
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800667c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d013      	beq.n	80066aa <lfs_init+0x256>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800668c:	6992      	ldr	r2, [r2, #24]
 800668e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006692:	fb01 f202 	mul.w	r2, r1, r2
 8006696:	1a9b      	subs	r3, r3, r2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d006      	beq.n	80066aa <lfs_init+0x256>
 800669c:	4b21      	ldr	r3, [pc, #132]	@ (8006724 <lfs_init+0x2d0>)
 800669e:	4a10      	ldr	r2, [pc, #64]	@ (80066e0 <lfs_init+0x28c>)
 80066a0:	f241 01a5 	movw	r1, #4261	@ 0x10a5
 80066a4:	480f      	ldr	r0, [pc, #60]	@ (80066e4 <lfs_init+0x290>)
 80066a6:	f006 fa99 	bl	800cbdc <__assert_func>
            || lfs->cfg->metadata_max % lfs->cfg->prog_size == 0);
    LFS_ASSERT(!lfs->cfg->metadata_max
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d03b      	beq.n	800672c <lfs_init+0x2d8>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80066be:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80066c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80066c4:	fb01 f202 	mul.w	r2, r1, r2
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d02e      	beq.n	800672c <lfs_init+0x2d8>
 80066ce:	4b16      	ldr	r3, [pc, #88]	@ (8006728 <lfs_init+0x2d4>)
 80066d0:	4a03      	ldr	r2, [pc, #12]	@ (80066e0 <lfs_init+0x28c>)
 80066d2:	f241 01a7 	movw	r1, #4263	@ 0x10a7
 80066d6:	4803      	ldr	r0, [pc, #12]	@ (80066e4 <lfs_init+0x290>)
 80066d8:	f006 fa80 	bl	800cbdc <__assert_func>
 80066dc:	0800e02c 	.word	0x0800e02c
 80066e0:	0800eb08 	.word	0x0800eb08
 80066e4:	0800dc74 	.word	0x0800dc74
 80066e8:	0800e04c 	.word	0x0800e04c
 80066ec:	0800e06c 	.word	0x0800e06c
 80066f0:	0800e08c 	.word	0x0800e08c
 80066f4:	0800e0ac 	.word	0x0800e0ac
 80066f8:	0800e0c8 	.word	0x0800e0c8
 80066fc:	0800e0e4 	.word	0x0800e0e4
 8006700:	0800e100 	.word	0x0800e100
 8006704:	0800e130 	.word	0x0800e130
 8006708:	0800e160 	.word	0x0800e160
 800670c:	0800e194 	.word	0x0800e194
 8006710:	0800e1b0 	.word	0x0800e1b0
 8006714:	0800e1fc 	.word	0x0800e1fc
 8006718:	0800e218 	.word	0x0800e218
 800671c:	0800e26c 	.word	0x0800e26c
 8006720:	0800e2cc 	.word	0x0800e2cc
 8006724:	0800e31c 	.word	0x0800e31c
 8006728:	0800e36c 	.word	0x0800e36c
            || lfs->cfg->block_size % lfs->cfg->metadata_max == 0);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006732:	2b00      	cmp	r3, #0
 8006734:	d005      	beq.n	8006742 <lfs_init+0x2ee>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800673a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	60da      	str	r2, [r3, #12]
 8006740:	e010      	b.n	8006764 <lfs_init+0x310>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006748:	4618      	mov	r0, r3
 800674a:	f7fa fccf 	bl	80010ec <lfs_malloc>
 800674e:	4602      	mov	r2, r0
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d103      	bne.n	8006764 <lfs_init+0x310>
            err = LFS_ERR_NOMEM;
 800675c:	f06f 030b 	mvn.w	r3, #11
 8006760:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8006762:	e145      	b.n	80069f0 <lfs_init+0x59c>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <lfs_init+0x326>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	61da      	str	r2, [r3, #28]
 8006778:	e010      	b.n	800679c <lfs_init+0x348>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800677e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006780:	4618      	mov	r0, r3
 8006782:	f7fa fcb3 	bl	80010ec <lfs_malloc>
 8006786:	4602      	mov	r2, r0
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d103      	bne.n	800679c <lfs_init+0x348>
            err = LFS_ERR_NOMEM;
 8006794:	f06f 030b 	mvn.w	r3, #11
 8006798:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 800679a:	e129      	b.n	80069f0 <lfs_init+0x59c>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7fa fcc9 	bl	8001138 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3310      	adds	r3, #16
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7fa fcc3 	bl	8001138 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d106      	bne.n	80067ca <lfs_init+0x376>
 80067bc:	4b90      	ldr	r3, [pc, #576]	@ (8006a00 <lfs_init+0x5ac>)
 80067be:	4a91      	ldr	r2, [pc, #580]	@ (8006a04 <lfs_init+0x5b0>)
 80067c0:	f241 01c6 	movw	r1, #4294	@ 0x10c6
 80067c4:	4890      	ldr	r0, [pc, #576]	@ (8006a08 <lfs_init+0x5b4>)
 80067c6:	f006 fa09 	bl	800cbdc <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d005      	beq.n	80067e0 <lfs_init+0x38c>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	665a      	str	r2, [r3, #100]	@ 0x64
 80067de:	e010      	b.n	8006802 <lfs_init+0x3ae>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fa fc80 	bl	80010ec <lfs_malloc>
 80067ec:	4602      	mov	r2, r0
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d103      	bne.n	8006802 <lfs_init+0x3ae>
            err = LFS_ERR_NOMEM;
 80067fa:	f06f 030b 	mvn.w	r3, #11
 80067fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8006800:	e0f6      	b.n	80069f0 <lfs_init+0x59c>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006808:	2bff      	cmp	r3, #255	@ 0xff
 800680a:	d906      	bls.n	800681a <lfs_init+0x3c6>
 800680c:	4b7f      	ldr	r3, [pc, #508]	@ (8006a0c <lfs_init+0x5b8>)
 800680e:	4a7d      	ldr	r2, [pc, #500]	@ (8006a04 <lfs_init+0x5b0>)
 8006810:	f241 01d2 	movw	r1, #4306	@ 0x10d2
 8006814:	487c      	ldr	r0, [pc, #496]	@ (8006a08 <lfs_init+0x5b4>)
 8006816:	f006 f9e1 	bl	800cbdc <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800681e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <lfs_init+0x3de>
        lfs->name_max = LFS_NAME_MAX;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	22ff      	movs	r2, #255	@ 0xff
 8006830:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006838:	2b00      	cmp	r3, #0
 800683a:	da06      	bge.n	800684a <lfs_init+0x3f6>
 800683c:	4b74      	ldr	r3, [pc, #464]	@ (8006a10 <lfs_init+0x5bc>)
 800683e:	4a71      	ldr	r2, [pc, #452]	@ (8006a04 <lfs_init+0x5b0>)
 8006840:	f241 01d8 	movw	r1, #4312	@ 0x10d8
 8006844:	4870      	ldr	r0, [pc, #448]	@ (8006a08 <lfs_init+0x5b4>)
 8006846:	f006 f9c9 	bl	800cbdc <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800684e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006858:	2b00      	cmp	r3, #0
 800685a:	d103      	bne.n	8006864 <lfs_init+0x410>
        lfs->file_max = LFS_FILE_MAX;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8006862:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800686a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800686e:	4293      	cmp	r3, r2
 8006870:	d906      	bls.n	8006880 <lfs_init+0x42c>
 8006872:	4b68      	ldr	r3, [pc, #416]	@ (8006a14 <lfs_init+0x5c0>)
 8006874:	4a63      	ldr	r2, [pc, #396]	@ (8006a04 <lfs_init+0x5b0>)
 8006876:	f241 01de 	movw	r1, #4318	@ 0x10de
 800687a:	4863      	ldr	r0, [pc, #396]	@ (8006a08 <lfs_init+0x5b4>)
 800687c:	f006 f9ae 	bl	800cbdc <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006884:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800688e:	2b00      	cmp	r3, #0
 8006890:	d103      	bne.n	800689a <lfs_init+0x446>
        lfs->attr_max = LFS_ATTR_MAX;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8006898:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800689e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d906      	bls.n	80068b8 <lfs_init+0x464>
 80068aa:	4b5b      	ldr	r3, [pc, #364]	@ (8006a18 <lfs_init+0x5c4>)
 80068ac:	4a55      	ldr	r2, [pc, #340]	@ (8006a04 <lfs_init+0x5b0>)
 80068ae:	f241 01e4 	movw	r1, #4324	@ 0x10e4
 80068b2:	4855      	ldr	r0, [pc, #340]	@ (8006a08 <lfs_init+0x5b4>)
 80068b4:	f006 f992 	bl	800cbdc <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	d00e      	beq.n	80068e2 <lfs_init+0x48e>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d906      	bls.n	80068e2 <lfs_init+0x48e>
 80068d4:	4b51      	ldr	r3, [pc, #324]	@ (8006a1c <lfs_init+0x5c8>)
 80068d6:	4a4b      	ldr	r2, [pc, #300]	@ (8006a04 <lfs_init+0x5b0>)
 80068d8:	f241 01e6 	movw	r1, #4326	@ 0x10e6
 80068dc:	484a      	ldr	r0, [pc, #296]	@ (8006a08 <lfs_init+0x5b4>)
 80068de:	f006 f97d 	bl	800cbdc <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ec:	d00d      	beq.n	800690a <lfs_init+0x4b6>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d906      	bls.n	800690a <lfs_init+0x4b6>
 80068fc:	4b48      	ldr	r3, [pc, #288]	@ (8006a20 <lfs_init+0x5cc>)
 80068fe:	4a41      	ldr	r2, [pc, #260]	@ (8006a04 <lfs_init+0x5b0>)
 8006900:	f241 01e8 	movw	r1, #4328	@ 0x10e8
 8006904:	4840      	ldr	r0, [pc, #256]	@ (8006a08 <lfs_init+0x5b4>)
 8006906:	f006 f969 	bl	800cbdc <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800690e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006914:	d019      	beq.n	800694a <lfs_init+0x4f6>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800691a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006922:	2b00      	cmp	r3, #0
 8006924:	d004      	beq.n	8006930 <lfs_init+0x4dc>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800692a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800692c:	08db      	lsrs	r3, r3, #3
 800692e:	e003      	b.n	8006938 <lfs_init+0x4e4>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	08db      	lsrs	r3, r3, #3
 8006938:	4293      	cmp	r3, r2
 800693a:	d206      	bcs.n	800694a <lfs_init+0x4f6>
 800693c:	4b39      	ldr	r3, [pc, #228]	@ (8006a24 <lfs_init+0x5d0>)
 800693e:	4a31      	ldr	r2, [pc, #196]	@ (8006a04 <lfs_init+0x5b0>)
 8006940:	f241 01ea 	movw	r1, #4330	@ 0x10ea
 8006944:	4830      	ldr	r0, [pc, #192]	@ (8006a08 <lfs_init+0x5b4>)
 8006946:	f006 f949 	bl	800cbdc <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800694e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d103      	bne.n	8006966 <lfs_init+0x512>
        lfs->inline_max = 0;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006964:	e022      	b.n	80069ac <lfs_init+0x558>
    } else if (lfs->inline_max == 0) {
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d11e      	bne.n	80069ac <lfs_init+0x558>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006972:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
        lfs->inline_max = lfs_min(
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800697c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 800697e:	2b00      	cmp	r3, #0
 8006980:	d004      	beq.n	800698c <lfs_init+0x538>
                        ? lfs->cfg->metadata_max
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 8006988:	08db      	lsrs	r3, r3, #3
 800698a:	e003      	b.n	8006994 <lfs_init+0x540>
                        : lfs->cfg->block_size)/8));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006990:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 8006992:	08db      	lsrs	r3, r3, #3
 8006994:	4619      	mov	r1, r3
 8006996:	4610      	mov	r0, r2
 8006998:	f7fa fb09 	bl	8000fae <lfs_min>
 800699c:	4603      	mov	r3, r0
 800699e:	4619      	mov	r1, r3
 80069a0:	4620      	mov	r0, r4
 80069a2:	f7fa fb04 	bl	8000fae <lfs_min>
 80069a6:	4602      	mov	r2, r0
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f04f 32ff 	mov.w	r2, #4294967295
 80069b2:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ba:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	333c      	adds	r3, #60	@ 0x3c
 80069cc:	2200      	movs	r2, #0
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	605a      	str	r2, [r3, #4]
 80069d2:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3330      	adds	r3, #48	@ 0x30
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	605a      	str	r2, [r3, #4]
 80069de:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3348      	adds	r3, #72	@ 0x48
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	605a      	str	r2, [r3, #4]
 80069ea:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	e003      	b.n	80069f8 <lfs_init+0x5a4>

cleanup:
    lfs_deinit(lfs);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f819 	bl	8006a28 <lfs_deinit>
    return err;
 80069f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3734      	adds	r7, #52	@ 0x34
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd90      	pop	{r4, r7, pc}
 8006a00:	0800e3bc 	.word	0x0800e3bc
 8006a04:	0800eb08 	.word	0x0800eb08
 8006a08:	0800dc74 	.word	0x0800dc74
 8006a0c:	0800e3dc 	.word	0x0800e3dc
 8006a10:	0800e3f8 	.word	0x0800e3f8
 8006a14:	0800e41c 	.word	0x0800e41c
 8006a18:	0800e438 	.word	0x0800e438
 8006a1c:	0800e468 	.word	0x0800e468
 8006a20:	0800e4c0 	.word	0x0800e4c0
 8006a24:	0800e510 	.word	0x0800e510

08006a28 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d104      	bne.n	8006a44 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fa fb60 	bl	8001104 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d104      	bne.n	8006a58 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fa fb56 	bl	8001104 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d104      	bne.n	8006a6c <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fa fb4c 	bl	8001104 <lfs_free>
    }

    return 0;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b0a0      	sub	sp, #128	@ 0x80
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
    int err = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff fce3 	bl	8006454 <lfs_init>
 8006a8e:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8006a90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <lfs_format_+0x22>
            return err;
 8006a96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a98:	e08d      	b.n	8006bb6 <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <lfs_format_+0x38>
 8006aa2:	4b47      	ldr	r3, [pc, #284]	@ (8006bc0 <lfs_format_+0x148>)
 8006aa4:	4a47      	ldr	r2, [pc, #284]	@ (8006bc4 <lfs_format_+0x14c>)
 8006aa6:	f241 112a 	movw	r1, #4394	@ 0x112a
 8006aaa:	4847      	ldr	r0, [pc, #284]	@ (8006bc8 <lfs_format_+0x150>)
 8006aac:	f006 f896 	bl	800cbdc <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aba:	461a      	mov	r2, r3
 8006abc:	2100      	movs	r1, #0
 8006abe:	f006 faa2 	bl	800d006 <memset>
        lfs->lookahead.start = 0;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ace:	00da      	lsls	r2, r3, #3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f7fa fa69 	bl	8000fae <lfs_min>
 8006adc:	4602      	mov	r2, r0
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7fb fa78 	bl	8001fde <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8006aee:	f107 030c 	add.w	r3, r7, #12
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7fd f94f 	bl	8003d98 <lfs_dir_alloc>
 8006afa:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8006afc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d150      	bne.n	8006ba4 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7fb fa42 	bl	8001f8c <lfs_fs_disk_version>
 8006b08:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 8006b0a:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b10:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8006b12:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->block_count,
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 8006b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 8006b1e:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 8006b24:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 8006b2a:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 8006b2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fb f9a1 	bl	8001e78 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006b36:	4b25      	ldr	r3, [pc, #148]	@ (8006bcc <lfs_format_+0x154>)
 8006b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b3e:	4b24      	ldr	r3, [pc, #144]	@ (8006bd0 <lfs_format_+0x158>)
 8006b40:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b42:	4b24      	ldr	r3, [pc, #144]	@ (8006bd4 <lfs_format_+0x15c>)
 8006b44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b46:	4b24      	ldr	r3, [pc, #144]	@ (8006bd8 <lfs_format_+0x160>)
 8006b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b4a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006b4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b50:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8006b54:	f107 010c 	add.w	r1, r7, #12
 8006b58:	2303      	movs	r3, #3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7fe fb0a 	bl	8005174 <lfs_dir_commit>
 8006b60:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8006b62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d11f      	bne.n	8006ba8 <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8006b6e:	f107 010c 	add.w	r1, r7, #12
 8006b72:	2300      	movs	r3, #0
 8006b74:	2200      	movs	r2, #0
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7fe fafc 	bl	8005174 <lfs_dir_commit>
 8006b7c:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8006b7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d113      	bne.n	8006bac <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8006b84:	2300      	movs	r3, #0
 8006b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b88:	2301      	movs	r3, #1
 8006b8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b8c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8006b90:	f107 030c 	add.w	r3, r7, #12
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fc fd3c 	bl	8003614 <lfs_dir_fetch>
 8006b9c:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8006b9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	e004      	b.n	8006bae <lfs_format_+0x136>
            goto cleanup;
 8006ba4:	bf00      	nop
 8006ba6:	e002      	b.n	8006bae <lfs_format_+0x136>
            goto cleanup;
 8006ba8:	bf00      	nop
 8006baa:	e000      	b.n	8006bae <lfs_format_+0x136>
            goto cleanup;
 8006bac:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7ff ff3a 	bl	8006a28 <lfs_deinit>
    return err;
 8006bb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3780      	adds	r7, #128	@ 0x80
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	0800e5a0 	.word	0x0800e5a0
 8006bc4:	0800eb14 	.word	0x0800eb14
 8006bc8:	0800dc74 	.word	0x0800dc74
 8006bcc:	40100000 	.word	0x40100000
 8006bd0:	0ff00008 	.word	0x0ff00008
 8006bd4:	0800e5b8 	.word	0x0800e5b8
 8006bd8:	20100018 	.word	0x20100018

08006bdc <lfs_tortoise_detectcycles>:
    lfs_size_t i;
    lfs_size_t period;
};

static int lfs_tortoise_detectcycles(
    const lfs_mdir_t *dir, struct lfs_tortoise_t *tortoise) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
    // detect cycles with Brent's algorithm
    if (lfs_pair_issync(dir->tail, tortoise->pair)) {
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3318      	adds	r3, #24
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	4611      	mov	r1, r2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fa fec8 	bl	8001984 <lfs_pair_issync>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d009      	beq.n	8006c0e <lfs_tortoise_detectcycles+0x32>
        LFS_WARN("Cycle detected in tail list");
 8006bfa:	4b15      	ldr	r3, [pc, #84]	@ (8006c50 <lfs_tortoise_detectcycles+0x74>)
 8006bfc:	f241 126f 	movw	r2, #4463	@ 0x116f
 8006c00:	4914      	ldr	r1, [pc, #80]	@ (8006c54 <lfs_tortoise_detectcycles+0x78>)
 8006c02:	4815      	ldr	r0, [pc, #84]	@ (8006c58 <lfs_tortoise_detectcycles+0x7c>)
 8006c04:	f006 f99a 	bl	800cf3c <iprintf>
        return LFS_ERR_CORRUPT;
 8006c08:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8006c0c:	e01b      	b.n	8006c46 <lfs_tortoise_detectcycles+0x6a>
    }
    if (tortoise->i == tortoise->period) {
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d10f      	bne.n	8006c3a <lfs_tortoise_detectcycles+0x5e>
        tortoise->pair[0] = dir->tail[0];
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699a      	ldr	r2, [r3, #24]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	601a      	str	r2, [r3, #0]
        tortoise->pair[1] = dir->tail[1];
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	69da      	ldr	r2, [r3, #28]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	605a      	str	r2, [r3, #4]
        tortoise->i = 0;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	609a      	str	r2, [r3, #8]
        tortoise->period *= 2;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	005a      	lsls	r2, r3, #1
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	60da      	str	r2, [r3, #12]
    }
    tortoise->i += 1;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	609a      	str	r2, [r3, #8]

    return LFS_ERR_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	0800dda8 	.word	0x0800dda8
 8006c54:	0800dc74 	.word	0x0800dc74
 8006c58:	0800e5c4 	.word	0x0800e5c4

08006c5c <lfs_mount_>:

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 8006c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c5e:	b0a1      	sub	sp, #132	@ 0x84
 8006c60:	af04      	add	r7, sp, #16
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff fbf3 	bl	8006454 <lfs_init>
 8006c6e:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 8006c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <lfs_mount_+0x1e>
        return err;
 8006c76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c78:	e1e5      	b.n	8007046 <lfs_mount_+0x3ea>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8006c7a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006c7e:	2220      	movs	r2, #32
 8006c80:	2100      	movs	r1, #0
 8006c82:	4618      	mov	r0, r3
 8006c84:	f006 f9bf 	bl	800d006 <memset>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    struct lfs_tortoise_t tortoise = {
 8006c8c:	4ba0      	ldr	r3, [pc, #640]	@ (8006f10 <lfs_mount_+0x2b4>)
 8006c8e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8006c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    while (!lfs_pair_isnull(dir.tail)) {
 8006c98:	e17f      	b.n	8006f9a <lfs_mount_+0x33e>
        err = lfs_tortoise_detectcycles(&dir, &tortoise);
 8006c9a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006c9e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff ff99 	bl	8006bdc <lfs_tortoise_detectcycles>
 8006caa:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err < 0) {
 8006cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f2c0 81c2 	blt.w	8007038 <lfs_mount_+0x3dc>
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cb8:	4b96      	ldr	r3, [pc, #600]	@ (8006f14 <lfs_mount_+0x2b8>)
 8006cba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cbc:	2308      	movs	r3, #8
 8006cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8006cc0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006cc4:	f103 0218 	add.w	r2, r3, #24
 8006cc8:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8006ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cd0:	9303      	str	r3, [sp, #12]
 8006cd2:	4b91      	ldr	r3, [pc, #580]	@ (8006f18 <lfs_mount_+0x2bc>)
 8006cd4:	9302      	str	r3, [sp, #8]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	4b90      	ldr	r3, [pc, #576]	@ (8006f1c <lfs_mount_+0x2c0>)
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	4b90      	ldr	r3, [pc, #576]	@ (8006f20 <lfs_mount_+0x2c4>)
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7fc f8c7 	bl	8002e74 <lfs_dir_fetchmatch>
 8006ce6:	6678      	str	r0, [r7, #100]	@ 0x64
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8006ce8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	da02      	bge.n	8006cf4 <lfs_mount_+0x98>
            err = tag;
 8006cee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 8006cf2:	e1a4      	b.n	800703e <lfs_mount_+0x3e2>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8006cf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 8142 	beq.w	8006f80 <lfs_mount_+0x324>
 8006cfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fa feaf 	bl	8001a62 <lfs_tag_isdelete>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f083 0301 	eor.w	r3, r3, #1
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 8137 	beq.w	8006f80 <lfs_mount_+0x324>
            // update root
            lfs->root[0] = dir.pair[0];
 8006d12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8006d18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8006d1e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8006d22:	f107 030c 	add.w	r3, r7, #12
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	4b7e      	ldr	r3, [pc, #504]	@ (8006f24 <lfs_mount_+0x2c8>)
 8006d2a:	4a7d      	ldr	r2, [pc, #500]	@ (8006f20 <lfs_mount_+0x2c4>)
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7fb fb6b 	bl	8002408 <lfs_dir_get>
 8006d32:	6678      	str	r0, [r7, #100]	@ 0x64
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8006d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	da02      	bge.n	8006d40 <lfs_mount_+0xe4>
                err = tag;
 8006d3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8006d3e:	e11e      	b.n	8006f7e <lfs_mount_+0x322>
            }
            lfs_superblock_fromle32(&superblock);
 8006d40:	f107 030c 	add.w	r3, r7, #12
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fb f85f 	bl	8001e08 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	0c1b      	lsrs	r3, r3, #16
 8006d4e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
            if (major_version != lfs_fs_disk_version_major(lfs)
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7fb f925 	bl	8001fa8 <lfs_fs_disk_version_major>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	461a      	mov	r2, r3
 8006d62:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d108      	bne.n	8006d7c <lfs_mount_+0x120>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fb f92a 	bl	8001fc4 <lfs_fs_disk_version_minor>
 8006d70:	4603      	mov	r3, r0
 8006d72:	461a      	mov	r2, r3
 8006d74:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d91d      	bls.n	8006db8 <lfs_mount_+0x15c>
                LFS_ERROR("Invalid version "
 8006d7c:	f8b7 5062 	ldrh.w	r5, [r7, #98]	@ 0x62
 8006d80:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7fb f90f 	bl	8001fa8 <lfs_fs_disk_version_major>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	461e      	mov	r6, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fb f918 	bl	8001fc4 <lfs_fs_disk_version_minor>
 8006d94:	4603      	mov	r3, r0
 8006d96:	461a      	mov	r2, r3
 8006d98:	4b63      	ldr	r3, [pc, #396]	@ (8006f28 <lfs_mount_+0x2cc>)
 8006d9a:	9303      	str	r3, [sp, #12]
 8006d9c:	9202      	str	r2, [sp, #8]
 8006d9e:	9601      	str	r6, [sp, #4]
 8006da0:	9400      	str	r4, [sp, #0]
 8006da2:	462b      	mov	r3, r5
 8006da4:	f241 12b2 	movw	r2, #4530	@ 0x11b2
 8006da8:	4960      	ldr	r1, [pc, #384]	@ (8006f2c <lfs_mount_+0x2d0>)
 8006daa:	4861      	ldr	r0, [pc, #388]	@ (8006f30 <lfs_mount_+0x2d4>)
 8006dac:	f006 f8c6 	bl	800cf3c <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 8006db0:	f06f 0315 	mvn.w	r3, #21
 8006db4:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8006db6:	e0e2      	b.n	8006f7e <lfs_mount_+0x322>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 8006db8:	2300      	movs	r3, #0
 8006dba:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fb f900 	bl	8001fc4 <lfs_fs_disk_version_minor>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d21c      	bcs.n	8006e0a <lfs_mount_+0x1ae>
                LFS_DEBUG("Found older minor version "
 8006dd0:	f8b7 5062 	ldrh.w	r5, [r7, #98]	@ 0x62
 8006dd4:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7fb f8e5 	bl	8001fa8 <lfs_fs_disk_version_major>
 8006dde:	4603      	mov	r3, r0
 8006de0:	461e      	mov	r6, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fb f8ee 	bl	8001fc4 <lfs_fs_disk_version_minor>
 8006de8:	4603      	mov	r3, r0
 8006dea:	461a      	mov	r2, r3
 8006dec:	4b4e      	ldr	r3, [pc, #312]	@ (8006f28 <lfs_mount_+0x2cc>)
 8006dee:	9303      	str	r3, [sp, #12]
 8006df0:	9202      	str	r2, [sp, #8]
 8006df2:	9601      	str	r6, [sp, #4]
 8006df4:	9400      	str	r4, [sp, #0]
 8006df6:	462b      	mov	r3, r5
 8006df8:	f241 12c1 	movw	r2, #4545	@ 0x11c1
 8006dfc:	494b      	ldr	r1, [pc, #300]	@ (8006f2c <lfs_mount_+0x2d0>)
 8006dfe:	484d      	ldr	r0, [pc, #308]	@ (8006f34 <lfs_mount_+0x2d8>)
 8006e00:	f006 f89c 	bl	800cf3c <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 8006e04:	2301      	movs	r3, #1
 8006e06:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 8006e0a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fb4f 	bl	80074b4 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d018      	beq.n	8006e4e <lfs_mount_+0x1f2>
                if (superblock.name_max > lfs->name_max) {
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d910      	bls.n	8006e48 <lfs_mount_+0x1ec>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e2c:	493e      	ldr	r1, [pc, #248]	@ (8006f28 <lfs_mount_+0x2cc>)
 8006e2e:	9101      	str	r1, [sp, #4]
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	4613      	mov	r3, r2
 8006e34:	f241 12d0 	movw	r2, #4560	@ 0x11d0
 8006e38:	493c      	ldr	r1, [pc, #240]	@ (8006f2c <lfs_mount_+0x2d0>)
 8006e3a:	483f      	ldr	r0, [pc, #252]	@ (8006f38 <lfs_mount_+0x2dc>)
 8006e3c:	f006 f87e 	bl	800cf3c <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8006e40:	f06f 0315 	mvn.w	r3, #21
 8006e44:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8006e46:	e09a      	b.n	8006f7e <lfs_mount_+0x322>
                }

                lfs->name_max = superblock.name_max;
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d018      	beq.n	8006e86 <lfs_mount_+0x22a>
                if (superblock.file_max > lfs->file_max) {
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d910      	bls.n	8006e80 <lfs_mount_+0x224>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8006e5e:	69fa      	ldr	r2, [r7, #28]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e64:	4930      	ldr	r1, [pc, #192]	@ (8006f28 <lfs_mount_+0x2cc>)
 8006e66:	9101      	str	r1, [sp, #4]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	f241 12db 	movw	r2, #4571	@ 0x11db
 8006e70:	492e      	ldr	r1, [pc, #184]	@ (8006f2c <lfs_mount_+0x2d0>)
 8006e72:	4832      	ldr	r0, [pc, #200]	@ (8006f3c <lfs_mount_+0x2e0>)
 8006e74:	f006 f862 	bl	800cf3c <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8006e78:	f06f 0315 	mvn.w	r3, #21
 8006e7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8006e7e:	e07e      	b.n	8006f7e <lfs_mount_+0x322>
                }

                lfs->file_max = superblock.file_max;
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d023      	beq.n	8006ed4 <lfs_mount_+0x278>
                if (superblock.attr_max > lfs->attr_max) {
 8006e8c:	6a3a      	ldr	r2, [r7, #32]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d910      	bls.n	8006eb8 <lfs_mount_+0x25c>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8006e96:	6a3a      	ldr	r2, [r7, #32]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e9c:	4922      	ldr	r1, [pc, #136]	@ (8006f28 <lfs_mount_+0x2cc>)
 8006e9e:	9101      	str	r1, [sp, #4]
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	f241 12e6 	movw	r2, #4582	@ 0x11e6
 8006ea8:	4920      	ldr	r1, [pc, #128]	@ (8006f2c <lfs_mount_+0x2d0>)
 8006eaa:	4825      	ldr	r0, [pc, #148]	@ (8006f40 <lfs_mount_+0x2e4>)
 8006eac:	f006 f846 	bl	800cf3c <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8006eb0:	f06f 0315 	mvn.w	r3, #21
 8006eb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8006eb6:	e062      	b.n	8006f7e <lfs_mount_+0x322>
                }

                lfs->attr_max = superblock.attr_max;
 8006eb8:	6a3a      	ldr	r2, [r7, #32]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4610      	mov	r0, r2
 8006eca:	f7fa f870 	bl	8000fae <lfs_min>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d034      	beq.n	8006f48 <lfs_mount_+0x2ec>
                    && superblock.block_count != lfs->cfg->block_count) {
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d02e      	beq.n	8006f48 <lfs_mount_+0x2ec>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	490d      	ldr	r1, [pc, #52]	@ (8006f28 <lfs_mount_+0x2cc>)
 8006ef4:	9101      	str	r1, [sp, #4]
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	f241 12f5 	movw	r2, #4597	@ 0x11f5
 8006efe:	490b      	ldr	r1, [pc, #44]	@ (8006f2c <lfs_mount_+0x2d0>)
 8006f00:	4810      	ldr	r0, [pc, #64]	@ (8006f44 <lfs_mount_+0x2e8>)
 8006f02:	f006 f81b 	bl	800cf3c <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8006f06:	f06f 0315 	mvn.w	r3, #21
 8006f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8006f0c:	e037      	b.n	8006f7e <lfs_mount_+0x322>
 8006f0e:	bf00      	nop
 8006f10:	0800e7a0 	.word	0x0800e7a0
 8006f14:	0800e5b8 	.word	0x0800e5b8
 8006f18:	080036b1 	.word	0x080036b1
 8006f1c:	0ff00008 	.word	0x0ff00008
 8006f20:	7ffffc00 	.word	0x7ffffc00
 8006f24:	20100018 	.word	0x20100018
 8006f28:	0800dda8 	.word	0x0800dda8
 8006f2c:	0800dc74 	.word	0x0800dc74
 8006f30:	0800e5f0 	.word	0x0800e5f0
 8006f34:	0800e628 	.word	0x0800e628
 8006f38:	0800e668 	.word	0x0800e668
 8006f3c:	0800e69c 	.word	0x0800e69c
 8006f40:	0800e6d0 	.word	0x0800e6d0
 8006f44:	0800e704 	.word	0x0800e704
            }

            lfs->block_count = superblock.block_count;
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d012      	beq.n	8006f80 <lfs_mount_+0x324>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	493b      	ldr	r1, [pc, #236]	@ (8007050 <lfs_mount_+0x3f4>)
 8006f64:	9101      	str	r1, [sp, #4]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	f241 12fe 	movw	r2, #4606	@ 0x11fe
 8006f6e:	4939      	ldr	r1, [pc, #228]	@ (8007054 <lfs_mount_+0x3f8>)
 8006f70:	4839      	ldr	r0, [pc, #228]	@ (8007058 <lfs_mount_+0x3fc>)
 8006f72:	f005 ffe3 	bl	800cf3c <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8006f76:	f06f 0315 	mvn.w	r3, #21
 8006f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8006f7c:	bf00      	nop
            goto cleanup;
 8006f7e:	e05e      	b.n	800703e <lfs_mount_+0x3e2>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7fc fb5d 	bl	800364c <lfs_dir_getgstate>
 8006f92:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 8006f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d150      	bne.n	800703c <lfs_mount_+0x3e0>
    while (!lfs_pair_isnull(dir.tail)) {
 8006f9a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006f9e:	3318      	adds	r3, #24
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fa fcaa 	bl	80018fa <lfs_pair_isnull>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	f083 0301 	eor.w	r3, r3, #1
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f47f ae73 	bne.w	8006c9a <lfs_mount_+0x3e>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3330      	adds	r3, #48	@ 0x30
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fa fe00 	bl	8001bbe <lfs_gstate_iszero>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	f083 0301 	eor.w	r3, r3, #1
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d010      	beq.n	8006fec <lfs_mount_+0x390>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006fd6:	481e      	ldr	r0, [pc, #120]	@ (8007050 <lfs_mount_+0x3f4>)
 8006fd8:	9002      	str	r0, [sp, #8]
 8006fda:	9201      	str	r2, [sp, #4]
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	f241 220e 	movw	r2, #4622	@ 0x120e
 8006fe4:	491b      	ldr	r1, [pc, #108]	@ (8007054 <lfs_mount_+0x3f8>)
 8006fe6:	481d      	ldr	r0, [pc, #116]	@ (800705c <lfs_mount_+0x400>)
 8006fe8:	f005 ffa8 	bl	800cf3c <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fa fd28 	bl	8001a46 <lfs_tag_isvalid>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	f083 0301 	eor.w	r3, r3, #1
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007004:	441a      	add	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	333c      	adds	r3, #60	@ 0x3c
 8007010:	3230      	adds	r2, #48	@ 0x30
 8007012:	ca07      	ldmia	r2, {r0, r1, r2}
 8007014:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007020:	fbb3 f1f2 	udiv	r1, r3, r2
 8007024:	fb01 f202 	mul.w	r2, r1, r2
 8007028:	1a9a      	subs	r2, r3, r2
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fa ffe3 	bl	8001ffa <lfs_alloc_drop>

    return 0;
 8007034:	2300      	movs	r3, #0
 8007036:	e006      	b.n	8007046 <lfs_mount_+0x3ea>
            goto cleanup;
 8007038:	bf00      	nop
 800703a:	e000      	b.n	800703e <lfs_mount_+0x3e2>
            goto cleanup;
 800703c:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f80e 	bl	8007060 <lfs_unmount_>
    return err;
 8007044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8007046:	4618      	mov	r0, r3
 8007048:	3774      	adds	r7, #116	@ 0x74
 800704a:	46bd      	mov	sp, r7
 800704c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800704e:	bf00      	nop
 8007050:	0800dda8 	.word	0x0800dda8
 8007054:	0800dc74 	.word	0x0800dc74
 8007058:	0800e738 	.word	0x0800e738
 800705c:	0800e768 	.word	0x0800e768

08007060 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7ff fcdd 	bl	8006a28 <lfs_deinit>
 800706e:	4603      	mov	r3, r0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8007078:	b590      	push	{r4, r7, lr}
 800707a:	b0a1      	sub	sp, #132	@ 0x84
 800707c:	af04      	add	r7, sp, #16
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8007086:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800708a:	2220      	movs	r2, #32
 800708c:	2100      	movs	r1, #0
 800708e:	4618      	mov	r0, r3
 8007090:	f005 ffb9 	bl	800d006 <memset>
 8007094:	2301      	movs	r3, #1
 8007096:	647b      	str	r3, [r7, #68]	@ 0x44
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    struct lfs_tortoise_t tortoise = {
 8007098:	4b8d      	ldr	r3, [pc, #564]	@ (80072d0 <lfs_fs_traverse_+0x258>)
 800709a:	f107 0418 	add.w	r4, r7, #24
 800709e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 80070a8:	e0a9      	b.n	80071fe <lfs_fs_traverse_+0x186>
        err = lfs_tortoise_detectcycles(&dir, &tortoise);
 80070aa:	f107 0218 	add.w	r2, r7, #24
 80070ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80070b2:	4611      	mov	r1, r2
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff fd91 	bl	8006bdc <lfs_tortoise_detectcycles>
 80070ba:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (err < 0) {
 80070bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	da02      	bge.n	80070c8 <lfs_fs_traverse_+0x50>
            return LFS_ERR_CORRUPT;
 80070c2:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80070c6:	e0ff      	b.n	80072c8 <lfs_fs_traverse_+0x250>
        }

        for (int i = 0; i < 2; i++) {
 80070c8:	2300      	movs	r3, #0
 80070ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070cc:	e013      	b.n	80070f6 <lfs_fs_traverse_+0x7e>
            int err = cb(data, dir.tail[i]);
 80070ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070d0:	3306      	adds	r3, #6
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	3370      	adds	r3, #112	@ 0x70
 80070d6:	443b      	add	r3, r7
 80070d8:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4611      	mov	r1, r2
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	4798      	blx	r3
 80070e4:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (err) {
 80070e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <lfs_fs_traverse_+0x78>
                return err;
 80070ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070ee:	e0eb      	b.n	80072c8 <lfs_fs_traverse_+0x250>
        for (int i = 0; i < 2; i++) {
 80070f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070f2:	3301      	adds	r3, #1
 80070f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	dde8      	ble.n	80070ce <lfs_fs_traverse_+0x56>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80070fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007100:	f103 0218 	add.w	r2, r3, #24
 8007104:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007108:	4619      	mov	r1, r3
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f7fc fa82 	bl	8003614 <lfs_dir_fetch>
 8007110:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8007112:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <lfs_fs_traverse_+0xa4>
            return err;
 8007118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800711a:	e0d5      	b.n	80072c8 <lfs_fs_traverse_+0x250>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800711c:	2300      	movs	r3, #0
 800711e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007122:	e067      	b.n	80071f4 <lfs_fs_traverse_+0x17c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8007124:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007128:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800712a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800712e:	f043 0308 	orr.w	r3, r3, #8
 8007132:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007136:	f107 0210 	add.w	r2, r7, #16
 800713a:	9200      	str	r2, [sp, #0]
 800713c:	4a65      	ldr	r2, [pc, #404]	@ (80072d4 <lfs_fs_traverse_+0x25c>)
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7fb f962 	bl	8002408 <lfs_dir_get>
 8007144:	64f8      	str	r0, [r7, #76]	@ 0x4c
            if (tag < 0) {
 8007146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007148:	2b00      	cmp	r3, #0
 800714a:	da05      	bge.n	8007158 <lfs_fs_traverse_+0xe0>
                if (tag == LFS_ERR_NOENT) {
 800714c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800714e:	f113 0f02 	cmn.w	r3, #2
 8007152:	d049      	beq.n	80071e8 <lfs_fs_traverse_+0x170>
                    continue;
                }
                return tag;
 8007154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007156:	e0b7      	b.n	80072c8 <lfs_fs_traverse_+0x250>
            }
            lfs_ctz_fromle32(&ctz);
 8007158:	f107 0310 	add.w	r3, r7, #16
 800715c:	4618      	mov	r0, r3
 800715e:	f7fa fe23 	bl	8001da8 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8007162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007164:	4618      	mov	r0, r3
 8007166:	f7fa fcaf 	bl	8001ac8 <lfs_tag_type3>
 800716a:	4603      	mov	r3, r0
 800716c:	461a      	mov	r2, r3
 800716e:	f240 2302 	movw	r3, #514	@ 0x202
 8007172:	429a      	cmp	r2, r3
 8007174:	d113      	bne.n	800719e <lfs_fs_traverse_+0x126>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8007176:	68f9      	ldr	r1, [r7, #12]
 8007178:	6938      	ldr	r0, [r7, #16]
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	9202      	str	r2, [sp, #8]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	9201      	str	r2, [sp, #4]
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	4603      	mov	r3, r0
 8007188:	460a      	mov	r2, r1
 800718a:	2100      	movs	r1, #0
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f7fe f9c3 	bl	8005518 <lfs_ctz_traverse>
 8007192:	6538      	str	r0, [r7, #80]	@ 0x50
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8007194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007196:	2b00      	cmp	r3, #0
 8007198:	d027      	beq.n	80071ea <lfs_fs_traverse_+0x172>
                    return err;
 800719a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800719c:	e094      	b.n	80072c8 <lfs_fs_traverse_+0x250>
                }
            } else if (includeorphans &&
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d022      	beq.n	80071ea <lfs_fs_traverse_+0x172>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80071a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fa fc8e 	bl	8001ac8 <lfs_tag_type3>
 80071ac:	4603      	mov	r3, r0
            } else if (includeorphans &&
 80071ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071b2:	d11a      	bne.n	80071ea <lfs_fs_traverse_+0x172>
                for (int i = 0; i < 2; i++) {
 80071b4:	2300      	movs	r3, #0
 80071b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80071b8:	e012      	b.n	80071e0 <lfs_fs_traverse_+0x168>
                    err = cb(data, (&ctz.head)[i]);
 80071ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	f107 0210 	add.w	r2, r7, #16
 80071c2:	4413      	add	r3, r2
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	4611      	mov	r1, r2
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	4798      	blx	r3
 80071ce:	6538      	str	r0, [r7, #80]	@ 0x50
                    if (err) {
 80071d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <lfs_fs_traverse_+0x162>
                        return err;
 80071d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071d8:	e076      	b.n	80072c8 <lfs_fs_traverse_+0x250>
                for (int i = 0; i < 2; i++) {
 80071da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071dc:	3301      	adds	r3, #1
 80071de:	667b      	str	r3, [r7, #100]	@ 0x64
 80071e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	dde9      	ble.n	80071ba <lfs_fs_traverse_+0x142>
 80071e6:	e000      	b.n	80071ea <lfs_fs_traverse_+0x172>
                    continue;
 80071e8:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80071ea:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80071ee:	3301      	adds	r3, #1
 80071f0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80071f4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80071f6:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d392      	bcc.n	8007124 <lfs_fs_traverse_+0xac>
    while (!lfs_pair_isnull(dir.tail)) {
 80071fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007202:	3318      	adds	r3, #24
 8007204:	4618      	mov	r0, r3
 8007206:	f7fa fb78 	bl	80018fa <lfs_pair_isnull>
 800720a:	4603      	mov	r3, r0
 800720c:	f083 0301 	eor.w	r3, r3, #1
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	f47f af49 	bne.w	80070aa <lfs_fs_traverse_+0x32>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721c:	663b      	str	r3, [r7, #96]	@ 0x60
 800721e:	e04f      	b.n	80072c0 <lfs_fs_traverse_+0x248>
        if (f->type != LFS_TYPE_REG) {
 8007220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007222:	799b      	ldrb	r3, [r3, #6]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d147      	bne.n	80072b8 <lfs_fs_traverse_+0x240>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8007228:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800722a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01d      	beq.n	8007270 <lfs_fs_traverse_+0x1f8>
 8007234:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007238:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d117      	bne.n	8007270 <lfs_fs_traverse_+0x1f8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8007240:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007242:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800724a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800724c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800724e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	9202      	str	r2, [sp, #8]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	9201      	str	r2, [sp, #4]
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	4623      	mov	r3, r4
 800725c:	4602      	mov	r2, r0
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f7fe f95a 	bl	8005518 <lfs_ctz_traverse>
 8007264:	65b8      	str	r0, [r7, #88]	@ 0x58
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8007266:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <lfs_fs_traverse_+0x1f8>
                return err;
 800726c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800726e:	e02b      	b.n	80072c8 <lfs_fs_traverse_+0x250>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8007270:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d01e      	beq.n	80072ba <lfs_fs_traverse_+0x242>
 800727c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800727e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007280:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d118      	bne.n	80072ba <lfs_fs_traverse_+0x242>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8007288:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800728a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007292:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8007294:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	9202      	str	r2, [sp, #8]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	9201      	str	r2, [sp, #4]
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	4623      	mov	r3, r4
 80072a4:	4602      	mov	r2, r0
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f7fe f936 	bl	8005518 <lfs_ctz_traverse>
 80072ac:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->block, f->pos, cb, data);
            if (err) {
 80072ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <lfs_fs_traverse_+0x242>
                return err;
 80072b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b6:	e007      	b.n	80072c8 <lfs_fs_traverse_+0x250>
            continue;
 80072b8:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80072ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	663b      	str	r3, [r7, #96]	@ 0x60
 80072c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1ac      	bne.n	8007220 <lfs_fs_traverse_+0x1a8>
            }
        }
    }
#endif

    return 0;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3774      	adds	r7, #116	@ 0x74
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd90      	pop	{r4, r7, pc}
 80072d0:	0800e7a0 	.word	0x0800e7a0
 80072d4:	700ffc00 	.word	0x700ffc00

080072d8 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80072d8:	b590      	push	{r4, r7, lr}
 80072da:	b08b      	sub	sp, #44	@ 0x2c
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 80072f0:	4b1f      	ldr	r3, [pc, #124]	@ (8007370 <lfs_fs_pred+0x98>)
 80072f2:	f107 0410 	add.w	r4, r7, #16
 80072f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	627b      	str	r3, [r7, #36]	@ 0x24
    while (!lfs_pair_isnull(pdir->tail)) {
 8007300:	e024      	b.n	800734c <lfs_fs_pred+0x74>
        err = lfs_tortoise_detectcycles(pdir, &tortoise);
 8007302:	f107 0310 	add.w	r3, r7, #16
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff fc67 	bl	8006bdc <lfs_tortoise_detectcycles>
 800730e:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err < 0) {
 8007310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007312:	2b00      	cmp	r3, #0
 8007314:	da02      	bge.n	800731c <lfs_fs_pred+0x44>
            return LFS_ERR_CORRUPT;
 8007316:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800731a:	e024      	b.n	8007366 <lfs_fs_pred+0x8e>
        }

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3318      	adds	r3, #24
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	4618      	mov	r0, r3
 8007324:	f7fa fb04 	bl	8001930 <lfs_pair_cmp>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <lfs_fs_pred+0x5a>
            return 0;
 800732e:	2300      	movs	r3, #0
 8007330:	e019      	b.n	8007366 <lfs_fs_pred+0x8e>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3318      	adds	r3, #24
 8007336:	461a      	mov	r2, r3
 8007338:	6879      	ldr	r1, [r7, #4]
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f7fc f96a 	bl	8003614 <lfs_dir_fetch>
 8007340:	6238      	str	r0, [r7, #32]
        if (err) {
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <lfs_fs_pred+0x74>
            return err;
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	e00c      	b.n	8007366 <lfs_fs_pred+0x8e>
    while (!lfs_pair_isnull(pdir->tail)) {
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3318      	adds	r3, #24
 8007350:	4618      	mov	r0, r3
 8007352:	f7fa fad2 	bl	80018fa <lfs_pair_isnull>
 8007356:	4603      	mov	r3, r0
 8007358:	f083 0301 	eor.w	r3, r3, #1
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1cf      	bne.n	8007302 <lfs_fs_pred+0x2a>
        }
    }

    return LFS_ERR_NOENT;
 8007362:	f06f 0301 	mvn.w	r3, #1
}
 8007366:	4618      	mov	r0, r3
 8007368:	372c      	adds	r7, #44	@ 0x2c
 800736a:	46bd      	mov	sp, r7
 800736c:	bd90      	pop	{r4, r7, pc}
 800736e:	bf00      	nop
 8007370:	0800e7a0 	.word	0x0800e7a0

08007374 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8007374:	b5b0      	push	{r4, r5, r7, lr}
 8007376:	b08e      	sub	sp, #56	@ 0x38
 8007378:	af04      	add	r7, sp, #16
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8007384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8007394:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800739a:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	69fa      	ldr	r2, [r7, #28]
 80073a2:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 80073a4:	2108      	movs	r1, #8
 80073a6:	9103      	str	r1, [sp, #12]
 80073a8:	f107 0110 	add.w	r1, r7, #16
 80073ac:	9102      	str	r1, [sp, #8]
 80073ae:	9201      	str	r2, [sp, #4]
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	462b      	mov	r3, r5
 80073b4:	4622      	mov	r2, r4
 80073b6:	4601      	mov	r1, r0
 80073b8:	6a38      	ldr	r0, [r7, #32]
 80073ba:	f7f9 fed3 	bl	8001164 <lfs_bd_read>
 80073be:	61b8      	str	r0, [r7, #24]
    if (err) {
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <lfs_fs_parent_match+0x56>
        return err;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	e012      	b.n	80073f0 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 80073ca:	f107 0310 	add.w	r3, r7, #16
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fa fb05 	bl	80019de <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 80073d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d6:	1d1a      	adds	r2, r3, #4
 80073d8:	f107 0310 	add.w	r3, r7, #16
 80073dc:	4611      	mov	r1, r2
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fa faa6 	bl	8001930 <lfs_pair_cmp>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	bf14      	ite	ne
 80073ea:	2301      	movne	r3, #1
 80073ec:	2300      	moveq	r3, #0
 80073ee:	b2db      	uxtb	r3, r3
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3728      	adds	r7, #40	@ 0x28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bdb0      	pop	{r4, r5, r7, pc}

080073f8 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 80073f8:	b590      	push	{r4, r7, lr}
 80073fa:	b093      	sub	sp, #76	@ 0x4c
 80073fc:	af04      	add	r7, sp, #16
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 8007410:	4b24      	ldr	r3, [pc, #144]	@ (80074a4 <lfs_fs_parent+0xac>)
 8007412:	f107 0420 	add.w	r4, r7, #32
 8007416:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (!lfs_pair_isnull(parent->tail)) {
 8007420:	e02f      	b.n	8007482 <lfs_fs_parent+0x8a>
        err = lfs_tortoise_detectcycles(parent, &tortoise);
 8007422:	f107 0320 	add.w	r3, r7, #32
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff fbd7 	bl	8006bdc <lfs_tortoise_detectcycles>
 800742e:	6378      	str	r0, [r7, #52]	@ 0x34
        if (err < 0) {
 8007430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007432:	2b00      	cmp	r3, #0
 8007434:	da01      	bge.n	800743a <lfs_fs_parent+0x42>
            return err;
 8007436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007438:	e030      	b.n	800749c <lfs_fs_parent+0xa4>
        }

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8007448:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	3304      	adds	r3, #4
 800744e:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8007450:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8007452:	f107 0314 	add.w	r3, r7, #20
 8007456:	9303      	str	r3, [sp, #12]
 8007458:	4b13      	ldr	r3, [pc, #76]	@ (80074a8 <lfs_fs_parent+0xb0>)
 800745a:	9302      	str	r3, [sp, #8]
 800745c:	2300      	movs	r3, #0
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	4b12      	ldr	r3, [pc, #72]	@ (80074ac <lfs_fs_parent+0xb4>)
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	4b12      	ldr	r3, [pc, #72]	@ (80074b0 <lfs_fs_parent+0xb8>)
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7fb fd03 	bl	8002e74 <lfs_dir_fetchmatch>
 800746e:	6338      	str	r0, [r7, #48]	@ 0x30
        if (tag && tag != LFS_ERR_NOENT) {
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	2b00      	cmp	r3, #0
 8007474:	d005      	beq.n	8007482 <lfs_fs_parent+0x8a>
 8007476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007478:	f113 0f02 	cmn.w	r3, #2
 800747c:	d001      	beq.n	8007482 <lfs_fs_parent+0x8a>
            return tag;
 800747e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007480:	e00c      	b.n	800749c <lfs_fs_parent+0xa4>
    while (!lfs_pair_isnull(parent->tail)) {
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3318      	adds	r3, #24
 8007486:	4618      	mov	r0, r3
 8007488:	f7fa fa37 	bl	80018fa <lfs_pair_isnull>
 800748c:	4603      	mov	r3, r0
 800748e:	f083 0301 	eor.w	r3, r3, #1
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1c4      	bne.n	8007422 <lfs_fs_parent+0x2a>
        }
    }

    return LFS_ERR_NOENT;
 8007498:	f06f 0301 	mvn.w	r3, #1
}
 800749c:	4618      	mov	r0, r3
 800749e:	373c      	adds	r7, #60	@ 0x3c
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd90      	pop	{r4, r7, pc}
 80074a4:	0800e7a0 	.word	0x0800e7a0
 80074a8:	08007375 	.word	0x08007375
 80074ac:	20000008 	.word	0x20000008
 80074b0:	7ff003ff 	.word	0x7ff003ff

080074b4 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 80074c8:	78fb      	ldrb	r3, [r7, #3]
 80074ca:	025b      	lsls	r3, r3, #9
 80074cc:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
	...

080074e0 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 80074e0:	b590      	push	{r4, r7, lr}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fa fb23 	bl	8001b3c <lfs_tag_size>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <lfs_fs_preporphans+0x32>
 80074fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007500:	2b00      	cmp	r3, #0
 8007502:	da06      	bge.n	8007512 <lfs_fs_preporphans+0x32>
 8007504:	4b1a      	ldr	r3, [pc, #104]	@ (8007570 <lfs_fs_preporphans+0x90>)
 8007506:	4a1b      	ldr	r2, [pc, #108]	@ (8007574 <lfs_fs_preporphans+0x94>)
 8007508:	f241 311a 	movw	r1, #4890	@ 0x131a
 800750c:	481a      	ldr	r0, [pc, #104]	@ (8007578 <lfs_fs_preporphans+0x98>)
 800750e:	f005 fb65 	bl	800cbdc <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007516:	4618      	mov	r0, r3
 8007518:	f7fa fb10 	bl	8001b3c <lfs_tag_size>
 800751c:	4603      	mov	r3, r0
 800751e:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8007522:	d90a      	bls.n	800753a <lfs_fs_preporphans+0x5a>
 8007524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007528:	2b00      	cmp	r3, #0
 800752a:	dd06      	ble.n	800753a <lfs_fs_preporphans+0x5a>
 800752c:	4b13      	ldr	r3, [pc, #76]	@ (800757c <lfs_fs_preporphans+0x9c>)
 800752e:	4a11      	ldr	r2, [pc, #68]	@ (8007574 <lfs_fs_preporphans+0x94>)
 8007530:	f241 311b 	movw	r1, #4891	@ 0x131b
 8007534:	4810      	ldr	r0, [pc, #64]	@ (8007578 <lfs_fs_preporphans+0x98>)
 8007536:	f005 fb51 	bl	800cbdc <__assert_func>
    lfs->gstate.tag += orphans;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800753e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007542:	441a      	add	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3330      	adds	r3, #48	@ 0x30
 8007554:	4618      	mov	r0, r3
 8007556:	f7fa fb4e 	bl	8001bf6 <lfs_gstate_hasorphans>
 800755a:	4603      	mov	r3, r0
 800755c:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800755e:	ea44 0203 	orr.w	r2, r4, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	bd90      	pop	{r4, r7, pc}
 8007570:	0800e7b0 	.word	0x0800e7b0
 8007574:	0800eb20 	.word	0x0800eb20
 8007578:	0800dc74 	.word	0x0800dc74
 800757c:	0800e7e8 	.word	0x0800e7e8

08007580 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	460b      	mov	r3, r1
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007592:	4a17      	ldr	r2, [pc, #92]	@ (80075f0 <lfs_fs_prepmove+0x70>)
 8007594:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8007596:	897b      	ldrh	r3, [r7, #10]
 8007598:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800759c:	428b      	cmp	r3, r1
 800759e:	d006      	beq.n	80075ae <lfs_fs_prepmove+0x2e>
 80075a0:	897b      	ldrh	r3, [r7, #10]
 80075a2:	029b      	lsls	r3, r3, #10
 80075a4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80075a8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80075ac:	e000      	b.n	80075b0 <lfs_fs_prepmove+0x30>
 80075ae:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80075b0:	431a      	orrs	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80075b6:	897b      	ldrh	r3, [r7, #10]
 80075b8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80075bc:	4293      	cmp	r3, r2
 80075be:	d002      	beq.n	80075c6 <lfs_fs_prepmove+0x46>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	e000      	b.n	80075c8 <lfs_fs_prepmove+0x48>
 80075c6:	2300      	movs	r3, #0
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80075cc:	897b      	ldrh	r3, [r7, #10]
 80075ce:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d003      	beq.n	80075de <lfs_fs_prepmove+0x5e>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	3304      	adds	r3, #4
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	e000      	b.n	80075e0 <lfs_fs_prepmove+0x60>
 80075de:	2300      	movs	r3, #0
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80075e4:	bf00      	nop
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	800003ff 	.word	0x800003ff

080075f4 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b098      	sub	sp, #96	@ 0x60
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3330      	adds	r3, #48	@ 0x30
 8007600:	4618      	mov	r0, r3
 8007602:	f7fa fb2d 	bl	8001c60 <lfs_gstate_needssuperblock>
 8007606:	4603      	mov	r3, r0
 8007608:	f083 0301 	eor.w	r3, r3, #1
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <lfs_fs_desuperblock+0x22>
        return 0;
 8007612:	2300      	movs	r3, #0
 8007614:	e04e      	b.n	80076b4 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1a      	ldr	r2, [r3, #32]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761e:	4927      	ldr	r1, [pc, #156]	@ (80076bc <lfs_fs_desuperblock+0xc8>)
 8007620:	9101      	str	r1, [sp, #4]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	4613      	mov	r3, r2
 8007626:	f241 3234 	movw	r2, #4916	@ 0x1334
 800762a:	4925      	ldr	r1, [pc, #148]	@ (80076c0 <lfs_fs_desuperblock+0xcc>)
 800762c:	4825      	ldr	r0, [pc, #148]	@ (80076c4 <lfs_fs_desuperblock+0xd0>)
 800762e:	f005 fc85 	bl	800cf3c <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f103 0220 	add.w	r2, r3, #32
 8007638:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fb ffe8 	bl	8003614 <lfs_dir_fetch>
 8007644:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 8007646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <lfs_fs_desuperblock+0x5c>
        return err;
 800764c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800764e:	e031      	b.n	80076b4 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7fa fc9b 	bl	8001f8c <lfs_fs_disk_version>
 8007656:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8007658:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800765e:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8007660:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 8007666:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 800766c:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 8007672:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 8007678:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 800767a:	f107 031c 	add.w	r3, r7, #28
 800767e:	4618      	mov	r0, r3
 8007680:	f7fa fbfa 	bl	8001e78 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8007684:	4b10      	ldr	r3, [pc, #64]	@ (80076c8 <lfs_fs_desuperblock+0xd4>)
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	f107 031c 	add.w	r3, r7, #28
 800768c:	61bb      	str	r3, [r7, #24]
 800768e:	f107 0214 	add.w	r2, r7, #20
 8007692:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8007696:	2301      	movs	r3, #1
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7fd fd6b 	bl	8005174 <lfs_dir_commit>
 800769e:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 80076a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <lfs_fs_desuperblock+0xb6>
        return err;
 80076a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076a8:	e004      	b.n	80076b4 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 80076aa:	2100      	movs	r1, #0
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff ff01 	bl	80074b4 <lfs_fs_prepsuperblock>
    return 0;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3758      	adds	r7, #88	@ 0x58
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	0800dda8 	.word	0x0800dda8
 80076c0:	0800dc74 	.word	0x0800dc74
 80076c4:	0800e820 	.word	0x0800e820
 80076c8:	20100018 	.word	0x20100018

080076cc <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 80076cc:	b5b0      	push	{r4, r5, r7, lr}
 80076ce:	b094      	sub	sp, #80	@ 0x50
 80076d0:	af04      	add	r7, sp, #16
 80076d2:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	333c      	adds	r3, #60	@ 0x3c
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fa faae 	bl	8001c3a <lfs_gstate_hasmove>
 80076de:	4603      	mov	r3, r0
 80076e0:	f083 0301 	eor.w	r3, r3, #1
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <lfs_fs_demove+0x22>
        return 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	e05b      	b.n	80077a6 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fa fa0e 	bl	8001b1c <lfs_tag_id>
 8007700:	4603      	mov	r3, r0
 8007702:	461a      	mov	r2, r3
 8007704:	4b2a      	ldr	r3, [pc, #168]	@ (80077b0 <lfs_fs_demove+0xe4>)
 8007706:	9302      	str	r3, [sp, #8]
 8007708:	9201      	str	r2, [sp, #4]
 800770a:	9400      	str	r4, [sp, #0]
 800770c:	462b      	mov	r3, r5
 800770e:	f241 325c 	movw	r2, #4956	@ 0x135c
 8007712:	4928      	ldr	r1, [pc, #160]	@ (80077b4 <lfs_fs_demove+0xe8>)
 8007714:	4828      	ldr	r0, [pc, #160]	@ (80077b8 <lfs_fs_demove+0xec>)
 8007716:	f005 fc11 	bl	800cf3c <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800771e:	4618      	mov	r0, r3
 8007720:	f7fa f9d2 	bl	8001ac8 <lfs_tag_type3>
 8007724:	4603      	mov	r3, r0
 8007726:	461a      	mov	r2, r3
 8007728:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800772c:	429a      	cmp	r2, r3
 800772e:	d006      	beq.n	800773e <lfs_fs_demove+0x72>
 8007730:	4b22      	ldr	r3, [pc, #136]	@ (80077bc <lfs_fs_demove+0xf0>)
 8007732:	4a23      	ldr	r2, [pc, #140]	@ (80077c0 <lfs_fs_demove+0xf4>)
 8007734:	f241 3163 	movw	r1, #4963	@ 0x1363
 8007738:	481e      	ldr	r0, [pc, #120]	@ (80077b4 <lfs_fs_demove+0xe8>)
 800773a:	f005 fa4f 	bl	800cbdc <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8007744:	f107 0318 	add.w	r3, r7, #24
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7fb ff62 	bl	8003614 <lfs_dir_fetch>
 8007750:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 8007752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <lfs_fs_demove+0x90>
        return err;
 8007758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800775a:	e024      	b.n	80077a6 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007760:	4618      	mov	r0, r3
 8007762:	f7fa f9db 	bl	8001b1c <lfs_tag_id>
 8007766:	4603      	mov	r3, r0
 8007768:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800776a:	2200      	movs	r2, #0
 800776c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff ff05 	bl	8007580 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8007776:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007778:	029b      	lsls	r3, r3, #10
 800777a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800777e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8007782:	613b      	str	r3, [r7, #16]
 8007784:	2300      	movs	r3, #0
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	f107 0210 	add.w	r2, r7, #16
 800778c:	f107 0118 	add.w	r1, r7, #24
 8007790:	2301      	movs	r3, #1
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7fd fcee 	bl	8005174 <lfs_dir_commit>
 8007798:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800779a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <lfs_fs_demove+0xd8>
        return err;
 80077a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077a2:	e000      	b.n	80077a6 <lfs_fs_demove+0xda>
    }

    return 0;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3740      	adds	r7, #64	@ 0x40
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bdb0      	pop	{r4, r5, r7, pc}
 80077ae:	bf00      	nop
 80077b0:	0800dda8 	.word	0x0800dda8
 80077b4:	0800dc74 	.word	0x0800dc74
 80077b8:	0800e854 	.word	0x0800e854
 80077bc:	0800e888 	.word	0x0800e888
 80077c0:	0800eb34 	.word	0x0800eb34

080077c4 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 80077c4:	b5b0      	push	{r4, r5, r7, lr}
 80077c6:	b0b2      	sub	sp, #200	@ 0xc8
 80077c8:	af04      	add	r7, sp, #16
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3330      	adds	r3, #48	@ 0x30
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fa fa0e 	bl	8001bf6 <lfs_gstate_hasorphans>
 80077da:	4603      	mov	r3, r0
 80077dc:	f083 0301 	eor.w	r3, r3, #1
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <lfs_fs_deorphan+0x26>
        return 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	e188      	b.n	8007afc <lfs_fs_deorphan+0x338>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 80077f0:	e171      	b.n	8007ad6 <lfs_fs_deorphan+0x312>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80077f2:	f107 0308 	add.w	r3, r7, #8
 80077f6:	2220      	movs	r2, #32
 80077f8:	2100      	movs	r1, #0
 80077fa:	4618      	mov	r0, r3
 80077fc:	f005 fc03 	bl	800d006 <memset>
 8007800:	2301      	movs	r3, #1
 8007802:	77fb      	strb	r3, [r7, #31]
 8007804:	2301      	movs	r3, #1
 8007806:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8007808:	2300      	movs	r3, #0
 800780a:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800780e:	e14a      	b.n	8007aa6 <lfs_fs_deorphan+0x2e2>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8007810:	f107 0308 	add.w	r3, r7, #8
 8007814:	f103 0218 	add.w	r2, r3, #24
 8007818:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7fb fef8 	bl	8003614 <lfs_dir_fetch>
 8007824:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 8007828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <lfs_fs_deorphan+0x72>
                return err;
 8007830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007834:	e162      	b.n	8007afc <lfs_fs_deorphan+0x338>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8007836:	7ffb      	ldrb	r3, [r7, #31]
 8007838:	f083 0301 	eor.w	r3, r3, #1
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 8125 	beq.w	8007a8e <lfs_fs_deorphan+0x2ca>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8007844:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8007848:	f107 0308 	add.w	r3, r7, #8
 800784c:	3318      	adds	r3, #24
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff fdd1 	bl	80073f8 <lfs_fs_parent>
 8007856:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800785a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800785e:	2b00      	cmp	r3, #0
 8007860:	da07      	bge.n	8007872 <lfs_fs_deorphan+0xae>
 8007862:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007866:	f113 0f02 	cmn.w	r3, #2
 800786a:	d002      	beq.n	8007872 <lfs_fs_deorphan+0xae>
                    return tag;
 800786c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007870:	e10c      	b.n	8007a8c <lfs_fs_deorphan+0x2c8>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8007872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007876:	2b00      	cmp	r3, #0
 8007878:	f040 80ac 	bne.w	80079d4 <lfs_fs_deorphan+0x210>
 800787c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007880:	f113 0f02 	cmn.w	r3, #2
 8007884:	f000 80a6 	beq.w	80079d4 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8007888:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800788c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8007890:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	4613      	mov	r3, r2
 8007898:	4a9a      	ldr	r2, [pc, #616]	@ (8007b04 <lfs_fs_deorphan+0x340>)
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7fa fdb4 	bl	8002408 <lfs_dir_get>
 80078a0:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 80078a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	da02      	bge.n	80078b2 <lfs_fs_deorphan+0xee>
                        return state;
 80078ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                    return tag;
 80078b0:	e124      	b.n	8007afc <lfs_fs_deorphan+0x338>
                    }
                    lfs_pair_fromle32(pair);
 80078b2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fa f891 	bl	80019de <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 80078bc:	f107 0308 	add.w	r3, r7, #8
 80078c0:	f103 0218 	add.w	r2, r3, #24
 80078c4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80078c8:	4611      	mov	r1, r2
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fa f85a 	bl	8001984 <lfs_pair_issync>
 80078d0:	4603      	mov	r3, r0
 80078d2:	f083 0301 	eor.w	r3, r3, #1
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d07b      	beq.n	80079d4 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 80078dc:	6a38      	ldr	r0, [r7, #32]
 80078de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80078e4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80078e8:	4c87      	ldr	r4, [pc, #540]	@ (8007b08 <lfs_fs_deorphan+0x344>)
 80078ea:	9403      	str	r4, [sp, #12]
 80078ec:	9102      	str	r1, [sp, #8]
 80078ee:	9201      	str	r2, [sp, #4]
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	4603      	mov	r3, r0
 80078f4:	f241 32a9 	movw	r2, #5033	@ 0x13a9
 80078f8:	4984      	ldr	r1, [pc, #528]	@ (8007b0c <lfs_fs_deorphan+0x348>)
 80078fa:	4885      	ldr	r0, [pc, #532]	@ (8007b10 <lfs_fs_deorphan+0x34c>)
 80078fc:	f005 fb1e 	bl	800cf3c <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8007900:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8007904:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3330      	adds	r3, #48	@ 0x30
 800790c:	f107 0208 	add.w	r2, r7, #8
 8007910:	4611      	mov	r1, r2
 8007912:	4618      	mov	r0, r3
 8007914:	f7fa f9b8 	bl	8001c88 <lfs_gstate_hasmovehere>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d01c      	beq.n	8007958 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007922:	4618      	mov	r0, r3
 8007924:	f7fa f8fa 	bl	8001b1c <lfs_tag_id>
 8007928:	4603      	mov	r3, r0
 800792a:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 800792e:	68b9      	ldr	r1, [r7, #8]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8007936:	4874      	ldr	r0, [pc, #464]	@ (8007b08 <lfs_fs_deorphan+0x344>)
 8007938:	9002      	str	r0, [sp, #8]
 800793a:	9201      	str	r2, [sp, #4]
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	460b      	mov	r3, r1
 8007940:	f241 32b4 	movw	r2, #5044	@ 0x13b4
 8007944:	4971      	ldr	r1, [pc, #452]	@ (8007b0c <lfs_fs_deorphan+0x348>)
 8007946:	4873      	ldr	r0, [pc, #460]	@ (8007b14 <lfs_fs_deorphan+0x350>)
 8007948:	f005 faf8 	bl	800cf3c <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800794c:	2200      	movs	r2, #0
 800794e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7ff fe14 	bl	8007580 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8007958:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800795c:	4618      	mov	r0, r3
 800795e:	f7fa f858 	bl	8001a12 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8007962:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8007966:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800796a:	4293      	cmp	r3, r2
 800796c:	d007      	beq.n	800797e <lfs_fs_deorphan+0x1ba>
 800796e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8007972:	029b      	lsls	r3, r3, #10
 8007974:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8007978:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800797c:	e000      	b.n	8007980 <lfs_fs_deorphan+0x1bc>
 800797e:	2300      	movs	r3, #0
 8007980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007984:	2300      	movs	r3, #0
 8007986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800798a:	4b63      	ldr	r3, [pc, #396]	@ (8007b18 <lfs_fs_deorphan+0x354>)
 800798c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007990:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8007994:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007998:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800799c:	f107 0108 	add.w	r1, r7, #8
 80079a0:	2302      	movs	r3, #2
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7fd f8ec 	bl	8004b80 <lfs_dir_orphaningcommit>
 80079a8:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 80079ac:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fa f814 	bl	80019de <lfs_pair_fromle32>
                        if (state < 0) {
 80079b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	da02      	bge.n	80079c4 <lfs_fs_deorphan+0x200>
                            return state;
 80079be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 80079c2:	e063      	b.n	8007a8c <lfs_fs_deorphan+0x2c8>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 80079c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d16c      	bne.n	8007aa6 <lfs_fs_deorphan+0x2e2>
                            moreorphans = true;
 80079cc:	2301      	movs	r3, #1
 80079ce:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80079d2:	e068      	b.n	8007aa6 <lfs_fs_deorphan+0x2e2>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 80079d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d158      	bne.n	8007a8e <lfs_fs_deorphan+0x2ca>
 80079dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079e0:	f113 0f02 	cmn.w	r3, #2
 80079e4:	d153      	bne.n	8007a8e <lfs_fs_deorphan+0x2ca>
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d050      	beq.n	8007a8e <lfs_fs_deorphan+0x2ca>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80079ec:	6a3a      	ldr	r2, [r7, #32]
 80079ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f0:	4945      	ldr	r1, [pc, #276]	@ (8007b08 <lfs_fs_deorphan+0x344>)
 80079f2:	9101      	str	r1, [sp, #4]
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	4613      	mov	r3, r2
 80079f8:	f241 32d4 	movw	r2, #5076	@ 0x13d4
 80079fc:	4943      	ldr	r1, [pc, #268]	@ (8007b0c <lfs_fs_deorphan+0x348>)
 80079fe:	4847      	ldr	r0, [pc, #284]	@ (8007b1c <lfs_fs_deorphan+0x358>)
 8007a00:	f005 fa9c 	bl	800cf3c <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8007a0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7fb fe1b 	bl	800364c <lfs_dir_getgstate>
 8007a16:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 8007a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <lfs_fs_deorphan+0x264>
                        return err;
 8007a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a26:	e030      	b.n	8007a8a <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8007a28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007a2c:	3318      	adds	r3, #24
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7f9 ffef 	bl	8001a12 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8007a34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a38:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8007a3c:	051a      	lsls	r2, r3, #20
 8007a3e:	4b38      	ldr	r3, [pc, #224]	@ (8007b20 <lfs_fs_deorphan+0x35c>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007a48:	3318      	adds	r3, #24
 8007a4a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a4c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8007a50:	f107 0108 	add.w	r1, r7, #8
 8007a54:	2301      	movs	r3, #1
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7fd f892 	bl	8004b80 <lfs_dir_orphaningcommit>
 8007a5c:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8007a60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007a64:	3318      	adds	r3, #24
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7f9 ffb9 	bl	80019de <lfs_pair_fromle32>
                    if (state < 0) {
 8007a6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	da02      	bge.n	8007a7a <lfs_fs_deorphan+0x2b6>
                        return state;
 8007a74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a78:	e007      	b.n	8007a8a <lfs_fs_deorphan+0x2c6>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8007a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	d110      	bne.n	8007aa4 <lfs_fs_deorphan+0x2e0>
                        moreorphans = true;
 8007a82:	2301      	movs	r3, #1
 8007a84:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8007a88:	e00d      	b.n	8007aa6 <lfs_fs_deorphan+0x2e2>
                    return tag;
 8007a8a:	e037      	b.n	8007afc <lfs_fs_deorphan+0x338>
                return err;
 8007a8c:	e036      	b.n	8007afc <lfs_fs_deorphan+0x338>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 8007a8e:	f107 0408 	add.w	r4, r7, #8
 8007a92:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8007a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007a9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007aa2:	e000      	b.n	8007aa6 <lfs_fs_deorphan+0x2e2>
                    continue;
 8007aa4:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 8007aa6:	f107 0308 	add.w	r3, r7, #8
 8007aaa:	3318      	adds	r3, #24
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7f9 ff24 	bl	80018fa <lfs_pair_isnull>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f083 0301 	eor.w	r3, r3, #1
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f47f aea8 	bne.w	8007810 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8007ac0:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <lfs_fs_deorphan+0x308>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	e002      	b.n	8007ad2 <lfs_fs_deorphan+0x30e>
 8007acc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 8007ad6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	f77f ae89 	ble.w	80077f2 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3330      	adds	r3, #48	@ 0x30
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fa f899 	bl	8001c1c <lfs_gstate_getorphans>
 8007aea:	4603      	mov	r3, r0
 8007aec:	425b      	negs	r3, r3
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	b25b      	sxtb	r3, r3
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff fcf3 	bl	80074e0 <lfs_fs_preporphans>
 8007afa:	4603      	mov	r3, r0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	37b8      	adds	r7, #184	@ 0xb8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bdb0      	pop	{r4, r5, r7, pc}
 8007b04:	7ffffc00 	.word	0x7ffffc00
 8007b08:	0800dda8 	.word	0x0800dda8
 8007b0c:	0800dc74 	.word	0x0800dc74
 8007b10:	0800e8bc 	.word	0x0800e8bc
 8007b14:	0800e900 	.word	0x0800e900
 8007b18:	600ffc08 	.word	0x600ffc08
 8007b1c:	0800e948 	.word	0x0800e948
 8007b20:	000ffc08 	.word	0x000ffc08

08007b24 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff fd61 	bl	80075f4 <lfs_fs_desuperblock>
 8007b32:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <lfs_fs_forceconsistency+0x1a>
        return err;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	e013      	b.n	8007b66 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff fdc4 	bl	80076cc <lfs_fs_demove>
 8007b44:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <lfs_fs_forceconsistency+0x2c>
        return err;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	e00a      	b.n	8007b66 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8007b50:	2101      	movs	r1, #1
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff fe36 	bl	80077c4 <lfs_fs_deorphan>
 8007b58:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <lfs_fs_forceconsistency+0x40>
        return err;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	e000      	b.n	8007b66 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8007b6e:	b480      	push	{r7}
 8007b70:	b085      	sub	sp, #20
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	601a      	str	r2, [r3, #0]
    return 0;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 8007ba0:	f107 0208 	add.w	r2, r7, #8
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	4907      	ldr	r1, [pc, #28]	@ (8007bc4 <lfs_fs_size_+0x30>)
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7ff fa65 	bl	8007078 <lfs_fs_traverse_>
 8007bae:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <lfs_fs_size_+0x26>
        return err;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	e000      	b.n	8007bbc <lfs_fs_size_+0x28>
    }

    return size;
 8007bba:	68bb      	ldr	r3, [r7, #8]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	08007b6f 	.word	0x08007b6f

08007bc8 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <lfs_format+0x18>
        return err;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	e005      	b.n	8007bec <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7fe ff48 	bl	8006a78 <lfs_format_>
 8007be8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8007bea:	68fb      	ldr	r3, [r7, #12]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <lfs_mount+0x18>
        return err;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	e005      	b.n	8007c18 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff f824 	bl	8006c5c <lfs_mount_>
 8007c14:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8007c16:	68fb      	ldr	r3, [r7, #12]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007c2e:	2300      	movs	r3, #0
 8007c30:	617b      	str	r3, [r7, #20]
    if (err) {
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <lfs_file_open+0x1c>
        return err;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	e01a      	b.n	8007c72 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, (unsigned)flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c40:	68b9      	ldr	r1, [r7, #8]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fa f950 	bl	8001ee8 <lfs_mlist_isopen>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	f083 0301 	eor.w	r3, r3, #1
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d106      	bne.n	8007c62 <lfs_file_open+0x42>
 8007c54:	4b09      	ldr	r3, [pc, #36]	@ (8007c7c <lfs_file_open+0x5c>)
 8007c56:	4a0a      	ldr	r2, [pc, #40]	@ (8007c80 <lfs_file_open+0x60>)
 8007c58:	f241 71e5 	movw	r1, #6117	@ 0x17e5
 8007c5c:	4809      	ldr	r0, [pc, #36]	@ (8007c84 <lfs_file_open+0x64>)
 8007c5e:	f004 ffbd 	bl	800cbdc <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f7fd feb1 	bl	80059d0 <lfs_file_open_>
 8007c6e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007c70:	697b      	ldr	r3, [r7, #20]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	0800e998 	.word	0x0800e998
 8007c80:	0800eb44 	.word	0x0800eb44
 8007c84:	0800dc74 	.word	0x0800dc74

08007c88 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007c92:	2300      	movs	r3, #0
 8007c94:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <lfs_file_close+0x18>
        return err;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	e015      	b.n	8007ccc <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fa f91e 	bl	8001ee8 <lfs_mlist_isopen>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d106      	bne.n	8007cc0 <lfs_file_close+0x38>
 8007cb2:	4b08      	ldr	r3, [pc, #32]	@ (8007cd4 <lfs_file_close+0x4c>)
 8007cb4:	4a08      	ldr	r2, [pc, #32]	@ (8007cd8 <lfs_file_close+0x50>)
 8007cb6:	f641 0109 	movw	r1, #6153	@ 0x1809
 8007cba:	4808      	ldr	r0, [pc, #32]	@ (8007cdc <lfs_file_close+0x54>)
 8007cbc:	f004 ff8e 	bl	800cbdc <__assert_func>

    err = lfs_file_close_(lfs, file);
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7fd fe9c 	bl	8005a00 <lfs_file_close_>
 8007cc8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007cca:	68fb      	ldr	r3, [r7, #12]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	0800e9d0 	.word	0x0800e9d0
 8007cd8:	0800eb54 	.word	0x0800eb54
 8007cdc:	0800dc74 	.word	0x0800dc74

08007ce0 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007cee:	2300      	movs	r3, #0
 8007cf0:	617b      	str	r3, [r7, #20]
    if (err) {
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <lfs_file_read+0x1c>
        return err;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	e017      	b.n	8007d2c <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d00:	68b9      	ldr	r1, [r7, #8]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fa f8f0 	bl	8001ee8 <lfs_mlist_isopen>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d106      	bne.n	8007d1c <lfs_file_read+0x3c>
 8007d0e:	4b09      	ldr	r3, [pc, #36]	@ (8007d34 <lfs_file_read+0x54>)
 8007d10:	4a09      	ldr	r2, [pc, #36]	@ (8007d38 <lfs_file_read+0x58>)
 8007d12:	f641 012b 	movw	r1, #6187	@ 0x182b
 8007d16:	4809      	ldr	r0, [pc, #36]	@ (8007d3c <lfs_file_read+0x5c>)
 8007d18:	f004 ff60 	bl	800cbdc <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	68b9      	ldr	r1, [r7, #8]
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7fe f9cc 	bl	80060c0 <lfs_file_read_>
 8007d28:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007d2a:	693b      	ldr	r3, [r7, #16]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	0800e9d0 	.word	0x0800e9d0
 8007d38:	0800eb64 	.word	0x0800eb64
 8007d3c:	0800dc74 	.word	0x0800dc74

08007d40 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007d4e:	2300      	movs	r3, #0
 8007d50:	617b      	str	r3, [r7, #20]
    if (err) {
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <lfs_file_write+0x1c>
        return err;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	e017      	b.n	8007d8c <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fa f8c0 	bl	8001ee8 <lfs_mlist_isopen>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d106      	bne.n	8007d7c <lfs_file_write+0x3c>
 8007d6e:	4b09      	ldr	r3, [pc, #36]	@ (8007d94 <lfs_file_write+0x54>)
 8007d70:	4a09      	ldr	r2, [pc, #36]	@ (8007d98 <lfs_file_write+0x58>)
 8007d72:	f641 013d 	movw	r1, #6205	@ 0x183d
 8007d76:	4809      	ldr	r0, [pc, #36]	@ (8007d9c <lfs_file_write+0x5c>)
 8007d78:	f004 ff30 	bl	800cbdc <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	68b9      	ldr	r1, [r7, #8]
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f7fe fae2 	bl	800634c <lfs_file_write_>
 8007d88:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007d8a:	693b      	ldr	r3, [r7, #16]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	0800e9d0 	.word	0x0800e9d0
 8007d98:	0800eb74 	.word	0x0800eb74
 8007d9c:	0800dc74 	.word	0x0800dc74

08007da0 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8007db0:	2300      	movs	r3, #0
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	e024      	b.n	8007e00 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	091a      	lsrs	r2, r3, #4
 8007dba:	6939      	ldr	r1, [r7, #16]
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	440b      	add	r3, r1
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	404b      	eors	r3, r1
 8007dc8:	f003 030f 	and.w	r3, r3, #15
 8007dcc:	4912      	ldr	r1, [pc, #72]	@ (8007e18 <lfs_crc+0x78>)
 8007dce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007dd2:	4053      	eors	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	091a      	lsrs	r2, r3, #4
 8007dda:	6939      	ldr	r1, [r7, #16]
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	440b      	add	r3, r1
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	091b      	lsrs	r3, r3, #4
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	4619      	mov	r1, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	404b      	eors	r3, r1
 8007dec:	f003 030f 	and.w	r3, r3, #15
 8007df0:	4909      	ldr	r1, [pc, #36]	@ (8007e18 <lfs_crc+0x78>)
 8007df2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007df6:	4053      	eors	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d3d6      	bcc.n	8007db6 <lfs_crc+0x16>
    }

    return crc;
 8007e08:	68fb      	ldr	r3, [r7, #12]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	371c      	adds	r7, #28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	0800eb84 	.word	0x0800eb84

08007e1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007e22:	4b35      	ldr	r3, [pc, #212]	@ (8007ef8 <SystemInit+0xdc>)
 8007e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e28:	4a33      	ldr	r2, [pc, #204]	@ (8007ef8 <SystemInit+0xdc>)
 8007e2a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007e2e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8007e32:	4b32      	ldr	r3, [pc, #200]	@ (8007efc <SystemInit+0xe0>)
 8007e34:	2201      	movs	r2, #1
 8007e36:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8007e38:	4b30      	ldr	r3, [pc, #192]	@ (8007efc <SystemInit+0xe0>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8007e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8007efc <SystemInit+0xe0>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8007e44:	4b2d      	ldr	r3, [pc, #180]	@ (8007efc <SystemInit+0xe0>)
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	492c      	ldr	r1, [pc, #176]	@ (8007efc <SystemInit+0xe0>)
 8007e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8007f00 <SystemInit+0xe4>)
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8007e50:	4b2a      	ldr	r3, [pc, #168]	@ (8007efc <SystemInit+0xe0>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8007e56:	4b29      	ldr	r3, [pc, #164]	@ (8007efc <SystemInit+0xe0>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8007e5c:	4b27      	ldr	r3, [pc, #156]	@ (8007efc <SystemInit+0xe0>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8007e62:	4b26      	ldr	r3, [pc, #152]	@ (8007efc <SystemInit+0xe0>)
 8007e64:	4a27      	ldr	r2, [pc, #156]	@ (8007f04 <SystemInit+0xe8>)
 8007e66:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8007e68:	4b24      	ldr	r3, [pc, #144]	@ (8007efc <SystemInit+0xe0>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8007e6e:	4b23      	ldr	r3, [pc, #140]	@ (8007efc <SystemInit+0xe0>)
 8007e70:	4a24      	ldr	r2, [pc, #144]	@ (8007f04 <SystemInit+0xe8>)
 8007e72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8007e74:	4b21      	ldr	r3, [pc, #132]	@ (8007efc <SystemInit+0xe0>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8007e7a:	4b20      	ldr	r3, [pc, #128]	@ (8007efc <SystemInit+0xe0>)
 8007e7c:	4a21      	ldr	r2, [pc, #132]	@ (8007f04 <SystemInit+0xe8>)
 8007e7e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8007e80:	4b1e      	ldr	r3, [pc, #120]	@ (8007efc <SystemInit+0xe0>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8007e86:	4b1d      	ldr	r3, [pc, #116]	@ (8007efc <SystemInit+0xe0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8007efc <SystemInit+0xe0>)
 8007e8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8007e92:	4b1a      	ldr	r3, [pc, #104]	@ (8007efc <SystemInit+0xe0>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007e98:	4b17      	ldr	r3, [pc, #92]	@ (8007ef8 <SystemInit+0xdc>)
 8007e9a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007e9e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8007ea0:	4b19      	ldr	r3, [pc, #100]	@ (8007f08 <SystemInit+0xec>)
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8007ea8:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8007eb0:	d003      	beq.n	8007eba <SystemInit+0x9e>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007eb8:	d117      	bne.n	8007eea <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8007eba:	4b13      	ldr	r3, [pc, #76]	@ (8007f08 <SystemInit+0xec>)
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8007ec6:	4b10      	ldr	r3, [pc, #64]	@ (8007f08 <SystemInit+0xec>)
 8007ec8:	4a10      	ldr	r2, [pc, #64]	@ (8007f0c <SystemInit+0xf0>)
 8007eca:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8007ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8007f08 <SystemInit+0xec>)
 8007ece:	4a10      	ldr	r2, [pc, #64]	@ (8007f10 <SystemInit+0xf4>)
 8007ed0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8007ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8007f08 <SystemInit+0xec>)
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8007f08 <SystemInit+0xec>)
 8007ed8:	f043 0302 	orr.w	r3, r3, #2
 8007edc:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8007ede:	4b0a      	ldr	r3, [pc, #40]	@ (8007f08 <SystemInit+0xec>)
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	4a09      	ldr	r2, [pc, #36]	@ (8007f08 <SystemInit+0xec>)
 8007ee4:	f043 0301 	orr.w	r3, r3, #1
 8007ee8:	61d3      	str	r3, [r2, #28]
  }
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	e000ed00 	.word	0xe000ed00
 8007efc:	44020c00 	.word	0x44020c00
 8007f00:	eae2eae3 	.word	0xeae2eae3
 8007f04:	01010280 	.word	0x01010280
 8007f08:	40022000 	.word	0x40022000
 8007f0c:	08192a3b 	.word	0x08192a3b
 8007f10:	4c5d6e7f 	.word	0x4c5d6e7f

08007f14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007f18:	2003      	movs	r0, #3
 8007f1a:	f000 f98a 	bl	8008232 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007f1e:	f001 fe0f 	bl	8009b40 <HAL_RCC_GetSysClockFreq>
 8007f22:	4602      	mov	r2, r0
 8007f24:	4b0c      	ldr	r3, [pc, #48]	@ (8007f58 <HAL_Init+0x44>)
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	f003 030f 	and.w	r3, r3, #15
 8007f2c:	490b      	ldr	r1, [pc, #44]	@ (8007f5c <HAL_Init+0x48>)
 8007f2e:	5ccb      	ldrb	r3, [r1, r3]
 8007f30:	fa22 f303 	lsr.w	r3, r2, r3
 8007f34:	4a0a      	ldr	r2, [pc, #40]	@ (8007f60 <HAL_Init+0x4c>)
 8007f36:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007f38:	2004      	movs	r0, #4
 8007f3a:	f000 f9cf 	bl	80082dc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007f3e:	200f      	movs	r0, #15
 8007f40:	f000 f810 	bl	8007f64 <HAL_InitTick>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e002      	b.n	8007f54 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007f4e:	f7f8 fc5f 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	44020c00 	.word	0x44020c00
 8007f5c:	0800ebc4 	.word	0x0800ebc4
 8007f60:	20000054 	.word	0x20000054

08007f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8007f70:	4b33      	ldr	r3, [pc, #204]	@ (8008040 <HAL_InitTick+0xdc>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e05c      	b.n	8008036 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8007f7c:	4b31      	ldr	r3, [pc, #196]	@ (8008044 <HAL_InitTick+0xe0>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d10c      	bne.n	8007fa2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8007f88:	4b2f      	ldr	r3, [pc, #188]	@ (8008048 <HAL_InitTick+0xe4>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8008040 <HAL_InitTick+0xdc>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	4619      	mov	r1, r3
 8007f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	e037      	b.n	8008012 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8007fa2:	f000 f9f3 	bl	800838c <HAL_SYSTICK_GetCLKSourceConfig>
 8007fa6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d023      	beq.n	8007ff6 <HAL_InitTick+0x92>
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d82d      	bhi.n	8008010 <HAL_InitTick+0xac>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_InitTick+0x5e>
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d00d      	beq.n	8007fdc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8007fc0:	e026      	b.n	8008010 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8007fc2:	4b21      	ldr	r3, [pc, #132]	@ (8008048 <HAL_InitTick+0xe4>)
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8008040 <HAL_InitTick+0xdc>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8007fd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd8:	60fb      	str	r3, [r7, #12]
        break;
 8007fda:	e01a      	b.n	8008012 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8007fdc:	4b18      	ldr	r3, [pc, #96]	@ (8008040 <HAL_InitTick+0xdc>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fea:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8007fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff2:	60fb      	str	r3, [r7, #12]
        break;
 8007ff4:	e00d      	b.n	8008012 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8007ff6:	4b12      	ldr	r3, [pc, #72]	@ (8008040 <HAL_InitTick+0xdc>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008000:	fbb3 f3f2 	udiv	r3, r3, r2
 8008004:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008008:	fbb2 f3f3 	udiv	r3, r2, r3
 800800c:	60fb      	str	r3, [r7, #12]
        break;
 800800e:	e000      	b.n	8008012 <HAL_InitTick+0xae>
        break;
 8008010:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 f940 	bl	8008298 <HAL_SYSTICK_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e009      	b.n	8008036 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008022:	2200      	movs	r2, #0
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	f04f 30ff 	mov.w	r0, #4294967295
 800802a:	f000 f90d 	bl	8008248 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800802e:	4a07      	ldr	r2, [pc, #28]	@ (800804c <HAL_InitTick+0xe8>)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	2000005c 	.word	0x2000005c
 8008044:	e000e010 	.word	0xe000e010
 8008048:	20000054 	.word	0x20000054
 800804c:	20000058 	.word	0x20000058

08008050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008054:	4b06      	ldr	r3, [pc, #24]	@ (8008070 <HAL_IncTick+0x20>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	461a      	mov	r2, r3
 800805a:	4b06      	ldr	r3, [pc, #24]	@ (8008074 <HAL_IncTick+0x24>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4413      	add	r3, r2
 8008060:	4a04      	ldr	r2, [pc, #16]	@ (8008074 <HAL_IncTick+0x24>)
 8008062:	6013      	str	r3, [r2, #0]
}
 8008064:	bf00      	nop
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	2000005c 	.word	0x2000005c
 8008074:	200002a8 	.word	0x200002a8

08008078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008078:	b480      	push	{r7}
 800807a:	af00      	add	r7, sp, #0
  return uwTick;
 800807c:	4b03      	ldr	r3, [pc, #12]	@ (800808c <HAL_GetTick+0x14>)
 800807e:	681b      	ldr	r3, [r3, #0]
}
 8008080:	4618      	mov	r0, r3
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	200002a8 	.word	0x200002a8

08008090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008098:	f7ff ffee 	bl	8008078 <HAL_GetTick>
 800809c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a8:	d005      	beq.n	80080b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80080aa:	4b0a      	ldr	r3, [pc, #40]	@ (80080d4 <HAL_Delay+0x44>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4413      	add	r3, r2
 80080b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80080b6:	bf00      	nop
 80080b8:	f7ff ffde 	bl	8008078 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d8f7      	bhi.n	80080b8 <HAL_Delay+0x28>
  {
  }
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	2000005c 	.word	0x2000005c

080080d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f003 0307 	and.w	r3, r3, #7
 80080e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80080e8:	4b0c      	ldr	r3, [pc, #48]	@ (800811c <__NVIC_SetPriorityGrouping+0x44>)
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80080f4:	4013      	ands	r3, r2
 80080f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800810a:	4a04      	ldr	r2, [pc, #16]	@ (800811c <__NVIC_SetPriorityGrouping+0x44>)
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	60d3      	str	r3, [r2, #12]
}
 8008110:	bf00      	nop
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	e000ed00 	.word	0xe000ed00

08008120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008120:	b480      	push	{r7}
 8008122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008124:	4b04      	ldr	r3, [pc, #16]	@ (8008138 <__NVIC_GetPriorityGrouping+0x18>)
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	0a1b      	lsrs	r3, r3, #8
 800812a:	f003 0307 	and.w	r3, r3, #7
}
 800812e:	4618      	mov	r0, r3
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	e000ed00 	.word	0xe000ed00

0800813c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	4603      	mov	r3, r0
 8008144:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800814a:	2b00      	cmp	r3, #0
 800814c:	db0b      	blt.n	8008166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800814e:	88fb      	ldrh	r3, [r7, #6]
 8008150:	f003 021f 	and.w	r2, r3, #31
 8008154:	4907      	ldr	r1, [pc, #28]	@ (8008174 <__NVIC_EnableIRQ+0x38>)
 8008156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800815a:	095b      	lsrs	r3, r3, #5
 800815c:	2001      	movs	r0, #1
 800815e:	fa00 f202 	lsl.w	r2, r0, r2
 8008162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	e000e100 	.word	0xe000e100

08008178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	4603      	mov	r3, r0
 8008180:	6039      	str	r1, [r7, #0]
 8008182:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008188:	2b00      	cmp	r3, #0
 800818a:	db0a      	blt.n	80081a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	b2da      	uxtb	r2, r3
 8008190:	490c      	ldr	r1, [pc, #48]	@ (80081c4 <__NVIC_SetPriority+0x4c>)
 8008192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008196:	0112      	lsls	r2, r2, #4
 8008198:	b2d2      	uxtb	r2, r2
 800819a:	440b      	add	r3, r1
 800819c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80081a0:	e00a      	b.n	80081b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	4908      	ldr	r1, [pc, #32]	@ (80081c8 <__NVIC_SetPriority+0x50>)
 80081a8:	88fb      	ldrh	r3, [r7, #6]
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	3b04      	subs	r3, #4
 80081b0:	0112      	lsls	r2, r2, #4
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	440b      	add	r3, r1
 80081b6:	761a      	strb	r2, [r3, #24]
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	e000e100 	.word	0xe000e100
 80081c8:	e000ed00 	.word	0xe000ed00

080081cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b089      	sub	sp, #36	@ 0x24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f003 0307 	and.w	r3, r3, #7
 80081de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	f1c3 0307 	rsb	r3, r3, #7
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	bf28      	it	cs
 80081ea:	2304      	movcs	r3, #4
 80081ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	3304      	adds	r3, #4
 80081f2:	2b06      	cmp	r3, #6
 80081f4:	d902      	bls.n	80081fc <NVIC_EncodePriority+0x30>
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	3b03      	subs	r3, #3
 80081fa:	e000      	b.n	80081fe <NVIC_EncodePriority+0x32>
 80081fc:	2300      	movs	r3, #0
 80081fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008200:	f04f 32ff 	mov.w	r2, #4294967295
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	fa02 f303 	lsl.w	r3, r2, r3
 800820a:	43da      	mvns	r2, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	401a      	ands	r2, r3
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008214:	f04f 31ff 	mov.w	r1, #4294967295
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	fa01 f303 	lsl.w	r3, r1, r3
 800821e:	43d9      	mvns	r1, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008224:	4313      	orrs	r3, r2
         );
}
 8008226:	4618      	mov	r0, r3
 8008228:	3724      	adds	r7, #36	@ 0x24
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7ff ff4c 	bl	80080d8 <__NVIC_SetPriorityGrouping>
}
 8008240:	bf00      	nop
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	4603      	mov	r3, r0
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008256:	f7ff ff63 	bl	8008120 <__NVIC_GetPriorityGrouping>
 800825a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	68b9      	ldr	r1, [r7, #8]
 8008260:	6978      	ldr	r0, [r7, #20]
 8008262:	f7ff ffb3 	bl	80081cc <NVIC_EncodePriority>
 8008266:	4602      	mov	r2, r0
 8008268:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800826c:	4611      	mov	r1, r2
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff ff82 	bl	8008178 <__NVIC_SetPriority>
}
 8008274:	bf00      	nop
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff ff56 	bl	800813c <__NVIC_EnableIRQ>
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082a8:	d301      	bcc.n	80082ae <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80082aa:	2301      	movs	r3, #1
 80082ac:	e00d      	b.n	80082ca <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80082ae:	4a0a      	ldr	r2, [pc, #40]	@ (80082d8 <HAL_SYSTICK_Config+0x40>)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3b01      	subs	r3, #1
 80082b4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80082b6:	4b08      	ldr	r3, [pc, #32]	@ (80082d8 <HAL_SYSTICK_Config+0x40>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80082bc:	4b06      	ldr	r3, [pc, #24]	@ (80082d8 <HAL_SYSTICK_Config+0x40>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a05      	ldr	r2, [pc, #20]	@ (80082d8 <HAL_SYSTICK_Config+0x40>)
 80082c2:	f043 0303 	orr.w	r3, r3, #3
 80082c6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	e000e010 	.word	0xe000e010

080082dc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d844      	bhi.n	8008374 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80082ea:	a201      	add	r2, pc, #4	@ (adr r2, 80082f0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f0:	08008313 	.word	0x08008313
 80082f4:	08008331 	.word	0x08008331
 80082f8:	08008353 	.word	0x08008353
 80082fc:	08008375 	.word	0x08008375
 8008300:	08008305 	.word	0x08008305
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8008304:	4b1f      	ldr	r3, [pc, #124]	@ (8008384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a1e      	ldr	r2, [pc, #120]	@ (8008384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800830a:	f043 0304 	orr.w	r3, r3, #4
 800830e:	6013      	str	r3, [r2, #0]
      break;
 8008310:	e031      	b.n	8008376 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8008312:	4b1c      	ldr	r3, [pc, #112]	@ (8008384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a1b      	ldr	r2, [pc, #108]	@ (8008384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008318:	f023 0304 	bic.w	r3, r3, #4
 800831c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800831e:	4b1a      	ldr	r3, [pc, #104]	@ (8008388 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008320:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008324:	4a18      	ldr	r2, [pc, #96]	@ (8008388 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008326:	f023 030c 	bic.w	r3, r3, #12
 800832a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800832e:	e022      	b.n	8008376 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8008330:	4b14      	ldr	r3, [pc, #80]	@ (8008384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a13      	ldr	r2, [pc, #76]	@ (8008384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008336:	f023 0304 	bic.w	r3, r3, #4
 800833a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800833c:	4b12      	ldr	r3, [pc, #72]	@ (8008388 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800833e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008342:	f023 030c 	bic.w	r3, r3, #12
 8008346:	4a10      	ldr	r2, [pc, #64]	@ (8008388 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008348:	f043 0304 	orr.w	r3, r3, #4
 800834c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8008350:	e011      	b.n	8008376 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8008352:	4b0c      	ldr	r3, [pc, #48]	@ (8008384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a0b      	ldr	r2, [pc, #44]	@ (8008384 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008358:	f023 0304 	bic.w	r3, r3, #4
 800835c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800835e:	4b0a      	ldr	r3, [pc, #40]	@ (8008388 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008360:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008364:	f023 030c 	bic.w	r3, r3, #12
 8008368:	4a07      	ldr	r2, [pc, #28]	@ (8008388 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800836a:	f043 0308 	orr.w	r3, r3, #8
 800836e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8008372:	e000      	b.n	8008376 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8008374:	bf00      	nop
  }
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	e000e010 	.word	0xe000e010
 8008388:	44020c00 	.word	0x44020c00

0800838c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8008392:	4b17      	ldr	r3, [pc, #92]	@ (80083f0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0304 	and.w	r3, r3, #4
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800839e:	2304      	movs	r3, #4
 80083a0:	607b      	str	r3, [r7, #4]
 80083a2:	e01e      	b.n	80083e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80083a4:	4b13      	ldr	r3, [pc, #76]	@ (80083f4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80083a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80083aa:	f003 030c 	and.w	r3, r3, #12
 80083ae:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	d00f      	beq.n	80083d6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d80f      	bhi.n	80083dc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d003      	beq.n	80083d0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80083c8:	e008      	b.n	80083dc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80083ca:	2300      	movs	r3, #0
 80083cc:	607b      	str	r3, [r7, #4]
        break;
 80083ce:	e008      	b.n	80083e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80083d0:	2301      	movs	r3, #1
 80083d2:	607b      	str	r3, [r7, #4]
        break;
 80083d4:	e005      	b.n	80083e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80083d6:	2302      	movs	r3, #2
 80083d8:	607b      	str	r3, [r7, #4]
        break;
 80083da:	e002      	b.n	80083e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80083dc:	2300      	movs	r3, #0
 80083de:	607b      	str	r3, [r7, #4]
        break;
 80083e0:	bf00      	nop
    }
  }
  return systick_source;
 80083e2:	687b      	ldr	r3, [r7, #4]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	e000e010 	.word	0xe000e010
 80083f4:	44020c00 	.word	0x44020c00

080083f8 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8008400:	f7ff fe3a 	bl	8008078 <HAL_GetTick>
 8008404:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e0f0      	b.n	80085f2 <HAL_DMA_Init+0x1fa>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a79      	ldr	r2, [pc, #484]	@ (80085fc <HAL_DMA_Init+0x204>)
 8008416:	4293      	cmp	r3, r2
 8008418:	f000 809f 	beq.w	800855a <HAL_DMA_Init+0x162>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a77      	ldr	r2, [pc, #476]	@ (8008600 <HAL_DMA_Init+0x208>)
 8008422:	4293      	cmp	r3, r2
 8008424:	f000 8099 	beq.w	800855a <HAL_DMA_Init+0x162>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a75      	ldr	r2, [pc, #468]	@ (8008604 <HAL_DMA_Init+0x20c>)
 800842e:	4293      	cmp	r3, r2
 8008430:	f000 8093 	beq.w	800855a <HAL_DMA_Init+0x162>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a73      	ldr	r2, [pc, #460]	@ (8008608 <HAL_DMA_Init+0x210>)
 800843a:	4293      	cmp	r3, r2
 800843c:	f000 808d 	beq.w	800855a <HAL_DMA_Init+0x162>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a71      	ldr	r2, [pc, #452]	@ (800860c <HAL_DMA_Init+0x214>)
 8008446:	4293      	cmp	r3, r2
 8008448:	f000 8087 	beq.w	800855a <HAL_DMA_Init+0x162>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a6f      	ldr	r2, [pc, #444]	@ (8008610 <HAL_DMA_Init+0x218>)
 8008452:	4293      	cmp	r3, r2
 8008454:	f000 8081 	beq.w	800855a <HAL_DMA_Init+0x162>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a6d      	ldr	r2, [pc, #436]	@ (8008614 <HAL_DMA_Init+0x21c>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d07b      	beq.n	800855a <HAL_DMA_Init+0x162>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a6c      	ldr	r2, [pc, #432]	@ (8008618 <HAL_DMA_Init+0x220>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d076      	beq.n	800855a <HAL_DMA_Init+0x162>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a6a      	ldr	r2, [pc, #424]	@ (800861c <HAL_DMA_Init+0x224>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d071      	beq.n	800855a <HAL_DMA_Init+0x162>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a69      	ldr	r2, [pc, #420]	@ (8008620 <HAL_DMA_Init+0x228>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d06c      	beq.n	800855a <HAL_DMA_Init+0x162>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a67      	ldr	r2, [pc, #412]	@ (8008624 <HAL_DMA_Init+0x22c>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d067      	beq.n	800855a <HAL_DMA_Init+0x162>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a66      	ldr	r2, [pc, #408]	@ (8008628 <HAL_DMA_Init+0x230>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d062      	beq.n	800855a <HAL_DMA_Init+0x162>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a64      	ldr	r2, [pc, #400]	@ (800862c <HAL_DMA_Init+0x234>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d05d      	beq.n	800855a <HAL_DMA_Init+0x162>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a63      	ldr	r2, [pc, #396]	@ (8008630 <HAL_DMA_Init+0x238>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d058      	beq.n	800855a <HAL_DMA_Init+0x162>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a61      	ldr	r2, [pc, #388]	@ (8008634 <HAL_DMA_Init+0x23c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d053      	beq.n	800855a <HAL_DMA_Init+0x162>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a60      	ldr	r2, [pc, #384]	@ (8008638 <HAL_DMA_Init+0x240>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d04e      	beq.n	800855a <HAL_DMA_Init+0x162>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a5e      	ldr	r2, [pc, #376]	@ (800863c <HAL_DMA_Init+0x244>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d049      	beq.n	800855a <HAL_DMA_Init+0x162>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a5d      	ldr	r2, [pc, #372]	@ (8008640 <HAL_DMA_Init+0x248>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d044      	beq.n	800855a <HAL_DMA_Init+0x162>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a5b      	ldr	r2, [pc, #364]	@ (8008644 <HAL_DMA_Init+0x24c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d03f      	beq.n	800855a <HAL_DMA_Init+0x162>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a5a      	ldr	r2, [pc, #360]	@ (8008648 <HAL_DMA_Init+0x250>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d03a      	beq.n	800855a <HAL_DMA_Init+0x162>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a58      	ldr	r2, [pc, #352]	@ (800864c <HAL_DMA_Init+0x254>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d035      	beq.n	800855a <HAL_DMA_Init+0x162>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a57      	ldr	r2, [pc, #348]	@ (8008650 <HAL_DMA_Init+0x258>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d030      	beq.n	800855a <HAL_DMA_Init+0x162>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a55      	ldr	r2, [pc, #340]	@ (8008654 <HAL_DMA_Init+0x25c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d02b      	beq.n	800855a <HAL_DMA_Init+0x162>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a54      	ldr	r2, [pc, #336]	@ (8008658 <HAL_DMA_Init+0x260>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d026      	beq.n	800855a <HAL_DMA_Init+0x162>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a52      	ldr	r2, [pc, #328]	@ (800865c <HAL_DMA_Init+0x264>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d021      	beq.n	800855a <HAL_DMA_Init+0x162>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a51      	ldr	r2, [pc, #324]	@ (8008660 <HAL_DMA_Init+0x268>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d01c      	beq.n	800855a <HAL_DMA_Init+0x162>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a4f      	ldr	r2, [pc, #316]	@ (8008664 <HAL_DMA_Init+0x26c>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d017      	beq.n	800855a <HAL_DMA_Init+0x162>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a4e      	ldr	r2, [pc, #312]	@ (8008668 <HAL_DMA_Init+0x270>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d012      	beq.n	800855a <HAL_DMA_Init+0x162>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a4c      	ldr	r2, [pc, #304]	@ (800866c <HAL_DMA_Init+0x274>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d00d      	beq.n	800855a <HAL_DMA_Init+0x162>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a4b      	ldr	r2, [pc, #300]	@ (8008670 <HAL_DMA_Init+0x278>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d008      	beq.n	800855a <HAL_DMA_Init+0x162>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a49      	ldr	r2, [pc, #292]	@ (8008674 <HAL_DMA_Init+0x27c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d003      	beq.n	800855a <HAL_DMA_Init+0x162>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a48      	ldr	r2, [pc, #288]	@ (8008678 <HAL_DMA_Init+0x280>)
 8008558:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10e      	bne.n	800858c <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	695a      	ldr	r2, [r3, #20]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f042 0206 	orr.w	r2, r2, #6
 80085a2:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80085a4:	e00f      	b.n	80085c6 <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80085a6:	f7ff fd67 	bl	8008078 <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	2b05      	cmp	r3, #5
 80085b2:	d908      	bls.n	80085c6 <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2210      	movs	r2, #16
 80085b8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2203      	movs	r2, #3
 80085be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e015      	b.n	80085f2 <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e8      	bne.n	80085a6 <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f8b7 	bl	8008748 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	40020050 	.word	0x40020050
 8008600:	50020050 	.word	0x50020050
 8008604:	400200d0 	.word	0x400200d0
 8008608:	500200d0 	.word	0x500200d0
 800860c:	40020150 	.word	0x40020150
 8008610:	50020150 	.word	0x50020150
 8008614:	400201d0 	.word	0x400201d0
 8008618:	500201d0 	.word	0x500201d0
 800861c:	40020250 	.word	0x40020250
 8008620:	50020250 	.word	0x50020250
 8008624:	400202d0 	.word	0x400202d0
 8008628:	500202d0 	.word	0x500202d0
 800862c:	40020350 	.word	0x40020350
 8008630:	50020350 	.word	0x50020350
 8008634:	400203d0 	.word	0x400203d0
 8008638:	500203d0 	.word	0x500203d0
 800863c:	40021050 	.word	0x40021050
 8008640:	50021050 	.word	0x50021050
 8008644:	400210d0 	.word	0x400210d0
 8008648:	500210d0 	.word	0x500210d0
 800864c:	40021150 	.word	0x40021150
 8008650:	50021150 	.word	0x50021150
 8008654:	400211d0 	.word	0x400211d0
 8008658:	500211d0 	.word	0x500211d0
 800865c:	40021250 	.word	0x40021250
 8008660:	50021250 	.word	0x50021250
 8008664:	400212d0 	.word	0x400212d0
 8008668:	500212d0 	.word	0x500212d0
 800866c:	40021350 	.word	0x40021350
 8008670:	50021350 	.word	0x50021350
 8008674:	400213d0 	.word	0x400213d0
 8008678:	500213d0 	.word	0x500213d0

0800867c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e019      	b.n	80086c2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b02      	cmp	r3, #2
 8008698:	d004      	beq.n	80086a4 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2220      	movs	r2, #32
 800869e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e00e      	b.n	80086c2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2204      	movs	r2, #4
 80086a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6812      	ldr	r2, [r2, #0]
 80086b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80086ba:	f043 0304 	orr.w	r3, r3, #4
 80086be:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e02b      	b.n	800873a <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80086ea:	f023 030f 	bic.w	r3, r3, #15
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086f8:	3b50      	subs	r3, #80	@ 0x50
 80086fa:	09db      	lsrs	r3, r3, #7
 80086fc:	f003 031f 	and.w	r3, r3, #31
 8008700:	2201      	movs	r2, #1
 8008702:	fa02 f303 	lsl.w	r3, r2, r3
 8008706:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f003 0310 	and.w	r3, r3, #16
 800870e:	2b00      	cmp	r3, #0
 8008710:	d012      	beq.n	8008738 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	f003 0311 	and.w	r3, r3, #17
 8008718:	2b11      	cmp	r3, #17
 800871a:	d106      	bne.n	800872a <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	431a      	orrs	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	605a      	str	r2, [r3, #4]
 8008728:	e006      	b.n	8008738 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	43db      	mvns	r3, r3
 8008732:	401a      	ands	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
	...

08008748 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	430a      	orrs	r2, r1
 8008768:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	695a      	ldr	r2, [r3, #20]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	431a      	orrs	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	431a      	orrs	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	4313      	orrs	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a53      	ldr	r2, [pc, #332]	@ (80088d4 <DMA_Init+0x18c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	f000 80a0 	beq.w	80088ce <DMA_Init+0x186>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a51      	ldr	r2, [pc, #324]	@ (80088d8 <DMA_Init+0x190>)
 8008794:	4293      	cmp	r3, r2
 8008796:	f000 809a 	beq.w	80088ce <DMA_Init+0x186>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a4f      	ldr	r2, [pc, #316]	@ (80088dc <DMA_Init+0x194>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	f000 8094 	beq.w	80088ce <DMA_Init+0x186>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a4d      	ldr	r2, [pc, #308]	@ (80088e0 <DMA_Init+0x198>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	f000 808e 	beq.w	80088ce <DMA_Init+0x186>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a4b      	ldr	r2, [pc, #300]	@ (80088e4 <DMA_Init+0x19c>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	f000 8088 	beq.w	80088ce <DMA_Init+0x186>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a49      	ldr	r2, [pc, #292]	@ (80088e8 <DMA_Init+0x1a0>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	f000 8082 	beq.w	80088ce <DMA_Init+0x186>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a47      	ldr	r2, [pc, #284]	@ (80088ec <DMA_Init+0x1a4>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d07c      	beq.n	80088ce <DMA_Init+0x186>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a45      	ldr	r2, [pc, #276]	@ (80088f0 <DMA_Init+0x1a8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d077      	beq.n	80088ce <DMA_Init+0x186>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a44      	ldr	r2, [pc, #272]	@ (80088f4 <DMA_Init+0x1ac>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d072      	beq.n	80088ce <DMA_Init+0x186>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a42      	ldr	r2, [pc, #264]	@ (80088f8 <DMA_Init+0x1b0>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d06d      	beq.n	80088ce <DMA_Init+0x186>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a41      	ldr	r2, [pc, #260]	@ (80088fc <DMA_Init+0x1b4>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d068      	beq.n	80088ce <DMA_Init+0x186>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a3f      	ldr	r2, [pc, #252]	@ (8008900 <DMA_Init+0x1b8>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d063      	beq.n	80088ce <DMA_Init+0x186>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a3e      	ldr	r2, [pc, #248]	@ (8008904 <DMA_Init+0x1bc>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d05e      	beq.n	80088ce <DMA_Init+0x186>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a3c      	ldr	r2, [pc, #240]	@ (8008908 <DMA_Init+0x1c0>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d059      	beq.n	80088ce <DMA_Init+0x186>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a3b      	ldr	r2, [pc, #236]	@ (800890c <DMA_Init+0x1c4>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d054      	beq.n	80088ce <DMA_Init+0x186>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a39      	ldr	r2, [pc, #228]	@ (8008910 <DMA_Init+0x1c8>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d04f      	beq.n	80088ce <DMA_Init+0x186>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a38      	ldr	r2, [pc, #224]	@ (8008914 <DMA_Init+0x1cc>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d04a      	beq.n	80088ce <DMA_Init+0x186>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a36      	ldr	r2, [pc, #216]	@ (8008918 <DMA_Init+0x1d0>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d045      	beq.n	80088ce <DMA_Init+0x186>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a35      	ldr	r2, [pc, #212]	@ (800891c <DMA_Init+0x1d4>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d040      	beq.n	80088ce <DMA_Init+0x186>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a33      	ldr	r2, [pc, #204]	@ (8008920 <DMA_Init+0x1d8>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d03b      	beq.n	80088ce <DMA_Init+0x186>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a32      	ldr	r2, [pc, #200]	@ (8008924 <DMA_Init+0x1dc>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d036      	beq.n	80088ce <DMA_Init+0x186>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a30      	ldr	r2, [pc, #192]	@ (8008928 <DMA_Init+0x1e0>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d031      	beq.n	80088ce <DMA_Init+0x186>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a2f      	ldr	r2, [pc, #188]	@ (800892c <DMA_Init+0x1e4>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d02c      	beq.n	80088ce <DMA_Init+0x186>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a2d      	ldr	r2, [pc, #180]	@ (8008930 <DMA_Init+0x1e8>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d027      	beq.n	80088ce <DMA_Init+0x186>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a2c      	ldr	r2, [pc, #176]	@ (8008934 <DMA_Init+0x1ec>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d022      	beq.n	80088ce <DMA_Init+0x186>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a2a      	ldr	r2, [pc, #168]	@ (8008938 <DMA_Init+0x1f0>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d01d      	beq.n	80088ce <DMA_Init+0x186>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a29      	ldr	r2, [pc, #164]	@ (800893c <DMA_Init+0x1f4>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d018      	beq.n	80088ce <DMA_Init+0x186>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a27      	ldr	r2, [pc, #156]	@ (8008940 <DMA_Init+0x1f8>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d013      	beq.n	80088ce <DMA_Init+0x186>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a26      	ldr	r2, [pc, #152]	@ (8008944 <DMA_Init+0x1fc>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d00e      	beq.n	80088ce <DMA_Init+0x186>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a24      	ldr	r2, [pc, #144]	@ (8008948 <DMA_Init+0x200>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d009      	beq.n	80088ce <DMA_Init+0x186>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a23      	ldr	r2, [pc, #140]	@ (800894c <DMA_Init+0x204>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d004      	beq.n	80088ce <DMA_Init+0x186>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a21      	ldr	r2, [pc, #132]	@ (8008950 <DMA_Init+0x208>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d142      	bne.n	8008954 <DMA_Init+0x20c>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e041      	b.n	8008956 <DMA_Init+0x20e>
 80088d2:	bf00      	nop
 80088d4:	40020050 	.word	0x40020050
 80088d8:	50020050 	.word	0x50020050
 80088dc:	400200d0 	.word	0x400200d0
 80088e0:	500200d0 	.word	0x500200d0
 80088e4:	40020150 	.word	0x40020150
 80088e8:	50020150 	.word	0x50020150
 80088ec:	400201d0 	.word	0x400201d0
 80088f0:	500201d0 	.word	0x500201d0
 80088f4:	40020250 	.word	0x40020250
 80088f8:	50020250 	.word	0x50020250
 80088fc:	400202d0 	.word	0x400202d0
 8008900:	500202d0 	.word	0x500202d0
 8008904:	40020350 	.word	0x40020350
 8008908:	50020350 	.word	0x50020350
 800890c:	400203d0 	.word	0x400203d0
 8008910:	500203d0 	.word	0x500203d0
 8008914:	40021050 	.word	0x40021050
 8008918:	50021050 	.word	0x50021050
 800891c:	400210d0 	.word	0x400210d0
 8008920:	500210d0 	.word	0x500210d0
 8008924:	40021150 	.word	0x40021150
 8008928:	50021150 	.word	0x50021150
 800892c:	400211d0 	.word	0x400211d0
 8008930:	500211d0 	.word	0x500211d0
 8008934:	40021250 	.word	0x40021250
 8008938:	50021250 	.word	0x50021250
 800893c:	400212d0 	.word	0x400212d0
 8008940:	500212d0 	.word	0x500212d0
 8008944:	40021350 	.word	0x40021350
 8008948:	50021350 	.word	0x50021350
 800894c:	400213d0 	.word	0x400213d0
 8008950:	500213d0 	.word	0x500213d0
 8008954:	2300      	movs	r3, #0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d012      	beq.n	8008980 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008962:	3b01      	subs	r3, #1
 8008964:	051b      	lsls	r3, r3, #20
 8008966:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800896a:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008970:	3b01      	subs	r3, #1
 8008972:	011b      	lsls	r3, r3, #4
 8008974:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8008978:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	4313      	orrs	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008986:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	430a      	orrs	r2, r1
 8008992:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	431a      	orrs	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089a4:	4313      	orrs	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089b0:	f040 80b0 	bne.w	8008b14 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a84      	ldr	r2, [pc, #528]	@ (8008bcc <DMA_Init+0x484>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	f000 80a0 	beq.w	8008b00 <DMA_Init+0x3b8>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a82      	ldr	r2, [pc, #520]	@ (8008bd0 <DMA_Init+0x488>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	f000 809a 	beq.w	8008b00 <DMA_Init+0x3b8>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a80      	ldr	r2, [pc, #512]	@ (8008bd4 <DMA_Init+0x48c>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	f000 8094 	beq.w	8008b00 <DMA_Init+0x3b8>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a7e      	ldr	r2, [pc, #504]	@ (8008bd8 <DMA_Init+0x490>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	f000 808e 	beq.w	8008b00 <DMA_Init+0x3b8>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a7c      	ldr	r2, [pc, #496]	@ (8008bdc <DMA_Init+0x494>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	f000 8088 	beq.w	8008b00 <DMA_Init+0x3b8>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a7a      	ldr	r2, [pc, #488]	@ (8008be0 <DMA_Init+0x498>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	f000 8082 	beq.w	8008b00 <DMA_Init+0x3b8>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a78      	ldr	r2, [pc, #480]	@ (8008be4 <DMA_Init+0x49c>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d07c      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a77      	ldr	r2, [pc, #476]	@ (8008be8 <DMA_Init+0x4a0>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d077      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a75      	ldr	r2, [pc, #468]	@ (8008bec <DMA_Init+0x4a4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d072      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a74      	ldr	r2, [pc, #464]	@ (8008bf0 <DMA_Init+0x4a8>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d06d      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a72      	ldr	r2, [pc, #456]	@ (8008bf4 <DMA_Init+0x4ac>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d068      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a71      	ldr	r2, [pc, #452]	@ (8008bf8 <DMA_Init+0x4b0>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d063      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a6f      	ldr	r2, [pc, #444]	@ (8008bfc <DMA_Init+0x4b4>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d05e      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a6e      	ldr	r2, [pc, #440]	@ (8008c00 <DMA_Init+0x4b8>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d059      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a6c      	ldr	r2, [pc, #432]	@ (8008c04 <DMA_Init+0x4bc>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d054      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a6b      	ldr	r2, [pc, #428]	@ (8008c08 <DMA_Init+0x4c0>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d04f      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a69      	ldr	r2, [pc, #420]	@ (8008c0c <DMA_Init+0x4c4>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d04a      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a68      	ldr	r2, [pc, #416]	@ (8008c10 <DMA_Init+0x4c8>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d045      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a66      	ldr	r2, [pc, #408]	@ (8008c14 <DMA_Init+0x4cc>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d040      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a65      	ldr	r2, [pc, #404]	@ (8008c18 <DMA_Init+0x4d0>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d03b      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a63      	ldr	r2, [pc, #396]	@ (8008c1c <DMA_Init+0x4d4>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d036      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a62      	ldr	r2, [pc, #392]	@ (8008c20 <DMA_Init+0x4d8>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d031      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a60      	ldr	r2, [pc, #384]	@ (8008c24 <DMA_Init+0x4dc>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d02c      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a5f      	ldr	r2, [pc, #380]	@ (8008c28 <DMA_Init+0x4e0>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d027      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a5d      	ldr	r2, [pc, #372]	@ (8008c2c <DMA_Init+0x4e4>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d022      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a5c      	ldr	r2, [pc, #368]	@ (8008c30 <DMA_Init+0x4e8>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d01d      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a5a      	ldr	r2, [pc, #360]	@ (8008c34 <DMA_Init+0x4ec>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d018      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a59      	ldr	r2, [pc, #356]	@ (8008c38 <DMA_Init+0x4f0>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d013      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a57      	ldr	r2, [pc, #348]	@ (8008c3c <DMA_Init+0x4f4>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d00e      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a56      	ldr	r2, [pc, #344]	@ (8008c40 <DMA_Init+0x4f8>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d009      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a54      	ldr	r2, [pc, #336]	@ (8008c44 <DMA_Init+0x4fc>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d004      	beq.n	8008b00 <DMA_Init+0x3b8>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a53      	ldr	r2, [pc, #332]	@ (8008c48 <DMA_Init+0x500>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d101      	bne.n	8008b04 <DMA_Init+0x3bc>
 8008b00:	2301      	movs	r3, #1
 8008b02:	e000      	b.n	8008b06 <DMA_Init+0x3be>
 8008b04:	2300      	movs	r3, #0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00d      	beq.n	8008b26 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008b10:	60fb      	str	r3, [r7, #12]
 8008b12:	e008      	b.n	8008b26 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b1c:	d103      	bne.n	8008b26 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008b24:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b36:	4b45      	ldr	r3, [pc, #276]	@ (8008c4c <DMA_Init+0x504>)
 8008b38:	4013      	ands	r3, r2
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	6812      	ldr	r2, [r2, #0]
 8008b3e:	68f9      	ldr	r1, [r7, #12]
 8008b40:	430b      	orrs	r3, r1
 8008b42:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a2a      	ldr	r2, [pc, #168]	@ (8008bfc <DMA_Init+0x4b4>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d022      	beq.n	8008b9c <DMA_Init+0x454>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a29      	ldr	r2, [pc, #164]	@ (8008c00 <DMA_Init+0x4b8>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d01d      	beq.n	8008b9c <DMA_Init+0x454>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a27      	ldr	r2, [pc, #156]	@ (8008c04 <DMA_Init+0x4bc>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d018      	beq.n	8008b9c <DMA_Init+0x454>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a26      	ldr	r2, [pc, #152]	@ (8008c08 <DMA_Init+0x4c0>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d013      	beq.n	8008b9c <DMA_Init+0x454>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a30      	ldr	r2, [pc, #192]	@ (8008c3c <DMA_Init+0x4f4>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d00e      	beq.n	8008b9c <DMA_Init+0x454>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a2f      	ldr	r2, [pc, #188]	@ (8008c40 <DMA_Init+0x4f8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d009      	beq.n	8008b9c <DMA_Init+0x454>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8008c44 <DMA_Init+0x4fc>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d004      	beq.n	8008b9c <DMA_Init+0x454>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a2c      	ldr	r2, [pc, #176]	@ (8008c48 <DMA_Init+0x500>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d101      	bne.n	8008ba0 <DMA_Init+0x458>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e000      	b.n	8008ba2 <DMA_Init+0x45a>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d007      	beq.n	8008bb6 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2200      	movs	r2, #0
 8008bac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008bbe:	bf00      	nop
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	40020050 	.word	0x40020050
 8008bd0:	50020050 	.word	0x50020050
 8008bd4:	400200d0 	.word	0x400200d0
 8008bd8:	500200d0 	.word	0x500200d0
 8008bdc:	40020150 	.word	0x40020150
 8008be0:	50020150 	.word	0x50020150
 8008be4:	400201d0 	.word	0x400201d0
 8008be8:	500201d0 	.word	0x500201d0
 8008bec:	40020250 	.word	0x40020250
 8008bf0:	50020250 	.word	0x50020250
 8008bf4:	400202d0 	.word	0x400202d0
 8008bf8:	500202d0 	.word	0x500202d0
 8008bfc:	40020350 	.word	0x40020350
 8008c00:	50020350 	.word	0x50020350
 8008c04:	400203d0 	.word	0x400203d0
 8008c08:	500203d0 	.word	0x500203d0
 8008c0c:	40021050 	.word	0x40021050
 8008c10:	50021050 	.word	0x50021050
 8008c14:	400210d0 	.word	0x400210d0
 8008c18:	500210d0 	.word	0x500210d0
 8008c1c:	40021150 	.word	0x40021150
 8008c20:	50021150 	.word	0x50021150
 8008c24:	400211d0 	.word	0x400211d0
 8008c28:	500211d0 	.word	0x500211d0
 8008c2c:	40021250 	.word	0x40021250
 8008c30:	50021250 	.word	0x50021250
 8008c34:	400212d0 	.word	0x400212d0
 8008c38:	500212d0 	.word	0x500212d0
 8008c3c:	40021350 	.word	0x40021350
 8008c40:	50021350 	.word	0x50021350
 8008c44:	400213d0 	.word	0x400213d0
 8008c48:	500213d0 	.word	0x500213d0
 8008c4c:	3cc02100 	.word	0x3cc02100

08008c50 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8008c5e:	e142      	b.n	8008ee6 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	2101      	movs	r1, #1
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	fa01 f303 	lsl.w	r3, r1, r3
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 8134 	beq.w	8008ee0 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d003      	beq.n	8008c88 <HAL_GPIO_Init+0x38>
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	2b12      	cmp	r3, #18
 8008c86:	d125      	bne.n	8008cd4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	08da      	lsrs	r2, r3, #3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3208      	adds	r2, #8
 8008c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c94:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f003 0307 	and.w	r3, r3, #7
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	220f      	movs	r2, #15
 8008ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca4:	43db      	mvns	r3, r3
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	f003 020f 	and.w	r2, r3, #15
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	08da      	lsrs	r2, r3, #3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3208      	adds	r2, #8
 8008cce:	6979      	ldr	r1, [r7, #20]
 8008cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	2203      	movs	r2, #3
 8008ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce4:	43db      	mvns	r3, r3
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f003 0203 	and.w	r2, r3, #3
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d00b      	beq.n	8008d28 <HAL_GPIO_Init+0xd8>
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d007      	beq.n	8008d28 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008d1c:	2b11      	cmp	r3, #17
 8008d1e:	d003      	beq.n	8008d28 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2b12      	cmp	r3, #18
 8008d26:	d130      	bne.n	8008d8a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	2203      	movs	r2, #3
 8008d34:	fa02 f303 	lsl.w	r3, r2, r3
 8008d38:	43db      	mvns	r3, r3
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	68da      	ldr	r2, [r3, #12]
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d5e:	2201      	movs	r2, #1
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	fa02 f303 	lsl.w	r3, r2, r3
 8008d66:	43db      	mvns	r3, r3
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	091b      	lsrs	r3, r3, #4
 8008d74:	f003 0201 	and.w	r2, r3, #1
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f003 0303 	and.w	r3, r3, #3
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d109      	bne.n	8008daa <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	d11b      	bne.n	8008dda <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d017      	beq.n	8008dda <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	2203      	movs	r2, #3
 8008db6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dba:	43db      	mvns	r3, r3
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	689a      	ldr	r2, [r3, #8]
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	005b      	lsls	r3, r3, #1
 8008dca:	fa02 f303 	lsl.w	r3, r2, r3
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d07c      	beq.n	8008ee0 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8008de6:	4a47      	ldr	r2, [pc, #284]	@ (8008f04 <HAL_GPIO_Init+0x2b4>)
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	089b      	lsrs	r3, r3, #2
 8008dec:	3318      	adds	r3, #24
 8008dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008df2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f003 0303 	and.w	r3, r3, #3
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	220f      	movs	r2, #15
 8008dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008e02:	43db      	mvns	r3, r3
 8008e04:	697a      	ldr	r2, [r7, #20]
 8008e06:	4013      	ands	r3, r2
 8008e08:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	0a9a      	lsrs	r2, r3, #10
 8008e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8008f08 <HAL_GPIO_Init+0x2b8>)
 8008e10:	4013      	ands	r3, r2
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	f002 0203 	and.w	r2, r2, #3
 8008e18:	00d2      	lsls	r2, r2, #3
 8008e1a:	4093      	lsls	r3, r2
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8008e22:	4938      	ldr	r1, [pc, #224]	@ (8008f04 <HAL_GPIO_Init+0x2b4>)
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	089b      	lsrs	r3, r3, #2
 8008e28:	3318      	adds	r3, #24
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8008e30:	4b34      	ldr	r3, [pc, #208]	@ (8008f04 <HAL_GPIO_Init+0x2b4>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	43db      	mvns	r3, r3
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d003      	beq.n	8008e54 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8008e54:	4a2b      	ldr	r2, [pc, #172]	@ (8008f04 <HAL_GPIO_Init+0x2b4>)
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8008e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8008f04 <HAL_GPIO_Init+0x2b4>)
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	43db      	mvns	r3, r3
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	4013      	ands	r3, r2
 8008e68:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8008e7e:	4a21      	ldr	r2, [pc, #132]	@ (8008f04 <HAL_GPIO_Init+0x2b4>)
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8008e84:	4b1f      	ldr	r3, [pc, #124]	@ (8008f04 <HAL_GPIO_Init+0x2b4>)
 8008e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e8a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	43db      	mvns	r3, r3
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	4013      	ands	r3, r2
 8008e94:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8008eaa:	4a16      	ldr	r2, [pc, #88]	@ (8008f04 <HAL_GPIO_Init+0x2b4>)
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8008eb2:	4b14      	ldr	r3, [pc, #80]	@ (8008f04 <HAL_GPIO_Init+0x2b4>)
 8008eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eb8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	43db      	mvns	r3, r3
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8008ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8008f04 <HAL_GPIO_Init+0x2b4>)
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f47f aeb5 	bne.w	8008c60 <HAL_GPIO_Init+0x10>
  }
}
 8008ef6:	bf00      	nop
 8008ef8:	bf00      	nop
 8008efa:	371c      	adds	r7, #28
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	44022000 	.word	0x44022000
 8008f08:	002f7f7f 	.word	0x002f7f7f

08008f0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f1e:	887a      	ldrh	r2, [r7, #2]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4013      	ands	r3, r2
 8008f24:	041a      	lsls	r2, r3, #16
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	43d9      	mvns	r1, r3
 8008f2a:	887b      	ldrh	r3, [r7, #2]
 8008f2c:	400b      	ands	r3, r1
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	619a      	str	r2, [r3, #24]
}
 8008f34:	bf00      	nop
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008f40:	b480      	push	{r7}
 8008f42:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008f44:	4b05      	ldr	r3, [pc, #20]	@ (8008f5c <HAL_ICACHE_Enable+0x1c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a04      	ldr	r2, [pc, #16]	@ (8008f5c <HAL_ICACHE_Enable+0x1c>)
 8008f4a:	f043 0301 	orr.w	r3, r3, #1
 8008f4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	40030400 	.word	0x40030400

08008f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b088      	sub	sp, #32
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d102      	bne.n	8008f74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f000 bc28 	b.w	80097c4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f74:	4b94      	ldr	r3, [pc, #592]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	f003 0318 	and.w	r3, r3, #24
 8008f7c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8008f7e:	4b92      	ldr	r3, [pc, #584]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8008f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f82:	f003 0303 	and.w	r3, r3, #3
 8008f86:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0310 	and.w	r3, r3, #16
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d05b      	beq.n	800904c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	2b08      	cmp	r3, #8
 8008f98:	d005      	beq.n	8008fa6 <HAL_RCC_OscConfig+0x46>
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	2b18      	cmp	r3, #24
 8008f9e:	d114      	bne.n	8008fca <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d111      	bne.n	8008fca <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d102      	bne.n	8008fb4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f000 bc08 	b.w	80097c4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8008fb4:	4b84      	ldr	r3, [pc, #528]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	041b      	lsls	r3, r3, #16
 8008fc2:	4981      	ldr	r1, [pc, #516]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8008fc8:	e040      	b.n	800904c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d023      	beq.n	800901a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008fd2:	4b7d      	ldr	r3, [pc, #500]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a7c      	ldr	r2, [pc, #496]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8008fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fde:	f7ff f84b 	bl	8008078 <HAL_GetTick>
 8008fe2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8008fe4:	e008      	b.n	8008ff8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8008fe6:	f7ff f847 	bl	8008078 <HAL_GetTick>
 8008fea:	4602      	mov	r2, r0
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d901      	bls.n	8008ff8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e3e5      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8008ff8:	4b73      	ldr	r3, [pc, #460]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009000:	2b00      	cmp	r3, #0
 8009002:	d0f0      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8009004:	4b70      	ldr	r3, [pc, #448]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	041b      	lsls	r3, r3, #16
 8009012:	496d      	ldr	r1, [pc, #436]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8009014:	4313      	orrs	r3, r2
 8009016:	618b      	str	r3, [r1, #24]
 8009018:	e018      	b.n	800904c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800901a:	4b6b      	ldr	r3, [pc, #428]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a6a      	ldr	r2, [pc, #424]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8009020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009026:	f7ff f827 	bl	8008078 <HAL_GetTick>
 800902a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800902c:	e008      	b.n	8009040 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800902e:	f7ff f823 	bl	8008078 <HAL_GetTick>
 8009032:	4602      	mov	r2, r0
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	2b02      	cmp	r3, #2
 800903a:	d901      	bls.n	8009040 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e3c1      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8009040:	4b61      	ldr	r3, [pc, #388]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1f0      	bne.n	800902e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 80a0 	beq.w	800919a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	2b10      	cmp	r3, #16
 800905e:	d005      	beq.n	800906c <HAL_RCC_OscConfig+0x10c>
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	2b18      	cmp	r3, #24
 8009064:	d109      	bne.n	800907a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	2b03      	cmp	r3, #3
 800906a:	d106      	bne.n	800907a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f040 8092 	bne.w	800919a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e3a4      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009082:	d106      	bne.n	8009092 <HAL_RCC_OscConfig+0x132>
 8009084:	4b50      	ldr	r3, [pc, #320]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a4f      	ldr	r2, [pc, #316]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 800908a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	e058      	b.n	8009144 <HAL_RCC_OscConfig+0x1e4>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d112      	bne.n	80090c0 <HAL_RCC_OscConfig+0x160>
 800909a:	4b4b      	ldr	r3, [pc, #300]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a4a      	ldr	r2, [pc, #296]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 80090a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	4b48      	ldr	r3, [pc, #288]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a47      	ldr	r2, [pc, #284]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 80090ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80090b0:	6013      	str	r3, [r2, #0]
 80090b2:	4b45      	ldr	r3, [pc, #276]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a44      	ldr	r2, [pc, #272]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 80090b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090bc:	6013      	str	r3, [r2, #0]
 80090be:	e041      	b.n	8009144 <HAL_RCC_OscConfig+0x1e4>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090c8:	d112      	bne.n	80090f0 <HAL_RCC_OscConfig+0x190>
 80090ca:	4b3f      	ldr	r3, [pc, #252]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a3e      	ldr	r2, [pc, #248]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 80090d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	4b3c      	ldr	r3, [pc, #240]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a3b      	ldr	r2, [pc, #236]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 80090dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80090e0:	6013      	str	r3, [r2, #0]
 80090e2:	4b39      	ldr	r3, [pc, #228]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a38      	ldr	r2, [pc, #224]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 80090e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	e029      	b.n	8009144 <HAL_RCC_OscConfig+0x1e4>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80090f8:	d112      	bne.n	8009120 <HAL_RCC_OscConfig+0x1c0>
 80090fa:	4b33      	ldr	r3, [pc, #204]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a32      	ldr	r2, [pc, #200]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8009100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009104:	6013      	str	r3, [r2, #0]
 8009106:	4b30      	ldr	r3, [pc, #192]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a2f      	ldr	r2, [pc, #188]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 800910c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	4b2d      	ldr	r3, [pc, #180]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a2c      	ldr	r2, [pc, #176]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8009118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800911c:	6013      	str	r3, [r2, #0]
 800911e:	e011      	b.n	8009144 <HAL_RCC_OscConfig+0x1e4>
 8009120:	4b29      	ldr	r3, [pc, #164]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a28      	ldr	r2, [pc, #160]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8009126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	4b26      	ldr	r3, [pc, #152]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a25      	ldr	r2, [pc, #148]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8009132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	4b23      	ldr	r3, [pc, #140]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a22      	ldr	r2, [pc, #136]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 800913e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d013      	beq.n	8009174 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800914c:	f7fe ff94 	bl	8008078 <HAL_GetTick>
 8009150:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009152:	e008      	b.n	8009166 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8009154:	f7fe ff90 	bl	8008078 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	2b64      	cmp	r3, #100	@ 0x64
 8009160:	d901      	bls.n	8009166 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e32e      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009166:	4b18      	ldr	r3, [pc, #96]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d0f0      	beq.n	8009154 <HAL_RCC_OscConfig+0x1f4>
 8009172:	e012      	b.n	800919a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009174:	f7fe ff80 	bl	8008078 <HAL_GetTick>
 8009178:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800917a:	e008      	b.n	800918e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800917c:	f7fe ff7c 	bl	8008078 <HAL_GetTick>
 8009180:	4602      	mov	r2, r0
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	2b64      	cmp	r3, #100	@ 0x64
 8009188:	d901      	bls.n	800918e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800918a:	2303      	movs	r3, #3
 800918c:	e31a      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800918e:	4b0e      	ldr	r3, [pc, #56]	@ (80091c8 <HAL_RCC_OscConfig+0x268>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1f0      	bne.n	800917c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 809a 	beq.w	80092dc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d005      	beq.n	80091ba <HAL_RCC_OscConfig+0x25a>
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	2b18      	cmp	r3, #24
 80091b2:	d149      	bne.n	8009248 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d146      	bne.n	8009248 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d104      	bne.n	80091cc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e2fe      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
 80091c6:	bf00      	nop
 80091c8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d11c      	bne.n	800920c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80091d2:	4b9a      	ldr	r3, [pc, #616]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0218 	and.w	r2, r3, #24
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d014      	beq.n	800920c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80091e2:	4b96      	ldr	r3, [pc, #600]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f023 0218 	bic.w	r2, r3, #24
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	4993      	ldr	r1, [pc, #588]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80091f4:	f000 fdd0 	bl	8009d98 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80091f8:	4b91      	ldr	r3, [pc, #580]	@ (8009440 <HAL_RCC_OscConfig+0x4e0>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fe feb1 	bl	8007f64 <HAL_InitTick>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e2db      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800920c:	f7fe ff34 	bl	8008078 <HAL_GetTick>
 8009210:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009212:	e008      	b.n	8009226 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8009214:	f7fe ff30 	bl	8008078 <HAL_GetTick>
 8009218:	4602      	mov	r2, r0
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	2b02      	cmp	r3, #2
 8009220:	d901      	bls.n	8009226 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8009222:	2303      	movs	r3, #3
 8009224:	e2ce      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009226:	4b85      	ldr	r3, [pc, #532]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 0302 	and.w	r3, r3, #2
 800922e:	2b00      	cmp	r3, #0
 8009230:	d0f0      	beq.n	8009214 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8009232:	4b82      	ldr	r3, [pc, #520]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	041b      	lsls	r3, r3, #16
 8009240:	497e      	ldr	r1, [pc, #504]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 8009242:	4313      	orrs	r3, r2
 8009244:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8009246:	e049      	b.n	80092dc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d02c      	beq.n	80092aa <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8009250:	4b7a      	ldr	r3, [pc, #488]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f023 0218 	bic.w	r2, r3, #24
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	4977      	ldr	r1, [pc, #476]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 800925e:	4313      	orrs	r3, r2
 8009260:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8009262:	4b76      	ldr	r3, [pc, #472]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a75      	ldr	r2, [pc, #468]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 8009268:	f043 0301 	orr.w	r3, r3, #1
 800926c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800926e:	f7fe ff03 	bl	8008078 <HAL_GetTick>
 8009272:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009274:	e008      	b.n	8009288 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8009276:	f7fe feff 	bl	8008078 <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	2b02      	cmp	r3, #2
 8009282:	d901      	bls.n	8009288 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e29d      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009288:	4b6c      	ldr	r3, [pc, #432]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d0f0      	beq.n	8009276 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8009294:	4b69      	ldr	r3, [pc, #420]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	041b      	lsls	r3, r3, #16
 80092a2:	4966      	ldr	r1, [pc, #408]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	610b      	str	r3, [r1, #16]
 80092a8:	e018      	b.n	80092dc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092aa:	4b64      	ldr	r3, [pc, #400]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a63      	ldr	r2, [pc, #396]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80092b0:	f023 0301 	bic.w	r3, r3, #1
 80092b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b6:	f7fe fedf 	bl	8008078 <HAL_GetTick>
 80092ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80092bc:	e008      	b.n	80092d0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80092be:	f7fe fedb 	bl	8008078 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d901      	bls.n	80092d0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e279      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80092d0:	4b5a      	ldr	r3, [pc, #360]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 0302 	and.w	r3, r3, #2
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1f0      	bne.n	80092be <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0308 	and.w	r3, r3, #8
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d03c      	beq.n	8009362 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d01c      	beq.n	800932a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092f0:	4b52      	ldr	r3, [pc, #328]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80092f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092f6:	4a51      	ldr	r2, [pc, #324]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80092f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80092fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009300:	f7fe feba 	bl	8008078 <HAL_GetTick>
 8009304:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009306:	e008      	b.n	800931a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8009308:	f7fe feb6 	bl	8008078 <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	2b02      	cmp	r3, #2
 8009314:	d901      	bls.n	800931a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e254      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800931a:	4b48      	ldr	r3, [pc, #288]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 800931c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0ef      	beq.n	8009308 <HAL_RCC_OscConfig+0x3a8>
 8009328:	e01b      	b.n	8009362 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800932a:	4b44      	ldr	r3, [pc, #272]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 800932c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009330:	4a42      	ldr	r2, [pc, #264]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 8009332:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009336:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800933a:	f7fe fe9d 	bl	8008078 <HAL_GetTick>
 800933e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009340:	e008      	b.n	8009354 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8009342:	f7fe fe99 	bl	8008078 <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	2b02      	cmp	r3, #2
 800934e:	d901      	bls.n	8009354 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e237      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009354:	4b39      	ldr	r3, [pc, #228]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 8009356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800935a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1ef      	bne.n	8009342 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0304 	and.w	r3, r3, #4
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 80d2 	beq.w	8009514 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009370:	4b34      	ldr	r3, [pc, #208]	@ (8009444 <HAL_RCC_OscConfig+0x4e4>)
 8009372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	2b00      	cmp	r3, #0
 800937a:	d118      	bne.n	80093ae <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800937c:	4b31      	ldr	r3, [pc, #196]	@ (8009444 <HAL_RCC_OscConfig+0x4e4>)
 800937e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009380:	4a30      	ldr	r2, [pc, #192]	@ (8009444 <HAL_RCC_OscConfig+0x4e4>)
 8009382:	f043 0301 	orr.w	r3, r3, #1
 8009386:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009388:	f7fe fe76 	bl	8008078 <HAL_GetTick>
 800938c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800938e:	e008      	b.n	80093a2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009390:	f7fe fe72 	bl	8008078 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	2b02      	cmp	r3, #2
 800939c:	d901      	bls.n	80093a2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e210      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80093a2:	4b28      	ldr	r3, [pc, #160]	@ (8009444 <HAL_RCC_OscConfig+0x4e4>)
 80093a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0f0      	beq.n	8009390 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d108      	bne.n	80093c8 <HAL_RCC_OscConfig+0x468>
 80093b6:	4b21      	ldr	r3, [pc, #132]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80093b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093bc:	4a1f      	ldr	r2, [pc, #124]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80093be:	f043 0301 	orr.w	r3, r3, #1
 80093c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80093c6:	e074      	b.n	80094b2 <HAL_RCC_OscConfig+0x552>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d118      	bne.n	8009402 <HAL_RCC_OscConfig+0x4a2>
 80093d0:	4b1a      	ldr	r3, [pc, #104]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80093d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093d6:	4a19      	ldr	r2, [pc, #100]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80093d8:	f023 0301 	bic.w	r3, r3, #1
 80093dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80093e0:	4b16      	ldr	r3, [pc, #88]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80093e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093e6:	4a15      	ldr	r2, [pc, #84]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80093e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80093f0:	4b12      	ldr	r3, [pc, #72]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80093f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093f6:	4a11      	ldr	r2, [pc, #68]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 80093f8:	f023 0304 	bic.w	r3, r3, #4
 80093fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009400:	e057      	b.n	80094b2 <HAL_RCC_OscConfig+0x552>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	2b05      	cmp	r3, #5
 8009408:	d11e      	bne.n	8009448 <HAL_RCC_OscConfig+0x4e8>
 800940a:	4b0c      	ldr	r3, [pc, #48]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 800940c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009410:	4a0a      	ldr	r2, [pc, #40]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 8009412:	f043 0304 	orr.w	r3, r3, #4
 8009416:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800941a:	4b08      	ldr	r3, [pc, #32]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 800941c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009420:	4a06      	ldr	r2, [pc, #24]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 8009422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009426:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800942a:	4b04      	ldr	r3, [pc, #16]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 800942c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009430:	4a02      	ldr	r2, [pc, #8]	@ (800943c <HAL_RCC_OscConfig+0x4dc>)
 8009432:	f043 0301 	orr.w	r3, r3, #1
 8009436:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800943a:	e03a      	b.n	80094b2 <HAL_RCC_OscConfig+0x552>
 800943c:	44020c00 	.word	0x44020c00
 8009440:	20000058 	.word	0x20000058
 8009444:	44020800 	.word	0x44020800
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	2b85      	cmp	r3, #133	@ 0x85
 800944e:	d118      	bne.n	8009482 <HAL_RCC_OscConfig+0x522>
 8009450:	4ba2      	ldr	r3, [pc, #648]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009456:	4aa1      	ldr	r2, [pc, #644]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009458:	f043 0304 	orr.w	r3, r3, #4
 800945c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009460:	4b9e      	ldr	r3, [pc, #632]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009466:	4a9d      	ldr	r2, [pc, #628]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800946c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009470:	4b9a      	ldr	r3, [pc, #616]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009476:	4a99      	ldr	r2, [pc, #612]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009478:	f043 0301 	orr.w	r3, r3, #1
 800947c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009480:	e017      	b.n	80094b2 <HAL_RCC_OscConfig+0x552>
 8009482:	4b96      	ldr	r3, [pc, #600]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009488:	4a94      	ldr	r2, [pc, #592]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 800948a:	f023 0301 	bic.w	r3, r3, #1
 800948e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009492:	4b92      	ldr	r3, [pc, #584]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009494:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009498:	4a90      	ldr	r2, [pc, #576]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 800949a:	f023 0304 	bic.w	r3, r3, #4
 800949e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80094a2:	4b8e      	ldr	r3, [pc, #568]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 80094a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094a8:	4a8c      	ldr	r2, [pc, #560]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 80094aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d016      	beq.n	80094e8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094ba:	f7fe fddd 	bl	8008078 <HAL_GetTick>
 80094be:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094c0:	e00a      	b.n	80094d8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094c2:	f7fe fdd9 	bl	8008078 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d901      	bls.n	80094d8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80094d4:	2303      	movs	r3, #3
 80094d6:	e175      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094d8:	4b80      	ldr	r3, [pc, #512]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 80094da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d0ed      	beq.n	80094c2 <HAL_RCC_OscConfig+0x562>
 80094e6:	e015      	b.n	8009514 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094e8:	f7fe fdc6 	bl	8008078 <HAL_GetTick>
 80094ec:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80094ee:	e00a      	b.n	8009506 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094f0:	f7fe fdc2 	bl	8008078 <HAL_GetTick>
 80094f4:	4602      	mov	r2, r0
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094fe:	4293      	cmp	r3, r2
 8009500:	d901      	bls.n	8009506 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e15e      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009506:	4b75      	ldr	r3, [pc, #468]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800950c:	f003 0302 	and.w	r3, r3, #2
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1ed      	bne.n	80094f0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0320 	and.w	r3, r3, #32
 800951c:	2b00      	cmp	r3, #0
 800951e:	d036      	beq.n	800958e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009524:	2b00      	cmp	r3, #0
 8009526:	d019      	beq.n	800955c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009528:	4b6c      	ldr	r3, [pc, #432]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a6b      	ldr	r2, [pc, #428]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 800952e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009532:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009534:	f7fe fda0 	bl	8008078 <HAL_GetTick>
 8009538:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800953a:	e008      	b.n	800954e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800953c:	f7fe fd9c 	bl	8008078 <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	2b02      	cmp	r3, #2
 8009548:	d901      	bls.n	800954e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e13a      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800954e:	4b63      	ldr	r3, [pc, #396]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009556:	2b00      	cmp	r3, #0
 8009558:	d0f0      	beq.n	800953c <HAL_RCC_OscConfig+0x5dc>
 800955a:	e018      	b.n	800958e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800955c:	4b5f      	ldr	r3, [pc, #380]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a5e      	ldr	r2, [pc, #376]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009562:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009566:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009568:	f7fe fd86 	bl	8008078 <HAL_GetTick>
 800956c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800956e:	e008      	b.n	8009582 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8009570:	f7fe fd82 	bl	8008078 <HAL_GetTick>
 8009574:	4602      	mov	r2, r0
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	2b02      	cmp	r3, #2
 800957c:	d901      	bls.n	8009582 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e120      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009582:	4b56      	ldr	r3, [pc, #344]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1f0      	bne.n	8009570 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009592:	2b00      	cmp	r3, #0
 8009594:	f000 8115 	beq.w	80097c2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	2b18      	cmp	r3, #24
 800959c:	f000 80af 	beq.w	80096fe <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	f040 8086 	bne.w	80096b6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80095aa:	4b4c      	ldr	r3, [pc, #304]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a4b      	ldr	r2, [pc, #300]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 80095b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095b6:	f7fe fd5f 	bl	8008078 <HAL_GetTick>
 80095ba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80095bc:	e008      	b.n	80095d0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80095be:	f7fe fd5b 	bl	8008078 <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d901      	bls.n	80095d0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e0f9      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80095d0:	4b42      	ldr	r3, [pc, #264]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1f0      	bne.n	80095be <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80095dc:	4b3f      	ldr	r3, [pc, #252]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 80095de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80095e4:	f023 0303 	bic.w	r3, r3, #3
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80095f0:	0212      	lsls	r2, r2, #8
 80095f2:	430a      	orrs	r2, r1
 80095f4:	4939      	ldr	r1, [pc, #228]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 80095f6:	4313      	orrs	r3, r2
 80095f8:	628b      	str	r3, [r1, #40]	@ 0x28
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095fe:	3b01      	subs	r3, #1
 8009600:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009608:	3b01      	subs	r3, #1
 800960a:	025b      	lsls	r3, r3, #9
 800960c:	b29b      	uxth	r3, r3
 800960e:	431a      	orrs	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009614:	3b01      	subs	r3, #1
 8009616:	041b      	lsls	r3, r3, #16
 8009618:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800961c:	431a      	orrs	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009622:	3b01      	subs	r3, #1
 8009624:	061b      	lsls	r3, r3, #24
 8009626:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800962a:	492c      	ldr	r1, [pc, #176]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 800962c:	4313      	orrs	r3, r2
 800962e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8009630:	4b2a      	ldr	r3, [pc, #168]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009634:	4a29      	ldr	r2, [pc, #164]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009636:	f023 0310 	bic.w	r3, r3, #16
 800963a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009640:	4a26      	ldr	r2, [pc, #152]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009642:	00db      	lsls	r3, r3, #3
 8009644:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8009646:	4b25      	ldr	r3, [pc, #148]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800964a:	4a24      	ldr	r2, [pc, #144]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 800964c:	f043 0310 	orr.w	r3, r3, #16
 8009650:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8009652:	4b22      	ldr	r3, [pc, #136]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009656:	f023 020c 	bic.w	r2, r3, #12
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800965e:	491f      	ldr	r1, [pc, #124]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009660:	4313      	orrs	r3, r2
 8009662:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8009664:	4b1d      	ldr	r3, [pc, #116]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009668:	f023 0220 	bic.w	r2, r3, #32
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009670:	491a      	ldr	r1, [pc, #104]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009672:	4313      	orrs	r3, r2
 8009674:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009676:	4b19      	ldr	r3, [pc, #100]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800967a:	4a18      	ldr	r2, [pc, #96]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 800967c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009680:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8009682:	4b16      	ldr	r3, [pc, #88]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a15      	ldr	r2, [pc, #84]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 8009688:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800968c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800968e:	f7fe fcf3 	bl	8008078 <HAL_GetTick>
 8009692:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009694:	e008      	b.n	80096a8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8009696:	f7fe fcef 	bl	8008078 <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d901      	bls.n	80096a8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e08d      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80096a8:	4b0c      	ldr	r3, [pc, #48]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d0f0      	beq.n	8009696 <HAL_RCC_OscConfig+0x736>
 80096b4:	e085      	b.n	80097c2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80096b6:	4b09      	ldr	r3, [pc, #36]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a08      	ldr	r2, [pc, #32]	@ (80096dc <HAL_RCC_OscConfig+0x77c>)
 80096bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80096c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096c2:	f7fe fcd9 	bl	8008078 <HAL_GetTick>
 80096c6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80096c8:	e00a      	b.n	80096e0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80096ca:	f7fe fcd5 	bl	8008078 <HAL_GetTick>
 80096ce:	4602      	mov	r2, r0
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d903      	bls.n	80096e0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80096d8:	2303      	movs	r3, #3
 80096da:	e073      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
 80096dc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80096e0:	4b3a      	ldr	r3, [pc, #232]	@ (80097cc <HAL_RCC_OscConfig+0x86c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1ee      	bne.n	80096ca <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80096ec:	4b37      	ldr	r3, [pc, #220]	@ (80097cc <HAL_RCC_OscConfig+0x86c>)
 80096ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f0:	4a36      	ldr	r2, [pc, #216]	@ (80097cc <HAL_RCC_OscConfig+0x86c>)
 80096f2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80096f6:	f023 0303 	bic.w	r3, r3, #3
 80096fa:	6293      	str	r3, [r2, #40]	@ 0x28
 80096fc:	e061      	b.n	80097c2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80096fe:	4b33      	ldr	r3, [pc, #204]	@ (80097cc <HAL_RCC_OscConfig+0x86c>)
 8009700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009702:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009704:	4b31      	ldr	r3, [pc, #196]	@ (80097cc <HAL_RCC_OscConfig+0x86c>)
 8009706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009708:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800970e:	2b01      	cmp	r3, #1
 8009710:	d031      	beq.n	8009776 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f003 0203 	and.w	r2, r3, #3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800971c:	429a      	cmp	r2, r3
 800971e:	d12a      	bne.n	8009776 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	0a1b      	lsrs	r3, r3, #8
 8009724:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800972c:	429a      	cmp	r2, r3
 800972e:	d122      	bne.n	8009776 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800973a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800973c:	429a      	cmp	r2, r3
 800973e:	d11a      	bne.n	8009776 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	0a5b      	lsrs	r3, r3, #9
 8009744:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800974e:	429a      	cmp	r2, r3
 8009750:	d111      	bne.n	8009776 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	0c1b      	lsrs	r3, r3, #16
 8009756:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800975e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8009760:	429a      	cmp	r2, r3
 8009762:	d108      	bne.n	8009776 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	0e1b      	lsrs	r3, r3, #24
 8009768:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009770:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8009772:	429a      	cmp	r2, r3
 8009774:	d001      	beq.n	800977a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e024      	b.n	80097c4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800977a:	4b14      	ldr	r3, [pc, #80]	@ (80097cc <HAL_RCC_OscConfig+0x86c>)
 800977c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800977e:	08db      	lsrs	r3, r3, #3
 8009780:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009788:	429a      	cmp	r2, r3
 800978a:	d01a      	beq.n	80097c2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800978c:	4b0f      	ldr	r3, [pc, #60]	@ (80097cc <HAL_RCC_OscConfig+0x86c>)
 800978e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009790:	4a0e      	ldr	r2, [pc, #56]	@ (80097cc <HAL_RCC_OscConfig+0x86c>)
 8009792:	f023 0310 	bic.w	r3, r3, #16
 8009796:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009798:	f7fe fc6e 	bl	8008078 <HAL_GetTick>
 800979c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800979e:	bf00      	nop
 80097a0:	f7fe fc6a 	bl	8008078 <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d0f9      	beq.n	80097a0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097b0:	4a06      	ldr	r2, [pc, #24]	@ (80097cc <HAL_RCC_OscConfig+0x86c>)
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80097b6:	4b05      	ldr	r3, [pc, #20]	@ (80097cc <HAL_RCC_OscConfig+0x86c>)
 80097b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ba:	4a04      	ldr	r2, [pc, #16]	@ (80097cc <HAL_RCC_OscConfig+0x86c>)
 80097bc:	f043 0310 	orr.w	r3, r3, #16
 80097c0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3720      	adds	r7, #32
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	44020c00 	.word	0x44020c00

080097d0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e19e      	b.n	8009b22 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80097e4:	4b83      	ldr	r3, [pc, #524]	@ (80099f4 <HAL_RCC_ClockConfig+0x224>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 030f 	and.w	r3, r3, #15
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d910      	bls.n	8009814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097f2:	4b80      	ldr	r3, [pc, #512]	@ (80099f4 <HAL_RCC_ClockConfig+0x224>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f023 020f 	bic.w	r2, r3, #15
 80097fa:	497e      	ldr	r1, [pc, #504]	@ (80099f4 <HAL_RCC_ClockConfig+0x224>)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	4313      	orrs	r3, r2
 8009800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009802:	4b7c      	ldr	r3, [pc, #496]	@ (80099f4 <HAL_RCC_ClockConfig+0x224>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 030f 	and.w	r3, r3, #15
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	429a      	cmp	r2, r3
 800980e:	d001      	beq.n	8009814 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e186      	b.n	8009b22 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 0310 	and.w	r3, r3, #16
 800981c:	2b00      	cmp	r3, #0
 800981e:	d012      	beq.n	8009846 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	695a      	ldr	r2, [r3, #20]
 8009824:	4b74      	ldr	r3, [pc, #464]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 8009826:	6a1b      	ldr	r3, [r3, #32]
 8009828:	0a1b      	lsrs	r3, r3, #8
 800982a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800982e:	429a      	cmp	r2, r3
 8009830:	d909      	bls.n	8009846 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8009832:	4b71      	ldr	r3, [pc, #452]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	021b      	lsls	r3, r3, #8
 8009840:	496d      	ldr	r1, [pc, #436]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 8009842:	4313      	orrs	r3, r2
 8009844:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 0308 	and.w	r3, r3, #8
 800984e:	2b00      	cmp	r3, #0
 8009850:	d012      	beq.n	8009878 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	691a      	ldr	r2, [r3, #16]
 8009856:	4b68      	ldr	r3, [pc, #416]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 8009858:	6a1b      	ldr	r3, [r3, #32]
 800985a:	091b      	lsrs	r3, r3, #4
 800985c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009860:	429a      	cmp	r2, r3
 8009862:	d909      	bls.n	8009878 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8009864:	4b64      	ldr	r3, [pc, #400]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	4961      	ldr	r1, [pc, #388]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 8009874:	4313      	orrs	r3, r2
 8009876:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 0304 	and.w	r3, r3, #4
 8009880:	2b00      	cmp	r3, #0
 8009882:	d010      	beq.n	80098a6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	4b5b      	ldr	r3, [pc, #364]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 800988a:	6a1b      	ldr	r3, [r3, #32]
 800988c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009890:	429a      	cmp	r2, r3
 8009892:	d908      	bls.n	80098a6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8009894:	4b58      	ldr	r3, [pc, #352]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	4955      	ldr	r1, [pc, #340]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 0302 	and.w	r3, r3, #2
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d010      	beq.n	80098d4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	4b50      	ldr	r3, [pc, #320]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	f003 030f 	and.w	r3, r3, #15
 80098be:	429a      	cmp	r2, r3
 80098c0:	d908      	bls.n	80098d4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80098c2:	4b4d      	ldr	r3, [pc, #308]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	f023 020f 	bic.w	r2, r3, #15
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	494a      	ldr	r1, [pc, #296]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 80098d0:	4313      	orrs	r3, r2
 80098d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0301 	and.w	r3, r3, #1
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 8093 	beq.w	8009a08 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	2b03      	cmp	r3, #3
 80098e8:	d107      	bne.n	80098fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80098ea:	4b43      	ldr	r3, [pc, #268]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d121      	bne.n	800993a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e113      	b.n	8009b22 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d107      	bne.n	8009912 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009902:	4b3d      	ldr	r3, [pc, #244]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d115      	bne.n	800993a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e107      	b.n	8009b22 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d107      	bne.n	800992a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800991a:	4b37      	ldr	r3, [pc, #220]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009922:	2b00      	cmp	r3, #0
 8009924:	d109      	bne.n	800993a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e0fb      	b.n	8009b22 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800992a:	4b33      	ldr	r3, [pc, #204]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e0f3      	b.n	8009b22 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800993a:	4b2f      	ldr	r3, [pc, #188]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	f023 0203 	bic.w	r2, r3, #3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	492c      	ldr	r1, [pc, #176]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 8009948:	4313      	orrs	r3, r2
 800994a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800994c:	f7fe fb94 	bl	8008078 <HAL_GetTick>
 8009950:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	2b03      	cmp	r3, #3
 8009958:	d112      	bne.n	8009980 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800995a:	e00a      	b.n	8009972 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800995c:	f7fe fb8c 	bl	8008078 <HAL_GetTick>
 8009960:	4602      	mov	r2, r0
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800996a:	4293      	cmp	r3, r2
 800996c:	d901      	bls.n	8009972 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e0d7      	b.n	8009b22 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009972:	4b21      	ldr	r3, [pc, #132]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	f003 0318 	and.w	r3, r3, #24
 800997a:	2b18      	cmp	r3, #24
 800997c:	d1ee      	bne.n	800995c <HAL_RCC_ClockConfig+0x18c>
 800997e:	e043      	b.n	8009a08 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	2b02      	cmp	r3, #2
 8009986:	d112      	bne.n	80099ae <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009988:	e00a      	b.n	80099a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800998a:	f7fe fb75 	bl	8008078 <HAL_GetTick>
 800998e:	4602      	mov	r2, r0
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009998:	4293      	cmp	r3, r2
 800999a:	d901      	bls.n	80099a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e0c0      	b.n	8009b22 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80099a0:	4b15      	ldr	r3, [pc, #84]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	f003 0318 	and.w	r3, r3, #24
 80099a8:	2b10      	cmp	r3, #16
 80099aa:	d1ee      	bne.n	800998a <HAL_RCC_ClockConfig+0x1ba>
 80099ac:	e02c      	b.n	8009a08 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d122      	bne.n	80099fc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80099b6:	e00a      	b.n	80099ce <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80099b8:	f7fe fb5e 	bl	8008078 <HAL_GetTick>
 80099bc:	4602      	mov	r2, r0
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d901      	bls.n	80099ce <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e0a9      	b.n	8009b22 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80099ce:	4b0a      	ldr	r3, [pc, #40]	@ (80099f8 <HAL_RCC_ClockConfig+0x228>)
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	f003 0318 	and.w	r3, r3, #24
 80099d6:	2b08      	cmp	r3, #8
 80099d8:	d1ee      	bne.n	80099b8 <HAL_RCC_ClockConfig+0x1e8>
 80099da:	e015      	b.n	8009a08 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80099dc:	f7fe fb4c 	bl	8008078 <HAL_GetTick>
 80099e0:	4602      	mov	r2, r0
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d906      	bls.n	80099fc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80099ee:	2303      	movs	r3, #3
 80099f0:	e097      	b.n	8009b22 <HAL_RCC_ClockConfig+0x352>
 80099f2:	bf00      	nop
 80099f4:	40022000 	.word	0x40022000
 80099f8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80099fc:	4b4b      	ldr	r3, [pc, #300]	@ (8009b2c <HAL_RCC_ClockConfig+0x35c>)
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	f003 0318 	and.w	r3, r3, #24
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1e9      	bne.n	80099dc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 0302 	and.w	r3, r3, #2
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d010      	beq.n	8009a36 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	689a      	ldr	r2, [r3, #8]
 8009a18:	4b44      	ldr	r3, [pc, #272]	@ (8009b2c <HAL_RCC_ClockConfig+0x35c>)
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	f003 030f 	and.w	r3, r3, #15
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d208      	bcs.n	8009a36 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8009a24:	4b41      	ldr	r3, [pc, #260]	@ (8009b2c <HAL_RCC_ClockConfig+0x35c>)
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	f023 020f 	bic.w	r2, r3, #15
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	493e      	ldr	r1, [pc, #248]	@ (8009b2c <HAL_RCC_ClockConfig+0x35c>)
 8009a32:	4313      	orrs	r3, r2
 8009a34:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a36:	4b3e      	ldr	r3, [pc, #248]	@ (8009b30 <HAL_RCC_ClockConfig+0x360>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 030f 	and.w	r3, r3, #15
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d210      	bcs.n	8009a66 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a44:	4b3a      	ldr	r3, [pc, #232]	@ (8009b30 <HAL_RCC_ClockConfig+0x360>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f023 020f 	bic.w	r2, r3, #15
 8009a4c:	4938      	ldr	r1, [pc, #224]	@ (8009b30 <HAL_RCC_ClockConfig+0x360>)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a54:	4b36      	ldr	r3, [pc, #216]	@ (8009b30 <HAL_RCC_ClockConfig+0x360>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 030f 	and.w	r3, r3, #15
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d001      	beq.n	8009a66 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e05d      	b.n	8009b22 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f003 0304 	and.w	r3, r3, #4
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d010      	beq.n	8009a94 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	4b2d      	ldr	r3, [pc, #180]	@ (8009b2c <HAL_RCC_ClockConfig+0x35c>)
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d208      	bcs.n	8009a94 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8009a82:	4b2a      	ldr	r3, [pc, #168]	@ (8009b2c <HAL_RCC_ClockConfig+0x35c>)
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	4927      	ldr	r1, [pc, #156]	@ (8009b2c <HAL_RCC_ClockConfig+0x35c>)
 8009a90:	4313      	orrs	r3, r2
 8009a92:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 0308 	and.w	r3, r3, #8
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d012      	beq.n	8009ac6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	691a      	ldr	r2, [r3, #16]
 8009aa4:	4b21      	ldr	r3, [pc, #132]	@ (8009b2c <HAL_RCC_ClockConfig+0x35c>)
 8009aa6:	6a1b      	ldr	r3, [r3, #32]
 8009aa8:	091b      	lsrs	r3, r3, #4
 8009aaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d209      	bcs.n	8009ac6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8009ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8009b2c <HAL_RCC_ClockConfig+0x35c>)
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	011b      	lsls	r3, r3, #4
 8009ac0:	491a      	ldr	r1, [pc, #104]	@ (8009b2c <HAL_RCC_ClockConfig+0x35c>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 0310 	and.w	r3, r3, #16
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d012      	beq.n	8009af8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	695a      	ldr	r2, [r3, #20]
 8009ad6:	4b15      	ldr	r3, [pc, #84]	@ (8009b2c <HAL_RCC_ClockConfig+0x35c>)
 8009ad8:	6a1b      	ldr	r3, [r3, #32]
 8009ada:	0a1b      	lsrs	r3, r3, #8
 8009adc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d209      	bcs.n	8009af8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8009ae4:	4b11      	ldr	r3, [pc, #68]	@ (8009b2c <HAL_RCC_ClockConfig+0x35c>)
 8009ae6:	6a1b      	ldr	r3, [r3, #32]
 8009ae8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	021b      	lsls	r3, r3, #8
 8009af2:	490e      	ldr	r1, [pc, #56]	@ (8009b2c <HAL_RCC_ClockConfig+0x35c>)
 8009af4:	4313      	orrs	r3, r2
 8009af6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009af8:	f000 f822 	bl	8009b40 <HAL_RCC_GetSysClockFreq>
 8009afc:	4602      	mov	r2, r0
 8009afe:	4b0b      	ldr	r3, [pc, #44]	@ (8009b2c <HAL_RCC_ClockConfig+0x35c>)
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	f003 030f 	and.w	r3, r3, #15
 8009b06:	490b      	ldr	r1, [pc, #44]	@ (8009b34 <HAL_RCC_ClockConfig+0x364>)
 8009b08:	5ccb      	ldrb	r3, [r1, r3]
 8009b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8009b38 <HAL_RCC_ClockConfig+0x368>)
 8009b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009b12:	4b0a      	ldr	r3, [pc, #40]	@ (8009b3c <HAL_RCC_ClockConfig+0x36c>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fe fa24 	bl	8007f64 <HAL_InitTick>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8009b20:	7afb      	ldrb	r3, [r7, #11]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	44020c00 	.word	0x44020c00
 8009b30:	40022000 	.word	0x40022000
 8009b34:	0800ebc4 	.word	0x0800ebc4
 8009b38:	20000054 	.word	0x20000054
 8009b3c:	20000058 	.word	0x20000058

08009b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b089      	sub	sp, #36	@ 0x24
 8009b44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8009b46:	4b8c      	ldr	r3, [pc, #560]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b48:	69db      	ldr	r3, [r3, #28]
 8009b4a:	f003 0318 	and.w	r3, r3, #24
 8009b4e:	2b08      	cmp	r3, #8
 8009b50:	d102      	bne.n	8009b58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009b52:	4b8a      	ldr	r3, [pc, #552]	@ (8009d7c <HAL_RCC_GetSysClockFreq+0x23c>)
 8009b54:	61fb      	str	r3, [r7, #28]
 8009b56:	e107      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009b58:	4b87      	ldr	r3, [pc, #540]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b5a:	69db      	ldr	r3, [r3, #28]
 8009b5c:	f003 0318 	and.w	r3, r3, #24
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d112      	bne.n	8009b8a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8009b64:	4b84      	ldr	r3, [pc, #528]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0320 	and.w	r3, r3, #32
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d009      	beq.n	8009b84 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b70:	4b81      	ldr	r3, [pc, #516]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	08db      	lsrs	r3, r3, #3
 8009b76:	f003 0303 	and.w	r3, r3, #3
 8009b7a:	4a81      	ldr	r2, [pc, #516]	@ (8009d80 <HAL_RCC_GetSysClockFreq+0x240>)
 8009b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b80:	61fb      	str	r3, [r7, #28]
 8009b82:	e0f1      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8009b84:	4b7e      	ldr	r3, [pc, #504]	@ (8009d80 <HAL_RCC_GetSysClockFreq+0x240>)
 8009b86:	61fb      	str	r3, [r7, #28]
 8009b88:	e0ee      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009b8a:	4b7b      	ldr	r3, [pc, #492]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	f003 0318 	and.w	r3, r3, #24
 8009b92:	2b10      	cmp	r3, #16
 8009b94:	d102      	bne.n	8009b9c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009b96:	4b7b      	ldr	r3, [pc, #492]	@ (8009d84 <HAL_RCC_GetSysClockFreq+0x244>)
 8009b98:	61fb      	str	r3, [r7, #28]
 8009b9a:	e0e5      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009b9c:	4b76      	ldr	r3, [pc, #472]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b9e:	69db      	ldr	r3, [r3, #28]
 8009ba0:	f003 0318 	and.w	r3, r3, #24
 8009ba4:	2b18      	cmp	r3, #24
 8009ba6:	f040 80dd 	bne.w	8009d64 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009baa:	4b73      	ldr	r3, [pc, #460]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bae:	f003 0303 	and.w	r3, r3, #3
 8009bb2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8009bb4:	4b70      	ldr	r3, [pc, #448]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bb8:	0a1b      	lsrs	r3, r3, #8
 8009bba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bbe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009bc0:	4b6d      	ldr	r3, [pc, #436]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc4:	091b      	lsrs	r3, r3, #4
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8009bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8009bd0:	08db      	lsrs	r3, r3, #3
 8009bd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	fb02 f303 	mul.w	r3, r2, r3
 8009bdc:	ee07 3a90 	vmov	s15, r3
 8009be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 80b7 	beq.w	8009d5e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d003      	beq.n	8009bfe <HAL_RCC_GetSysClockFreq+0xbe>
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b03      	cmp	r3, #3
 8009bfa:	d056      	beq.n	8009caa <HAL_RCC_GetSysClockFreq+0x16a>
 8009bfc:	e077      	b.n	8009cee <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8009bfe:	4b5e      	ldr	r3, [pc, #376]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 0320 	and.w	r3, r3, #32
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d02d      	beq.n	8009c66 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	08db      	lsrs	r3, r3, #3
 8009c10:	f003 0303 	and.w	r3, r3, #3
 8009c14:	4a5a      	ldr	r2, [pc, #360]	@ (8009d80 <HAL_RCC_GetSysClockFreq+0x240>)
 8009c16:	fa22 f303 	lsr.w	r3, r2, r3
 8009c1a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	ee07 3a90 	vmov	s15, r3
 8009c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	ee07 3a90 	vmov	s15, r3
 8009c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c34:	4b50      	ldr	r3, [pc, #320]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3c:	ee07 3a90 	vmov	s15, r3
 8009c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c44:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c48:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8009d88 <HAL_RCC_GetSysClockFreq+0x248>
 8009c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c60:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8009c64:	e065      	b.n	8009d32 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	ee07 3a90 	vmov	s15, r3
 8009c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c70:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8009d8c <HAL_RCC_GetSysClockFreq+0x24c>
 8009c74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c78:	4b3f      	ldr	r3, [pc, #252]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c80:	ee07 3a90 	vmov	s15, r3
 8009c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c88:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c8c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009d88 <HAL_RCC_GetSysClockFreq+0x248>
 8009c90:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8009ca8:	e043      	b.n	8009d32 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	ee07 3a90 	vmov	s15, r3
 8009cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8009d90 <HAL_RCC_GetSysClockFreq+0x250>
 8009cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc4:	ee07 3a90 	vmov	s15, r3
 8009cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ccc:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cd0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8009d88 <HAL_RCC_GetSysClockFreq+0x248>
 8009cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8009cec:	e021      	b.n	8009d32 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	ee07 3a90 	vmov	s15, r3
 8009cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009d94 <HAL_RCC_GetSysClockFreq+0x254>
 8009cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d00:	4b1d      	ldr	r3, [pc, #116]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d08:	ee07 3a90 	vmov	s15, r3
 8009d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d10:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d14:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8009d88 <HAL_RCC_GetSysClockFreq+0x248>
 8009d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d2c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8009d30:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8009d32:	4b11      	ldr	r3, [pc, #68]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x238>)
 8009d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d36:	0a5b      	lsrs	r3, r3, #9
 8009d38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	ee07 3a90 	vmov	s15, r3
 8009d46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d4a:	edd7 6a06 	vldr	s13, [r7, #24]
 8009d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d56:	ee17 3a90 	vmov	r3, s15
 8009d5a:	61fb      	str	r3, [r7, #28]
 8009d5c:	e004      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	61fb      	str	r3, [r7, #28]
 8009d62:	e001      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8009d64:	4b06      	ldr	r3, [pc, #24]	@ (8009d80 <HAL_RCC_GetSysClockFreq+0x240>)
 8009d66:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8009d68:	69fb      	ldr	r3, [r7, #28]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3724      	adds	r7, #36	@ 0x24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	44020c00 	.word	0x44020c00
 8009d7c:	003d0900 	.word	0x003d0900
 8009d80:	03d09000 	.word	0x03d09000
 8009d84:	017d7840 	.word	0x017d7840
 8009d88:	46000000 	.word	0x46000000
 8009d8c:	4c742400 	.word	0x4c742400
 8009d90:	4bbebc20 	.word	0x4bbebc20
 8009d94:	4a742400 	.word	0x4a742400

08009d98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8009d9c:	f7ff fed0 	bl	8009b40 <HAL_RCC_GetSysClockFreq>
 8009da0:	4602      	mov	r2, r0
 8009da2:	4b08      	ldr	r3, [pc, #32]	@ (8009dc4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8009da4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8009da6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8009daa:	4907      	ldr	r1, [pc, #28]	@ (8009dc8 <HAL_RCC_GetHCLKFreq+0x30>)
 8009dac:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8009dae:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8009db2:	fa22 f303 	lsr.w	r3, r2, r3
 8009db6:	4a05      	ldr	r2, [pc, #20]	@ (8009dcc <HAL_RCC_GetHCLKFreq+0x34>)
 8009db8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8009dba:	4b04      	ldr	r3, [pc, #16]	@ (8009dcc <HAL_RCC_GetHCLKFreq+0x34>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	44020c00 	.word	0x44020c00
 8009dc8:	0800ebc4 	.word	0x0800ebc4
 8009dcc:	20000054 	.word	0x20000054

08009dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8009dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dd4:	b0d8      	sub	sp, #352	@ 0x160
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009de2:	2300      	movs	r3, #0
 8009de4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8009df4:	2500      	movs	r5, #0
 8009df6:	ea54 0305 	orrs.w	r3, r4, r5
 8009dfa:	d00b      	beq.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8009dfc:	4bcd      	ldr	r3, [pc, #820]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009dfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e02:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8009e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e0c:	4ac9      	ldr	r2, [pc, #804]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009e0e:	430b      	orrs	r3, r1
 8009e10:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009e14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1c:	f002 0801 	and.w	r8, r2, #1
 8009e20:	f04f 0900 	mov.w	r9, #0
 8009e24:	ea58 0309 	orrs.w	r3, r8, r9
 8009e28:	d042      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8009e2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e30:	2b05      	cmp	r3, #5
 8009e32:	d823      	bhi.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8009e34:	a201      	add	r2, pc, #4	@ (adr r2, 8009e3c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8009e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3a:	bf00      	nop
 8009e3c:	08009e85 	.word	0x08009e85
 8009e40:	08009e55 	.word	0x08009e55
 8009e44:	08009e69 	.word	0x08009e69
 8009e48:	08009e85 	.word	0x08009e85
 8009e4c:	08009e85 	.word	0x08009e85
 8009e50:	08009e85 	.word	0x08009e85
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e58:	3308      	adds	r3, #8
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f001 ff42 	bl	800bce4 <RCCEx_PLL2_Config>
 8009e60:	4603      	mov	r3, r0
 8009e62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8009e66:	e00e      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e6c:	3330      	adds	r3, #48	@ 0x30
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f001 ffd0 	bl	800be14 <RCCEx_PLL3_Config>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8009e7a:	e004      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009e82:	e000      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8009e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10c      	bne.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8009e8e:	4ba9      	ldr	r3, [pc, #676]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009e90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009e94:	f023 0107 	bic.w	r1, r3, #7
 8009e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e9e:	4aa5      	ldr	r2, [pc, #660]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8009ea6:	e003      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009eac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f002 0a02 	and.w	sl, r2, #2
 8009ebc:	f04f 0b00 	mov.w	fp, #0
 8009ec0:	ea5a 030b 	orrs.w	r3, sl, fp
 8009ec4:	f000 8088 	beq.w	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8009ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ece:	2b28      	cmp	r3, #40	@ 0x28
 8009ed0:	d868      	bhi.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8009ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed8:	08009fad 	.word	0x08009fad
 8009edc:	08009fa5 	.word	0x08009fa5
 8009ee0:	08009fa5 	.word	0x08009fa5
 8009ee4:	08009fa5 	.word	0x08009fa5
 8009ee8:	08009fa5 	.word	0x08009fa5
 8009eec:	08009fa5 	.word	0x08009fa5
 8009ef0:	08009fa5 	.word	0x08009fa5
 8009ef4:	08009fa5 	.word	0x08009fa5
 8009ef8:	08009f7d 	.word	0x08009f7d
 8009efc:	08009fa5 	.word	0x08009fa5
 8009f00:	08009fa5 	.word	0x08009fa5
 8009f04:	08009fa5 	.word	0x08009fa5
 8009f08:	08009fa5 	.word	0x08009fa5
 8009f0c:	08009fa5 	.word	0x08009fa5
 8009f10:	08009fa5 	.word	0x08009fa5
 8009f14:	08009fa5 	.word	0x08009fa5
 8009f18:	08009f91 	.word	0x08009f91
 8009f1c:	08009fa5 	.word	0x08009fa5
 8009f20:	08009fa5 	.word	0x08009fa5
 8009f24:	08009fa5 	.word	0x08009fa5
 8009f28:	08009fa5 	.word	0x08009fa5
 8009f2c:	08009fa5 	.word	0x08009fa5
 8009f30:	08009fa5 	.word	0x08009fa5
 8009f34:	08009fa5 	.word	0x08009fa5
 8009f38:	08009fad 	.word	0x08009fad
 8009f3c:	08009fa5 	.word	0x08009fa5
 8009f40:	08009fa5 	.word	0x08009fa5
 8009f44:	08009fa5 	.word	0x08009fa5
 8009f48:	08009fa5 	.word	0x08009fa5
 8009f4c:	08009fa5 	.word	0x08009fa5
 8009f50:	08009fa5 	.word	0x08009fa5
 8009f54:	08009fa5 	.word	0x08009fa5
 8009f58:	08009fad 	.word	0x08009fad
 8009f5c:	08009fa5 	.word	0x08009fa5
 8009f60:	08009fa5 	.word	0x08009fa5
 8009f64:	08009fa5 	.word	0x08009fa5
 8009f68:	08009fa5 	.word	0x08009fa5
 8009f6c:	08009fa5 	.word	0x08009fa5
 8009f70:	08009fa5 	.word	0x08009fa5
 8009f74:	08009fa5 	.word	0x08009fa5
 8009f78:	08009fad 	.word	0x08009fad
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009f80:	3308      	adds	r3, #8
 8009f82:	4618      	mov	r0, r3
 8009f84:	f001 feae 	bl	800bce4 <RCCEx_PLL2_Config>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8009f8e:	e00e      	b.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009f90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009f94:	3330      	adds	r3, #48	@ 0x30
 8009f96:	4618      	mov	r0, r3
 8009f98:	f001 ff3c 	bl	800be14 <RCCEx_PLL3_Config>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8009fa2:	e004      	b.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009faa:	e000      	b.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8009fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d10c      	bne.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8009fb6:	4b5f      	ldr	r3, [pc, #380]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009fbc:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009fc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fc6:	4a5b      	ldr	r2, [pc, #364]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009fc8:	430b      	orrs	r3, r1
 8009fca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8009fce:	e003      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fd0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009fd4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	f002 0304 	and.w	r3, r2, #4
 8009fe4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8009fe8:	2300      	movs	r3, #0
 8009fea:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8009fee:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	d04e      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8009ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009ffc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ffe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a002:	d02c      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800a004:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a008:	d825      	bhi.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a00a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a00e:	d028      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a010:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a014:	d81f      	bhi.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a016:	2bc0      	cmp	r3, #192	@ 0xc0
 800a018:	d025      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800a01a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a01c:	d81b      	bhi.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a01e:	2b80      	cmp	r3, #128	@ 0x80
 800a020:	d00f      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800a022:	2b80      	cmp	r3, #128	@ 0x80
 800a024:	d817      	bhi.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a026:	2b00      	cmp	r3, #0
 800a028:	d01f      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800a02a:	2b40      	cmp	r3, #64	@ 0x40
 800a02c:	d113      	bne.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a02e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a032:	3308      	adds	r3, #8
 800a034:	4618      	mov	r0, r3
 800a036:	f001 fe55 	bl	800bce4 <RCCEx_PLL2_Config>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800a040:	e014      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a042:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a046:	3330      	adds	r3, #48	@ 0x30
 800a048:	4618      	mov	r0, r3
 800a04a:	f001 fee3 	bl	800be14 <RCCEx_PLL3_Config>
 800a04e:	4603      	mov	r3, r0
 800a050:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800a054:	e00a      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a05c:	e006      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a05e:	bf00      	nop
 800a060:	e004      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a062:	bf00      	nop
 800a064:	e002      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a066:	bf00      	nop
 800a068:	e000      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a06a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a06c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10c      	bne.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800a074:	4b2f      	ldr	r3, [pc, #188]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a076:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a07a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a07e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a084:	4a2b      	ldr	r2, [pc, #172]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a086:	430b      	orrs	r3, r1
 800a088:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a08c:	e003      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a08e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a092:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a096:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f002 0308 	and.w	r3, r2, #8
 800a0a2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800a0ac:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	d056      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800a0b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a0ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a0bc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a0c0:	d031      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800a0c2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a0c6:	d82a      	bhi.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a0c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0cc:	d02d      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800a0ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0d2:	d824      	bhi.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a0d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a0d8:	d029      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800a0da:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a0de:	d81e      	bhi.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a0e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0e4:	d011      	beq.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800a0e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0ea:	d818      	bhi.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d023      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800a0f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0f4:	d113      	bne.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a0f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f001 fdf1 	bl	800bce4 <RCCEx_PLL2_Config>
 800a102:	4603      	mov	r3, r0
 800a104:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800a108:	e017      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a10a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a10e:	3330      	adds	r3, #48	@ 0x30
 800a110:	4618      	mov	r0, r3
 800a112:	f001 fe7f 	bl	800be14 <RCCEx_PLL3_Config>
 800a116:	4603      	mov	r3, r0
 800a118:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800a11c:	e00d      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a124:	e009      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800a126:	bf00      	nop
 800a128:	e007      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800a12a:	bf00      	nop
 800a12c:	e005      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800a12e:	bf00      	nop
 800a130:	e003      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800a132:	bf00      	nop
 800a134:	44020c00 	.word	0x44020c00
        break;
 800a138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a13a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10c      	bne.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800a142:	4bbb      	ldr	r3, [pc, #748]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a148:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800a14c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a150:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a152:	4ab7      	ldr	r2, [pc, #732]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a154:	430b      	orrs	r3, r1
 800a156:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a15a:	e003      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a15c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a160:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a164:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	f002 0310 	and.w	r3, r2, #16
 800a170:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800a174:	2300      	movs	r3, #0
 800a176:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800a17a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800a17e:	460b      	mov	r3, r1
 800a180:	4313      	orrs	r3, r2
 800a182:	d053      	beq.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800a184:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a18a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a18e:	d031      	beq.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800a190:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a194:	d82a      	bhi.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a196:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a19a:	d02d      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a19c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1a0:	d824      	bhi.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a1a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1a6:	d029      	beq.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800a1a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1ac:	d81e      	bhi.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a1ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1b2:	d011      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800a1b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1b8:	d818      	bhi.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d020      	beq.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800a1be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1c2:	d113      	bne.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a1c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f001 fd8a 	bl	800bce4 <RCCEx_PLL2_Config>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800a1d6:	e014      	b.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a1d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a1dc:	3330      	adds	r3, #48	@ 0x30
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f001 fe18 	bl	800be14 <RCCEx_PLL3_Config>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800a1ea:	e00a      	b.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a1f2:	e006      	b.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800a1f4:	bf00      	nop
 800a1f6:	e004      	b.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800a1f8:	bf00      	nop
 800a1fa:	e002      	b.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800a1fc:	bf00      	nop
 800a1fe:	e000      	b.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800a200:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a202:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10c      	bne.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800a20a:	4b89      	ldr	r3, [pc, #548]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a20c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a210:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a214:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a21a:	4a85      	ldr	r2, [pc, #532]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a21c:	430b      	orrs	r3, r1
 800a21e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a222:	e003      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a224:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a228:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a22c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a234:	f002 0320 	and.w	r3, r2, #32
 800a238:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800a23c:	2300      	movs	r3, #0
 800a23e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800a242:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800a246:	460b      	mov	r3, r1
 800a248:	4313      	orrs	r3, r2
 800a24a:	d053      	beq.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800a24c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a252:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a256:	d031      	beq.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800a258:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a25c:	d82a      	bhi.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800a25e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a262:	d02d      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800a264:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a268:	d824      	bhi.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800a26a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a26e:	d029      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800a270:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a274:	d81e      	bhi.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800a276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a27a:	d011      	beq.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800a27c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a280:	d818      	bhi.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d020      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800a286:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a28a:	d113      	bne.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a28c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a290:	3308      	adds	r3, #8
 800a292:	4618      	mov	r0, r3
 800a294:	f001 fd26 	bl	800bce4 <RCCEx_PLL2_Config>
 800a298:	4603      	mov	r3, r0
 800a29a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800a29e:	e014      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a2a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a2a4:	3330      	adds	r3, #48	@ 0x30
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f001 fdb4 	bl	800be14 <RCCEx_PLL3_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800a2b2:	e00a      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a2ba:	e006      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800a2bc:	bf00      	nop
 800a2be:	e004      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800a2c0:	bf00      	nop
 800a2c2:	e002      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800a2c4:	bf00      	nop
 800a2c6:	e000      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800a2c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10c      	bne.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800a2d2:	4b57      	ldr	r3, [pc, #348]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a2d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a2d8:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800a2dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a2e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2e2:	4a53      	ldr	r2, [pc, #332]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a2e4:	430b      	orrs	r3, r1
 800a2e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a2ea:	e003      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a2f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a2f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a300:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800a304:	2300      	movs	r3, #0
 800a306:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800a30a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800a30e:	460b      	mov	r3, r1
 800a310:	4313      	orrs	r3, r2
 800a312:	d053      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800a314:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a31a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a31e:	d031      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800a320:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a324:	d82a      	bhi.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a32a:	d02d      	beq.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800a32c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a330:	d824      	bhi.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a332:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a336:	d029      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a338:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a33c:	d81e      	bhi.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a33e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a342:	d011      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a344:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a348:	d818      	bhi.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d020      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a34e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a352:	d113      	bne.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a354:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a358:	3308      	adds	r3, #8
 800a35a:	4618      	mov	r0, r3
 800a35c:	f001 fcc2 	bl	800bce4 <RCCEx_PLL2_Config>
 800a360:	4603      	mov	r3, r0
 800a362:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800a366:	e014      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a368:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a36c:	3330      	adds	r3, #48	@ 0x30
 800a36e:	4618      	mov	r0, r3
 800a370:	f001 fd50 	bl	800be14 <RCCEx_PLL3_Config>
 800a374:	4603      	mov	r3, r0
 800a376:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800a37a:	e00a      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a382:	e006      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a384:	bf00      	nop
 800a386:	e004      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a388:	bf00      	nop
 800a38a:	e002      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a38c:	bf00      	nop
 800a38e:	e000      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a390:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a392:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10c      	bne.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800a39a:	4b25      	ldr	r3, [pc, #148]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a39c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a3a0:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800a3a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a3a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3aa:	4a21      	ldr	r2, [pc, #132]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a3ac:	430b      	orrs	r3, r1
 800a3ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a3b2:	e003      	b.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a3b8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a3bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a3c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800a3d2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	d055      	beq.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800a3dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a3e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3e2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a3e6:	d033      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800a3e8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a3ec:	d82c      	bhi.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a3ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a3f2:	d02f      	beq.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800a3f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a3f8:	d826      	bhi.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a3fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a3fe:	d02b      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800a400:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a404:	d820      	bhi.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a406:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a40a:	d013      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a40c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a410:	d81a      	bhi.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d022      	beq.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800a416:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a41a:	d115      	bne.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a41c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a420:	3308      	adds	r3, #8
 800a422:	4618      	mov	r0, r3
 800a424:	f001 fc5e 	bl	800bce4 <RCCEx_PLL2_Config>
 800a428:	4603      	mov	r3, r0
 800a42a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800a42e:	e016      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800a430:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a434:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a438:	3330      	adds	r3, #48	@ 0x30
 800a43a:	4618      	mov	r0, r3
 800a43c:	f001 fcea 	bl	800be14 <RCCEx_PLL3_Config>
 800a440:	4603      	mov	r3, r0
 800a442:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800a446:	e00a      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a44e:	e006      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a450:	bf00      	nop
 800a452:	e004      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a454:	bf00      	nop
 800a456:	e002      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a458:	bf00      	nop
 800a45a:	e000      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a45c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a45e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10c      	bne.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800a466:	4bbb      	ldr	r3, [pc, #748]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a46c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a470:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a474:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a476:	4ab7      	ldr	r2, [pc, #732]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a478:	430b      	orrs	r3, r1
 800a47a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a47e:	e003      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a480:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a484:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800a488:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800a494:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800a498:	2300      	movs	r3, #0
 800a49a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800a49e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	d053      	beq.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800a4a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a4ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4ae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a4b2:	d031      	beq.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800a4b4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a4b8:	d82a      	bhi.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a4ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4be:	d02d      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800a4c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4c4:	d824      	bhi.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a4c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a4ca:	d029      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800a4cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a4d0:	d81e      	bhi.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a4d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4d6:	d011      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800a4d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4dc:	d818      	bhi.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d020      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800a4e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4e6:	d113      	bne.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a4e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a4ec:	3308      	adds	r3, #8
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f001 fbf8 	bl	800bce4 <RCCEx_PLL2_Config>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800a4fa:	e014      	b.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a4fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a500:	3330      	adds	r3, #48	@ 0x30
 800a502:	4618      	mov	r0, r3
 800a504:	f001 fc86 	bl	800be14 <RCCEx_PLL3_Config>
 800a508:	4603      	mov	r3, r0
 800a50a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800a50e:	e00a      	b.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a516:	e006      	b.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a518:	bf00      	nop
 800a51a:	e004      	b.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a51c:	bf00      	nop
 800a51e:	e002      	b.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a520:	bf00      	nop
 800a522:	e000      	b.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a524:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a526:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d10c      	bne.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800a52e:	4b89      	ldr	r3, [pc, #548]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a530:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a534:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a538:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a53c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a53e:	4a85      	ldr	r2, [pc, #532]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a540:	430b      	orrs	r3, r1
 800a542:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a546:	e003      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a548:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a54c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800a550:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800a55c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a560:	2300      	movs	r3, #0
 800a562:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a566:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a56a:	460b      	mov	r3, r1
 800a56c:	4313      	orrs	r3, r2
 800a56e:	d055      	beq.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800a570:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a578:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a57c:	d031      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800a57e:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a582:	d82a      	bhi.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a588:	d02d      	beq.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800a58a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a58e:	d824      	bhi.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a590:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a594:	d029      	beq.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800a596:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a59a:	d81e      	bhi.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a59c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5a0:	d011      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800a5a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5a6:	d818      	bhi.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d020      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800a5ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5b0:	d113      	bne.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a5b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f001 fb93 	bl	800bce4 <RCCEx_PLL2_Config>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800a5c4:	e014      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a5c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a5ca:	3330      	adds	r3, #48	@ 0x30
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f001 fc21 	bl	800be14 <RCCEx_PLL3_Config>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800a5d8:	e00a      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a5e0:	e006      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a5e2:	bf00      	nop
 800a5e4:	e004      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a5e6:	bf00      	nop
 800a5e8:	e002      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a5ea:	bf00      	nop
 800a5ec:	e000      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a5ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10d      	bne.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800a5f8:	4b56      	ldr	r3, [pc, #344]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a5fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a5fe:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800a602:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a60a:	4a52      	ldr	r2, [pc, #328]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a60c:	430b      	orrs	r3, r1
 800a60e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a612:	e003      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a614:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a618:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800a61c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a624:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a628:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a62c:	2300      	movs	r3, #0
 800a62e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a632:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a636:	460b      	mov	r3, r1
 800a638:	4313      	orrs	r3, r2
 800a63a:	d044      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800a63c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a644:	2b05      	cmp	r3, #5
 800a646:	d823      	bhi.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800a648:	a201      	add	r2, pc, #4	@ (adr r2, 800a650 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800a64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64e:	bf00      	nop
 800a650:	0800a699 	.word	0x0800a699
 800a654:	0800a669 	.word	0x0800a669
 800a658:	0800a67d 	.word	0x0800a67d
 800a65c:	0800a699 	.word	0x0800a699
 800a660:	0800a699 	.word	0x0800a699
 800a664:	0800a699 	.word	0x0800a699
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a66c:	3308      	adds	r3, #8
 800a66e:	4618      	mov	r0, r3
 800a670:	f001 fb38 	bl	800bce4 <RCCEx_PLL2_Config>
 800a674:	4603      	mov	r3, r0
 800a676:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800a67a:	e00e      	b.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a67c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a680:	3330      	adds	r3, #48	@ 0x30
 800a682:	4618      	mov	r0, r3
 800a684:	f001 fbc6 	bl	800be14 <RCCEx_PLL3_Config>
 800a688:	4603      	mov	r3, r0
 800a68a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800a68e:	e004      	b.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a696:	e000      	b.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800a698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a69a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10d      	bne.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800a6a2:	4b2c      	ldr	r3, [pc, #176]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a6a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a6a8:	f023 0107 	bic.w	r1, r3, #7
 800a6ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6b4:	4a27      	ldr	r2, [pc, #156]	@ (800a754 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a6b6:	430b      	orrs	r3, r1
 800a6b8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800a6bc:	e003      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a6c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800a6c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a6d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a6dc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	d04f      	beq.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800a6e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6ee:	2b50      	cmp	r3, #80	@ 0x50
 800a6f0:	d029      	beq.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a6f2:	2b50      	cmp	r3, #80	@ 0x50
 800a6f4:	d823      	bhi.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a6f6:	2b40      	cmp	r3, #64	@ 0x40
 800a6f8:	d027      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800a6fa:	2b40      	cmp	r3, #64	@ 0x40
 800a6fc:	d81f      	bhi.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a6fe:	2b30      	cmp	r3, #48	@ 0x30
 800a700:	d025      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800a702:	2b30      	cmp	r3, #48	@ 0x30
 800a704:	d81b      	bhi.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a706:	2b20      	cmp	r3, #32
 800a708:	d00f      	beq.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800a70a:	2b20      	cmp	r3, #32
 800a70c:	d817      	bhi.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d022      	beq.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800a712:	2b10      	cmp	r3, #16
 800a714:	d113      	bne.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a716:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a71a:	3308      	adds	r3, #8
 800a71c:	4618      	mov	r0, r3
 800a71e:	f001 fae1 	bl	800bce4 <RCCEx_PLL2_Config>
 800a722:	4603      	mov	r3, r0
 800a724:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800a728:	e017      	b.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a72a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a72e:	3330      	adds	r3, #48	@ 0x30
 800a730:	4618      	mov	r0, r3
 800a732:	f001 fb6f 	bl	800be14 <RCCEx_PLL3_Config>
 800a736:	4603      	mov	r3, r0
 800a738:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800a73c:	e00d      	b.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a744:	e009      	b.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800a746:	bf00      	nop
 800a748:	e007      	b.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800a74a:	bf00      	nop
 800a74c:	e005      	b.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800a74e:	bf00      	nop
 800a750:	e003      	b.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800a752:	bf00      	nop
 800a754:	44020c00 	.word	0x44020c00
        break;
 800a758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a75a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d10d      	bne.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800a762:	4baf      	ldr	r3, [pc, #700]	@ (800aa20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a764:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a768:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800a76c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a774:	4aaa      	ldr	r2, [pc, #680]	@ (800aa20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a776:	430b      	orrs	r3, r1
 800a778:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800a77c:	e003      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a77e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a782:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a786:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a792:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a796:	2300      	movs	r3, #0
 800a798:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a79c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	d055      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800a7a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a7aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7ae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a7b2:	d031      	beq.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800a7b4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a7b8:	d82a      	bhi.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800a7ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7be:	d02d      	beq.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800a7c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7c4:	d824      	bhi.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800a7c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a7ca:	d029      	beq.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800a7cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a7d0:	d81e      	bhi.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800a7d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7d6:	d011      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800a7d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7dc:	d818      	bhi.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d020      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800a7e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7e6:	d113      	bne.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a7e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f001 fa78 	bl	800bce4 <RCCEx_PLL2_Config>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800a7fa:	e014      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a7fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a800:	3330      	adds	r3, #48	@ 0x30
 800a802:	4618      	mov	r0, r3
 800a804:	f001 fb06 	bl	800be14 <RCCEx_PLL3_Config>
 800a808:	4603      	mov	r3, r0
 800a80a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800a80e:	e00a      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a816:	e006      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800a818:	bf00      	nop
 800a81a:	e004      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800a81c:	bf00      	nop
 800a81e:	e002      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800a820:	bf00      	nop
 800a822:	e000      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800a824:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a826:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d10d      	bne.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800a82e:	4b7c      	ldr	r3, [pc, #496]	@ (800aa20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a834:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a838:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a83c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a840:	4a77      	ldr	r2, [pc, #476]	@ (800aa20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a842:	430b      	orrs	r3, r1
 800a844:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a848:	e003      	b.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a84a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a84e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a852:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a85e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a862:	2300      	movs	r3, #0
 800a864:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a868:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a86c:	460b      	mov	r3, r1
 800a86e:	4313      	orrs	r3, r2
 800a870:	d03d      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800a872:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a87a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a87e:	d01b      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 800a880:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a884:	d814      	bhi.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800a886:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a88a:	d017      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800a88c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a890:	d80e      	bhi.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d014      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800a896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a89a:	d109      	bne.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a89c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a8a0:	3330      	adds	r3, #48	@ 0x30
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f001 fab6 	bl	800be14 <RCCEx_PLL3_Config>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800a8ae:	e008      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a8b6:	e004      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800a8b8:	bf00      	nop
 800a8ba:	e002      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800a8bc:	bf00      	nop
 800a8be:	e000      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800a8c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10d      	bne.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800a8ca:	4b55      	ldr	r3, [pc, #340]	@ (800aa20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a8cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a8d0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a8d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a8d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8dc:	4a50      	ldr	r2, [pc, #320]	@ (800aa20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a8de:	430b      	orrs	r3, r1
 800a8e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a8e4:	e003      	b.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a8ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a8ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a8fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a8fe:	2300      	movs	r3, #0
 800a900:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a904:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a908:	460b      	mov	r3, r1
 800a90a:	4313      	orrs	r3, r2
 800a90c:	d03d      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800a90e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a916:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a91a:	d01b      	beq.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800a91c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a920:	d814      	bhi.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800a922:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a926:	d017      	beq.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800a928:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a92c:	d80e      	bhi.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d014      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800a932:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a936:	d109      	bne.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a938:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a93c:	3330      	adds	r3, #48	@ 0x30
 800a93e:	4618      	mov	r0, r3
 800a940:	f001 fa68 	bl	800be14 <RCCEx_PLL3_Config>
 800a944:	4603      	mov	r3, r0
 800a946:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800a94a:	e008      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a952:	e004      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800a954:	bf00      	nop
 800a956:	e002      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800a958:	bf00      	nop
 800a95a:	e000      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800a95c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a95e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10d      	bne.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800a966:	4b2e      	ldr	r3, [pc, #184]	@ (800aa20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a968:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a96c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800a970:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a978:	4a29      	ldr	r2, [pc, #164]	@ (800aa20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a97a:	430b      	orrs	r3, r1
 800a97c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a980:	e003      	b.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a982:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a986:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a98a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a992:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a99a:	2300      	movs	r3, #0
 800a99c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a9a0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	d040      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800a9aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a9ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a9b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a9b6:	d01b      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800a9b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a9bc:	d814      	bhi.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800a9be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9c2:	d017      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a9c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9c8:	d80e      	bhi.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d014      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a9ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9d2:	d109      	bne.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a9d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a9d8:	3330      	adds	r3, #48	@ 0x30
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f001 fa1a 	bl	800be14 <RCCEx_PLL3_Config>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800a9e6:	e008      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a9ee:	e004      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800a9f0:	bf00      	nop
 800a9f2:	e002      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800a9f4:	bf00      	nop
 800a9f6:	e000      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800a9f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d110      	bne.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800aa02:	4b07      	ldr	r3, [pc, #28]	@ (800aa20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800aa04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aa08:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800aa0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa14:	4a02      	ldr	r2, [pc, #8]	@ (800aa20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800aa16:	430b      	orrs	r3, r1
 800aa18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800aa1c:	e006      	b.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800aa1e:	bf00      	nop
 800aa20:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aa28:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	2100      	movs	r1, #0
 800aa36:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800aa3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aa42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	d03d      	beq.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800aa4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800aa58:	d01b      	beq.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800aa5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800aa5e:	d814      	bhi.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800aa60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa64:	d017      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800aa66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa6a:	d80e      	bhi.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d014      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800aa70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa74:	d109      	bne.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aa76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa7a:	3330      	adds	r3, #48	@ 0x30
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f001 f9c9 	bl	800be14 <RCCEx_PLL3_Config>
 800aa82:	4603      	mov	r3, r0
 800aa84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800aa88:	e008      	b.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800aa90:	e004      	b.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800aa92:	bf00      	nop
 800aa94:	e002      	b.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800aa96:	bf00      	nop
 800aa98:	e000      	b.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800aa9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa9c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10d      	bne.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800aaa4:	4bbe      	ldr	r3, [pc, #760]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800aaa6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aaaa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800aaae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aab2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aab6:	4aba      	ldr	r2, [pc, #744]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800aab8:	430b      	orrs	r3, r1
 800aaba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800aabe:	e003      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aac0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aac4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800aac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800aad4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aad8:	2300      	movs	r3, #0
 800aada:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aade:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800aae2:	460b      	mov	r3, r1
 800aae4:	4313      	orrs	r3, r2
 800aae6:	d035      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800aae8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aaec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aaf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aaf4:	d015      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800aaf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aafa:	d80e      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d012      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800ab00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab04:	d109      	bne.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ab06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab0a:	3330      	adds	r3, #48	@ 0x30
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f001 f981 	bl	800be14 <RCCEx_PLL3_Config>
 800ab12:	4603      	mov	r3, r0
 800ab14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800ab18:	e006      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ab20:	e002      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800ab22:	bf00      	nop
 800ab24:	e000      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800ab26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10d      	bne.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800ab30:	4b9b      	ldr	r3, [pc, #620]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ab32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab36:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800ab3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab42:	4a97      	ldr	r2, [pc, #604]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ab44:	430b      	orrs	r3, r1
 800ab46:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ab4a:	e003      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab4c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ab50:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ab54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800ab62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4313      	orrs	r3, r2
 800ab72:	d00e      	beq.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800ab74:	4b8a      	ldr	r3, [pc, #552]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ab76:	69db      	ldr	r3, [r3, #28]
 800ab78:	4a89      	ldr	r2, [pc, #548]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ab7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ab7e:	61d3      	str	r3, [r2, #28]
 800ab80:	4b87      	ldr	r3, [pc, #540]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ab82:	69d9      	ldr	r1, [r3, #28]
 800ab84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab88:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800ab8c:	4a84      	ldr	r2, [pc, #528]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ab8e:	430b      	orrs	r3, r1
 800ab90:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ab92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ab9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aba2:	2300      	movs	r3, #0
 800aba4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aba8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800abac:	460b      	mov	r3, r1
 800abae:	4313      	orrs	r3, r2
 800abb0:	d055      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800abb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800abb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800abba:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800abbe:	d031      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800abc0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800abc4:	d82a      	bhi.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800abc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abca:	d02d      	beq.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800abcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abd0:	d824      	bhi.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800abd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abd6:	d029      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800abd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abdc:	d81e      	bhi.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800abde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abe2:	d011      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800abe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abe8:	d818      	bhi.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800abea:	2b00      	cmp	r3, #0
 800abec:	d020      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800abee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abf2:	d113      	bne.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800abf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800abf8:	3308      	adds	r3, #8
 800abfa:	4618      	mov	r0, r3
 800abfc:	f001 f872 	bl	800bce4 <RCCEx_PLL2_Config>
 800ac00:	4603      	mov	r3, r0
 800ac02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800ac06:	e014      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ac08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac0c:	3330      	adds	r3, #48	@ 0x30
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f001 f900 	bl	800be14 <RCCEx_PLL3_Config>
 800ac14:	4603      	mov	r3, r0
 800ac16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800ac1a:	e00a      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ac22:	e006      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800ac24:	bf00      	nop
 800ac26:	e004      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800ac28:	bf00      	nop
 800ac2a:	e002      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800ac2c:	bf00      	nop
 800ac2e:	e000      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800ac30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10d      	bne.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800ac3a:	4b59      	ldr	r3, [pc, #356]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ac3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ac40:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800ac44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac4c:	4a54      	ldr	r2, [pc, #336]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ac4e:	430b      	orrs	r3, r1
 800ac50:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800ac54:	e003      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ac5a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ac5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ac6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ac6e:	2300      	movs	r3, #0
 800ac70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ac74:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	d055      	beq.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800ac7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ac86:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ac8a:	d031      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800ac8c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ac90:	d82a      	bhi.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800ac92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac96:	d02d      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800ac98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac9c:	d824      	bhi.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800ac9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aca2:	d029      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800aca4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aca8:	d81e      	bhi.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800acaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acae:	d011      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800acb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acb4:	d818      	bhi.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d020      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800acba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acbe:	d113      	bne.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800acc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800acc4:	3308      	adds	r3, #8
 800acc6:	4618      	mov	r0, r3
 800acc8:	f001 f80c 	bl	800bce4 <RCCEx_PLL2_Config>
 800accc:	4603      	mov	r3, r0
 800acce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800acd2:	e014      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800acd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800acd8:	3330      	adds	r3, #48	@ 0x30
 800acda:	4618      	mov	r0, r3
 800acdc:	f001 f89a 	bl	800be14 <RCCEx_PLL3_Config>
 800ace0:	4603      	mov	r3, r0
 800ace2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800ace6:	e00a      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800acee:	e006      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800acf0:	bf00      	nop
 800acf2:	e004      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800acf4:	bf00      	nop
 800acf6:	e002      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800acf8:	bf00      	nop
 800acfa:	e000      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800acfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acfe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10d      	bne.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800ad06:	4b26      	ldr	r3, [pc, #152]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ad08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ad0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ad10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ad18:	4a21      	ldr	r2, [pc, #132]	@ (800ada0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ad1a:	430b      	orrs	r3, r1
 800ad1c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800ad20:	e003      	b.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ad26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800ad2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad32:	2100      	movs	r1, #0
 800ad34:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800ad38:	f003 0320 	and.w	r3, r3, #32
 800ad3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ad40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ad44:	460b      	mov	r3, r1
 800ad46:	4313      	orrs	r3, r2
 800ad48:	d057      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800ad4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ad52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad56:	d033      	beq.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800ad58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad5c:	d82c      	bhi.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800ad5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad62:	d02f      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800ad64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad68:	d826      	bhi.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800ad6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad6e:	d02b      	beq.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800ad70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad74:	d820      	bhi.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800ad76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad7a:	d013      	beq.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ad7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad80:	d81a      	bhi.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d022      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800ad86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad8a:	d115      	bne.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ad8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad90:	3308      	adds	r3, #8
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 ffa6 	bl	800bce4 <RCCEx_PLL2_Config>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800ad9e:	e016      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800ada0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ada4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ada8:	3330      	adds	r3, #48	@ 0x30
 800adaa:	4618      	mov	r0, r3
 800adac:	f001 f832 	bl	800be14 <RCCEx_PLL3_Config>
 800adb0:	4603      	mov	r3, r0
 800adb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800adb6:	e00a      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800adbe:	e006      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800adc0:	bf00      	nop
 800adc2:	e004      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800adc4:	bf00      	nop
 800adc6:	e002      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800adc8:	bf00      	nop
 800adca:	e000      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800adcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10d      	bne.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800add6:	4bbb      	ldr	r3, [pc, #748]	@ (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800add8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800addc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ade0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ade4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ade8:	4ab6      	ldr	r2, [pc, #728]	@ (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800adea:	430b      	orrs	r3, r1
 800adec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800adf0:	e003      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adf2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800adf6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800adfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800adfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae02:	2100      	movs	r1, #0
 800ae04:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800ae08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ae10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ae14:	460b      	mov	r3, r1
 800ae16:	4313      	orrs	r3, r2
 800ae18:	d055      	beq.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800ae1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ae22:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800ae26:	d031      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800ae28:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800ae2c:	d82a      	bhi.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800ae2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae32:	d02d      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800ae34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae38:	d824      	bhi.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800ae3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae3e:	d029      	beq.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800ae40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae44:	d81e      	bhi.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800ae46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae4a:	d011      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800ae4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae50:	d818      	bhi.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d020      	beq.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800ae56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae5a:	d113      	bne.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ae5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae60:	3308      	adds	r3, #8
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 ff3e 	bl	800bce4 <RCCEx_PLL2_Config>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800ae6e:	e014      	b.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ae70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae74:	3330      	adds	r3, #48	@ 0x30
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 ffcc 	bl	800be14 <RCCEx_PLL3_Config>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800ae82:	e00a      	b.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ae8a:	e006      	b.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800ae8c:	bf00      	nop
 800ae8e:	e004      	b.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800ae90:	bf00      	nop
 800ae92:	e002      	b.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800ae94:	bf00      	nop
 800ae96:	e000      	b.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800ae98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10d      	bne.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800aea2:	4b88      	ldr	r3, [pc, #544]	@ (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800aea4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800aea8:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 800aeac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aeb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aeb4:	4a83      	ldr	r2, [pc, #524]	@ (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800aeb6:	430b      	orrs	r3, r1
 800aeb8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800aebc:	e003      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aebe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aec2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800aec6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	2100      	movs	r1, #0
 800aed0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800aed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aedc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800aee0:	460b      	mov	r3, r1
 800aee2:	4313      	orrs	r3, r2
 800aee4:	d055      	beq.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800aee6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aeea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aeee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800aef2:	d031      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800aef4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800aef8:	d82a      	bhi.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800aefa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aefe:	d02d      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800af00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800af04:	d824      	bhi.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800af06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800af0a:	d029      	beq.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800af0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800af10:	d81e      	bhi.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800af12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af16:	d011      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800af18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af1c:	d818      	bhi.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d020      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800af22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af26:	d113      	bne.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800af28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af2c:	3308      	adds	r3, #8
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 fed8 	bl	800bce4 <RCCEx_PLL2_Config>
 800af34:	4603      	mov	r3, r0
 800af36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800af3a:	e014      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800af3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af40:	3330      	adds	r3, #48	@ 0x30
 800af42:	4618      	mov	r0, r3
 800af44:	f000 ff66 	bl	800be14 <RCCEx_PLL3_Config>
 800af48:	4603      	mov	r3, r0
 800af4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800af4e:	e00a      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af50:	2301      	movs	r3, #1
 800af52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800af56:	e006      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800af58:	bf00      	nop
 800af5a:	e004      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800af5c:	bf00      	nop
 800af5e:	e002      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800af60:	bf00      	nop
 800af62:	e000      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800af64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10d      	bne.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800af6e:	4b55      	ldr	r3, [pc, #340]	@ (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800af70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800af74:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800af78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800af80:	4a50      	ldr	r2, [pc, #320]	@ (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800af82:	430b      	orrs	r3, r1
 800af84:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800af88:	e003      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800af8e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800af92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9a:	2100      	movs	r1, #0
 800af9c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800afa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afa4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800afa8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800afac:	460b      	mov	r3, r1
 800afae:	4313      	orrs	r3, r2
 800afb0:	d055      	beq.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800afb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800afb6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800afba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800afbe:	d031      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800afc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800afc4:	d82a      	bhi.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800afc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afca:	d02d      	beq.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800afcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afd0:	d824      	bhi.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800afd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800afd6:	d029      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800afd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800afdc:	d81e      	bhi.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800afde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afe2:	d011      	beq.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800afe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afe8:	d818      	bhi.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800afea:	2b00      	cmp	r3, #0
 800afec:	d020      	beq.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800afee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aff2:	d113      	bne.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aff8:	3308      	adds	r3, #8
 800affa:	4618      	mov	r0, r3
 800affc:	f000 fe72 	bl	800bce4 <RCCEx_PLL2_Config>
 800b000:	4603      	mov	r3, r0
 800b002:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800b006:	e014      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b008:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b00c:	3330      	adds	r3, #48	@ 0x30
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 ff00 	bl	800be14 <RCCEx_PLL3_Config>
 800b014:	4603      	mov	r3, r0
 800b016:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800b01a:	e00a      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b022:	e006      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b024:	bf00      	nop
 800b026:	e004      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b028:	bf00      	nop
 800b02a:	e002      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b02c:	bf00      	nop
 800b02e:	e000      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b030:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b032:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10d      	bne.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800b03a:	4b22      	ldr	r3, [pc, #136]	@ (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b03c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b040:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b044:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b048:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b04c:	4a1d      	ldr	r2, [pc, #116]	@ (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b04e:	430b      	orrs	r3, r1
 800b050:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800b054:	e003      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b056:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b05a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b05e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b06a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b06e:	2300      	movs	r3, #0
 800b070:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b074:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b078:	460b      	mov	r3, r1
 800b07a:	4313      	orrs	r3, r2
 800b07c:	d055      	beq.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b07e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b082:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b086:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b08a:	d035      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800b08c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b090:	d82e      	bhi.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800b092:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b096:	d031      	beq.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800b098:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b09c:	d828      	bhi.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800b09e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0a2:	d01b      	beq.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800b0a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0a8:	d822      	bhi.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d003      	beq.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800b0ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0b2:	d009      	beq.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800b0b4:	e01c      	b.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0b6:	4b03      	ldr	r3, [pc, #12]	@ (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b0b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ba:	4a02      	ldr	r2, [pc, #8]	@ (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b0bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b0c0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b0c2:	e01c      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800b0c4:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b0c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 fe08 	bl	800bce4 <RCCEx_PLL2_Config>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b0da:	e010      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b0dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b0e0:	3330      	adds	r3, #48	@ 0x30
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 fe96 	bl	800be14 <RCCEx_PLL3_Config>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b0ee:	e006      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b0f6:	e002      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800b0f8:	bf00      	nop
 800b0fa:	e000      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800b0fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10d      	bne.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b106:	4bc3      	ldr	r3, [pc, #780]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b10c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b114:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b118:	4abe      	ldr	r2, [pc, #760]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b11a:	430b      	orrs	r3, r1
 800b11c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b120:	e003      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b122:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b126:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800b12a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b132:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b136:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b13a:	2300      	movs	r3, #0
 800b13c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b140:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b144:	460b      	mov	r3, r1
 800b146:	4313      	orrs	r3, r2
 800b148:	d051      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b14a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b14e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b152:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b156:	d033      	beq.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800b158:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b15c:	d82c      	bhi.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800b15e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b162:	d02d      	beq.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800b164:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b168:	d826      	bhi.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800b16a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b16e:	d019      	beq.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800b170:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b174:	d820      	bhi.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800b17a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b17e:	d007      	beq.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800b180:	e01a      	b.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b182:	4ba4      	ldr	r3, [pc, #656]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b186:	4aa3      	ldr	r2, [pc, #652]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b18c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b18e:	e018      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b190:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b194:	3308      	adds	r3, #8
 800b196:	4618      	mov	r0, r3
 800b198:	f000 fda4 	bl	800bce4 <RCCEx_PLL2_Config>
 800b19c:	4603      	mov	r3, r0
 800b19e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b1a2:	e00e      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b1a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b1a8:	3330      	adds	r3, #48	@ 0x30
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 fe32 	bl	800be14 <RCCEx_PLL3_Config>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b1b6:	e004      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b1be:	e000      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800b1c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10d      	bne.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b1ca:	4b92      	ldr	r3, [pc, #584]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b1cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1d0:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 800b1d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b1d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b1dc:	4a8d      	ldr	r2, [pc, #564]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b1de:	430b      	orrs	r3, r1
 800b1e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b1e4:	e003      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b1ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b1ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b1fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b200:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b204:	460b      	mov	r3, r1
 800b206:	4313      	orrs	r3, r2
 800b208:	d032      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b20a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b20e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b212:	2b05      	cmp	r3, #5
 800b214:	d80f      	bhi.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800b216:	2b03      	cmp	r3, #3
 800b218:	d211      	bcs.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d911      	bls.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d109      	bne.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b222:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b226:	3308      	adds	r3, #8
 800b228:	4618      	mov	r0, r3
 800b22a:	f000 fd5b 	bl	800bce4 <RCCEx_PLL2_Config>
 800b22e:	4603      	mov	r3, r0
 800b230:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b234:	e006      	b.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b23c:	e002      	b.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800b23e:	bf00      	nop
 800b240:	e000      	b.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800b242:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b244:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10d      	bne.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b24c:	4b71      	ldr	r3, [pc, #452]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b24e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b252:	f023 0107 	bic.w	r1, r3, #7
 800b256:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b25a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b25e:	4a6d      	ldr	r2, [pc, #436]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b260:	430b      	orrs	r3, r1
 800b262:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b266:	e003      	b.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b268:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b26c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800b270:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b278:	2100      	movs	r1, #0
 800b27a:	6739      	str	r1, [r7, #112]	@ 0x70
 800b27c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b280:	677b      	str	r3, [r7, #116]	@ 0x74
 800b282:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b286:	460b      	mov	r3, r1
 800b288:	4313      	orrs	r3, r2
 800b28a:	d024      	beq.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800b28c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b290:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b294:	2b00      	cmp	r3, #0
 800b296:	d005      	beq.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800b298:	2b08      	cmp	r3, #8
 800b29a:	d005      	beq.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b2a2:	e002      	b.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800b2a4:	bf00      	nop
 800b2a6:	e000      	b.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800b2a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d10d      	bne.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800b2b2:	4b58      	ldr	r3, [pc, #352]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b2b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b2b8:	f023 0108 	bic.w	r1, r3, #8
 800b2bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b2c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b2c4:	4a53      	ldr	r2, [pc, #332]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b2c6:	430b      	orrs	r3, r1
 800b2c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b2cc:	e003      	b.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b2d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b2d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2de:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b2e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b2e8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	f000 80b9 	beq.w	800b466 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800b2f4:	4b48      	ldr	r3, [pc, #288]	@ (800b418 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800b2f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f8:	4a47      	ldr	r2, [pc, #284]	@ (800b418 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800b2fa:	f043 0301 	orr.w	r3, r3, #1
 800b2fe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b300:	f7fc feba 	bl	8008078 <HAL_GetTick>
 800b304:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800b308:	e00b      	b.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b30a:	f7fc feb5 	bl	8008078 <HAL_GetTick>
 800b30e:	4602      	mov	r2, r0
 800b310:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	2b02      	cmp	r3, #2
 800b318:	d903      	bls.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800b31a:	2303      	movs	r3, #3
 800b31c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b320:	e005      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800b322:	4b3d      	ldr	r3, [pc, #244]	@ (800b418 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800b324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b326:	f003 0301 	and.w	r3, r3, #1
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d0ed      	beq.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800b32e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b332:	2b00      	cmp	r3, #0
 800b334:	f040 8093 	bne.w	800b45e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b338:	4b36      	ldr	r3, [pc, #216]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b33a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b33e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b342:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b346:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d023      	beq.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800b34e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b352:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800b356:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d01b      	beq.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b35e:	4b2d      	ldr	r3, [pc, #180]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b368:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b36c:	4b29      	ldr	r3, [pc, #164]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b36e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b372:	4a28      	ldr	r2, [pc, #160]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b378:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b37c:	4b25      	ldr	r3, [pc, #148]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b37e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b382:	4a24      	ldr	r2, [pc, #144]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b388:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b38c:	4a21      	ldr	r2, [pc, #132]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b38e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b392:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b396:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d019      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3a2:	f7fc fe69 	bl	8008078 <HAL_GetTick>
 800b3a6:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b3aa:	e00d      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3ac:	f7fc fe64 	bl	8008078 <HAL_GetTick>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800b3b6:	1ad2      	subs	r2, r2, r3
 800b3b8:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d903      	bls.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800b3c6:	e006      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b3c8:	4b12      	ldr	r3, [pc, #72]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b3ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3ce:	f003 0302 	and.w	r3, r3, #2
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d0ea      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800b3d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d13a      	bne.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b3de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b3e2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800b3e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b3ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b3ee:	d115      	bne.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800b3f0:	4b08      	ldr	r3, [pc, #32]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b3f2:	69db      	ldr	r3, [r3, #28]
 800b3f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b3f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b3fc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800b400:	091b      	lsrs	r3, r3, #4
 800b402:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b406:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800b40a:	4a02      	ldr	r2, [pc, #8]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b40c:	430b      	orrs	r3, r1
 800b40e:	61d3      	str	r3, [r2, #28]
 800b410:	e00a      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800b412:	bf00      	nop
 800b414:	44020c00 	.word	0x44020c00
 800b418:	44020800 	.word	0x44020800
 800b41c:	4b9f      	ldr	r3, [pc, #636]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b41e:	69db      	ldr	r3, [r3, #28]
 800b420:	4a9e      	ldr	r2, [pc, #632]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b422:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b426:	61d3      	str	r3, [r2, #28]
 800b428:	4b9c      	ldr	r3, [pc, #624]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b42a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b42e:	4a9b      	ldr	r2, [pc, #620]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b434:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b438:	4b98      	ldr	r3, [pc, #608]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b43a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800b43e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b442:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800b446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b44a:	4a94      	ldr	r2, [pc, #592]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b44c:	430b      	orrs	r3, r1
 800b44e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b452:	e008      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b454:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b458:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800b45c:	e003      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b45e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b462:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b466:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b472:	663b      	str	r3, [r7, #96]	@ 0x60
 800b474:	2300      	movs	r3, #0
 800b476:	667b      	str	r3, [r7, #100]	@ 0x64
 800b478:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b47c:	460b      	mov	r3, r1
 800b47e:	4313      	orrs	r3, r2
 800b480:	d035      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b482:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b486:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b48a:	2b30      	cmp	r3, #48	@ 0x30
 800b48c:	d014      	beq.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800b48e:	2b30      	cmp	r3, #48	@ 0x30
 800b490:	d80e      	bhi.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800b492:	2b20      	cmp	r3, #32
 800b494:	d012      	beq.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800b496:	2b20      	cmp	r3, #32
 800b498:	d80a      	bhi.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d010      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800b49e:	2b10      	cmp	r3, #16
 800b4a0:	d106      	bne.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4a2:	4b7e      	ldr	r3, [pc, #504]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a6:	4a7d      	ldr	r2, [pc, #500]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b4a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4ac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800b4ae:	e008      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b4b6:	e004      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800b4b8:	bf00      	nop
 800b4ba:	e002      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800b4bc:	bf00      	nop
 800b4be:	e000      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800b4c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d10d      	bne.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b4ca:	4b74      	ldr	r3, [pc, #464]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b4cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b4d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b4d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b4d8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b4dc:	4a6f      	ldr	r2, [pc, #444]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b4de:	430b      	orrs	r3, r1
 800b4e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b4e4:	e003      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b4ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b4ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b4fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b500:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b504:	460b      	mov	r3, r1
 800b506:	4313      	orrs	r3, r2
 800b508:	d033      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800b50a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b50e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b512:	2b00      	cmp	r3, #0
 800b514:	d002      	beq.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800b516:	2b40      	cmp	r3, #64	@ 0x40
 800b518:	d007      	beq.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800b51a:	e010      	b.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b51c:	4b5f      	ldr	r3, [pc, #380]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b51e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b520:	4a5e      	ldr	r2, [pc, #376]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b526:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800b528:	e00d      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b52a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b52e:	3308      	adds	r3, #8
 800b530:	4618      	mov	r0, r3
 800b532:	f000 fbd7 	bl	800bce4 <RCCEx_PLL2_Config>
 800b536:	4603      	mov	r3, r0
 800b538:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800b53c:	e003      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b544:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b546:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10d      	bne.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800b54e:	4b53      	ldr	r3, [pc, #332]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b550:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b554:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800b558:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b55c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b560:	4a4e      	ldr	r2, [pc, #312]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b562:	430b      	orrs	r3, r1
 800b564:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b568:	e003      	b.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b56a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b56e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800b572:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b57e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b580:	2300      	movs	r3, #0
 800b582:	657b      	str	r3, [r7, #84]	@ 0x54
 800b584:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b588:	460b      	mov	r3, r1
 800b58a:	4313      	orrs	r3, r2
 800b58c:	d033      	beq.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800b58e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b592:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d002      	beq.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800b59a:	2b80      	cmp	r3, #128	@ 0x80
 800b59c:	d007      	beq.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800b59e:	e010      	b.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5a0:	4b3e      	ldr	r3, [pc, #248]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b5a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a4:	4a3d      	ldr	r2, [pc, #244]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b5a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b5aa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800b5ac:	e00d      	b.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b5ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b5b2:	3308      	adds	r3, #8
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f000 fb95 	bl	800bce4 <RCCEx_PLL2_Config>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800b5c0:	e003      	b.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b5c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10d      	bne.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800b5d2:	4b32      	ldr	r3, [pc, #200]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b5d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b5d8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800b5dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b5e0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b5e4:	4a2d      	ldr	r2, [pc, #180]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b5e6:	430b      	orrs	r3, r1
 800b5e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b5ec:	e003      	b.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b5f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b5f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fe:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800b602:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b604:	2300      	movs	r3, #0
 800b606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b608:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b60c:	460b      	mov	r3, r1
 800b60e:	4313      	orrs	r3, r2
 800b610:	d04a      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800b612:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b61a:	2b04      	cmp	r3, #4
 800b61c:	d827      	bhi.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800b61e:	a201      	add	r2, pc, #4	@ (adr r2, 800b624 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800b620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b624:	0800b639 	.word	0x0800b639
 800b628:	0800b647 	.word	0x0800b647
 800b62c:	0800b65b 	.word	0x0800b65b
 800b630:	0800b677 	.word	0x0800b677
 800b634:	0800b677 	.word	0x0800b677
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b638:	4b18      	ldr	r3, [pc, #96]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b63c:	4a17      	ldr	r2, [pc, #92]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b63e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b642:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800b644:	e018      	b.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b646:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b64a:	3308      	adds	r3, #8
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 fb49 	bl	800bce4 <RCCEx_PLL2_Config>
 800b652:	4603      	mov	r3, r0
 800b654:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800b658:	e00e      	b.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b65a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b65e:	3330      	adds	r3, #48	@ 0x30
 800b660:	4618      	mov	r0, r3
 800b662:	f000 fbd7 	bl	800be14 <RCCEx_PLL3_Config>
 800b666:	4603      	mov	r3, r0
 800b668:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800b66c:	e004      	b.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b674:	e000      	b.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800b676:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b678:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10f      	bne.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b680:	4b06      	ldr	r3, [pc, #24]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b686:	f023 0107 	bic.w	r1, r3, #7
 800b68a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b68e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b692:	4a02      	ldr	r2, [pc, #8]	@ (800b69c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b694:	430b      	orrs	r3, r1
 800b696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b69a:	e005      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800b69c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b6a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b6a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b6b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b6be:	460b      	mov	r3, r1
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	f000 8081 	beq.w	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800b6c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b6ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b6ce:	2b20      	cmp	r3, #32
 800b6d0:	d85f      	bhi.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800b6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800b6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d8:	0800b75d 	.word	0x0800b75d
 800b6dc:	0800b793 	.word	0x0800b793
 800b6e0:	0800b793 	.word	0x0800b793
 800b6e4:	0800b793 	.word	0x0800b793
 800b6e8:	0800b793 	.word	0x0800b793
 800b6ec:	0800b793 	.word	0x0800b793
 800b6f0:	0800b793 	.word	0x0800b793
 800b6f4:	0800b793 	.word	0x0800b793
 800b6f8:	0800b76b 	.word	0x0800b76b
 800b6fc:	0800b793 	.word	0x0800b793
 800b700:	0800b793 	.word	0x0800b793
 800b704:	0800b793 	.word	0x0800b793
 800b708:	0800b793 	.word	0x0800b793
 800b70c:	0800b793 	.word	0x0800b793
 800b710:	0800b793 	.word	0x0800b793
 800b714:	0800b793 	.word	0x0800b793
 800b718:	0800b77f 	.word	0x0800b77f
 800b71c:	0800b793 	.word	0x0800b793
 800b720:	0800b793 	.word	0x0800b793
 800b724:	0800b793 	.word	0x0800b793
 800b728:	0800b793 	.word	0x0800b793
 800b72c:	0800b793 	.word	0x0800b793
 800b730:	0800b793 	.word	0x0800b793
 800b734:	0800b793 	.word	0x0800b793
 800b738:	0800b79b 	.word	0x0800b79b
 800b73c:	0800b793 	.word	0x0800b793
 800b740:	0800b793 	.word	0x0800b793
 800b744:	0800b793 	.word	0x0800b793
 800b748:	0800b793 	.word	0x0800b793
 800b74c:	0800b793 	.word	0x0800b793
 800b750:	0800b793 	.word	0x0800b793
 800b754:	0800b793 	.word	0x0800b793
 800b758:	0800b79b 	.word	0x0800b79b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b75c:	4bab      	ldr	r3, [pc, #684]	@ (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b75e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b760:	4aaa      	ldr	r2, [pc, #680]	@ (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b766:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800b768:	e018      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b76a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b76e:	3308      	adds	r3, #8
 800b770:	4618      	mov	r0, r3
 800b772:	f000 fab7 	bl	800bce4 <RCCEx_PLL2_Config>
 800b776:	4603      	mov	r3, r0
 800b778:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800b77c:	e00e      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b77e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b782:	3330      	adds	r3, #48	@ 0x30
 800b784:	4618      	mov	r0, r3
 800b786:	f000 fb45 	bl	800be14 <RCCEx_PLL3_Config>
 800b78a:	4603      	mov	r3, r0
 800b78c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800b790:	e004      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b798:	e000      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800b79a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b79c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d10d      	bne.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b7a4:	4b99      	ldr	r3, [pc, #612]	@ (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b7a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b7ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b7b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b7b6:	4a95      	ldr	r2, [pc, #596]	@ (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b7b8:	430b      	orrs	r3, r1
 800b7ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b7be:	e003      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b7c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b7c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b7d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b7de:	460b      	mov	r3, r1
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	d04e      	beq.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800b7e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b7e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b7ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7f0:	d02e      	beq.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800b7f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7f6:	d827      	bhi.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800b7f8:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7fa:	d02b      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800b7fc:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7fe:	d823      	bhi.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800b800:	2b80      	cmp	r3, #128	@ 0x80
 800b802:	d017      	beq.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800b804:	2b80      	cmp	r3, #128	@ 0x80
 800b806:	d81f      	bhi.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d002      	beq.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800b80c:	2b40      	cmp	r3, #64	@ 0x40
 800b80e:	d007      	beq.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800b810:	e01a      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b812:	4b7e      	ldr	r3, [pc, #504]	@ (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b816:	4a7d      	ldr	r2, [pc, #500]	@ (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b81c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800b81e:	e01a      	b.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b820:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b824:	3308      	adds	r3, #8
 800b826:	4618      	mov	r0, r3
 800b828:	f000 fa5c 	bl	800bce4 <RCCEx_PLL2_Config>
 800b82c:	4603      	mov	r3, r0
 800b82e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800b832:	e010      	b.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b834:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b838:	3330      	adds	r3, #48	@ 0x30
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 faea 	bl	800be14 <RCCEx_PLL3_Config>
 800b840:	4603      	mov	r3, r0
 800b842:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800b846:	e006      	b.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b84e:	e002      	b.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800b850:	bf00      	nop
 800b852:	e000      	b.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800b854:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b856:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10d      	bne.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b85e:	4b6b      	ldr	r3, [pc, #428]	@ (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b864:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b86c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b870:	4a66      	ldr	r2, [pc, #408]	@ (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b872:	430b      	orrs	r3, r1
 800b874:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b878:	e003      	b.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b87a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b87e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800b882:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b88e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b890:	2300      	movs	r3, #0
 800b892:	637b      	str	r3, [r7, #52]	@ 0x34
 800b894:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b898:	460b      	mov	r3, r1
 800b89a:	4313      	orrs	r3, r2
 800b89c:	d055      	beq.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800b89e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b8a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800b8a6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b8aa:	d031      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800b8ac:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b8b0:	d82a      	bhi.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800b8b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8b6:	d02d      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800b8b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8bc:	d824      	bhi.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800b8be:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b8c2:	d029      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800b8c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b8c8:	d81e      	bhi.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800b8ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8ce:	d011      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800b8d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8d4:	d818      	bhi.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d020      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800b8da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8de:	d113      	bne.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b8e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b8e4:	3308      	adds	r3, #8
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 f9fc 	bl	800bce4 <RCCEx_PLL2_Config>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800b8f2:	e014      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b8f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b8f8:	3330      	adds	r3, #48	@ 0x30
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f000 fa8a 	bl	800be14 <RCCEx_PLL3_Config>
 800b900:	4603      	mov	r3, r0
 800b902:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800b906:	e00a      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b90e:	e006      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800b910:	bf00      	nop
 800b912:	e004      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800b914:	bf00      	nop
 800b916:	e002      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800b918:	bf00      	nop
 800b91a:	e000      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800b91c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b91e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b922:	2b00      	cmp	r3, #0
 800b924:	d10d      	bne.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800b926:	4b39      	ldr	r3, [pc, #228]	@ (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b92c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800b930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b934:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800b938:	4a34      	ldr	r2, [pc, #208]	@ (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b93a:	430b      	orrs	r3, r1
 800b93c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b940:	e003      	b.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b942:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b946:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800b94a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b952:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b956:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b958:	2300      	movs	r3, #0
 800b95a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b95c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b960:	460b      	mov	r3, r1
 800b962:	4313      	orrs	r3, r2
 800b964:	d058      	beq.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800b966:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b96a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b96e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b972:	d031      	beq.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800b974:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b978:	d82a      	bhi.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800b97a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b97e:	d02d      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800b980:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b984:	d824      	bhi.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800b986:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b98a:	d029      	beq.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800b98c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b990:	d81e      	bhi.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800b992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b996:	d011      	beq.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800b998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b99c:	d818      	bhi.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d020      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800b9a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9a6:	d113      	bne.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b9a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b9ac:	3308      	adds	r3, #8
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 f998 	bl	800bce4 <RCCEx_PLL2_Config>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800b9ba:	e014      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b9bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b9c0:	3330      	adds	r3, #48	@ 0x30
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 fa26 	bl	800be14 <RCCEx_PLL3_Config>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800b9ce:	e00a      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b9d6:	e006      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800b9d8:	bf00      	nop
 800b9da:	e004      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800b9dc:	bf00      	nop
 800b9de:	e002      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800b9e0:	bf00      	nop
 800b9e2:	e000      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800b9e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d110      	bne.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800b9ee:	4b07      	ldr	r3, [pc, #28]	@ (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b9f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b9f4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800b9f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b9fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba00:	4902      	ldr	r1, [pc, #8]	@ (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800ba02:	4313      	orrs	r3, r2
 800ba04:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800ba08:	e006      	b.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800ba0a:	bf00      	nop
 800ba0c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba10:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ba14:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ba18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba20:	2100      	movs	r1, #0
 800ba22:	6239      	str	r1, [r7, #32]
 800ba24:	f003 0301 	and.w	r3, r3, #1
 800ba28:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba2a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba2e:	460b      	mov	r3, r1
 800ba30:	4313      	orrs	r3, r2
 800ba32:	d055      	beq.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800ba34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba3c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800ba40:	d031      	beq.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800ba42:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800ba46:	d82a      	bhi.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800ba48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba4c:	d02d      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800ba4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba52:	d824      	bhi.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800ba54:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800ba58:	d029      	beq.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800ba5a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800ba5e:	d81e      	bhi.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800ba60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba64:	d011      	beq.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800ba66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba6a:	d818      	bhi.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d020      	beq.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800ba70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba74:	d113      	bne.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ba76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba7a:	3308      	adds	r3, #8
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 f931 	bl	800bce4 <RCCEx_PLL2_Config>
 800ba82:	4603      	mov	r3, r0
 800ba84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ba88:	e014      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ba8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba8e:	3330      	adds	r3, #48	@ 0x30
 800ba90:	4618      	mov	r0, r3
 800ba92:	f000 f9bf 	bl	800be14 <RCCEx_PLL3_Config>
 800ba96:	4603      	mov	r3, r0
 800ba98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ba9c:	e00a      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800baa4:	e006      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800baa6:	bf00      	nop
 800baa8:	e004      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800baaa:	bf00      	nop
 800baac:	e002      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800baae:	bf00      	nop
 800bab0:	e000      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800bab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bab4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10d      	bne.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800babc:	4b88      	ldr	r3, [pc, #544]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800babe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bac2:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800bac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800baca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bace:	4984      	ldr	r1, [pc, #528]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bad0:	4313      	orrs	r3, r2
 800bad2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800bad6:	e003      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800badc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae8:	2100      	movs	r1, #0
 800baea:	61b9      	str	r1, [r7, #24]
 800baec:	f003 0302 	and.w	r3, r3, #2
 800baf0:	61fb      	str	r3, [r7, #28]
 800baf2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800baf6:	460b      	mov	r3, r1
 800baf8:	4313      	orrs	r3, r2
 800bafa:	d03d      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800bafc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bb04:	2b03      	cmp	r3, #3
 800bb06:	d81c      	bhi.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800bb08:	a201      	add	r2, pc, #4	@ (adr r2, 800bb10 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800bb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0e:	bf00      	nop
 800bb10:	0800bb4b 	.word	0x0800bb4b
 800bb14:	0800bb21 	.word	0x0800bb21
 800bb18:	0800bb2f 	.word	0x0800bb2f
 800bb1c:	0800bb4b 	.word	0x0800bb4b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb20:	4b6f      	ldr	r3, [pc, #444]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bb22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb24:	4a6e      	ldr	r2, [pc, #440]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bb26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb2a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800bb2c:	e00e      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bb2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb32:	3308      	adds	r3, #8
 800bb34:	4618      	mov	r0, r3
 800bb36:	f000 f8d5 	bl	800bce4 <RCCEx_PLL2_Config>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800bb40:	e004      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bb48:	e000      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800bb4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb4c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10d      	bne.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800bb54:	4b62      	ldr	r3, [pc, #392]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bb56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bb5a:	f023 0203 	bic.w	r2, r3, #3
 800bb5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb62:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bb66:	495e      	ldr	r1, [pc, #376]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bb6e:	e003      	b.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb70:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bb74:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bb78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb80:	2100      	movs	r1, #0
 800bb82:	6139      	str	r1, [r7, #16]
 800bb84:	f003 0304 	and.w	r3, r3, #4
 800bb88:	617b      	str	r3, [r7, #20]
 800bb8a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4313      	orrs	r3, r2
 800bb92:	d03a      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800bb94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bb9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bba0:	d00e      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800bba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bba6:	d815      	bhi.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d017      	beq.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800bbac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbb0:	d110      	bne.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbb2:	4b4b      	ldr	r3, [pc, #300]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bbb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbb6:	4a4a      	ldr	r2, [pc, #296]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bbb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbbc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800bbbe:	e00e      	b.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bbc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bbc4:	3308      	adds	r3, #8
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f000 f88c 	bl	800bce4 <RCCEx_PLL2_Config>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800bbd2:	e004      	b.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bbda:	e000      	b.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800bbdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbde:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10d      	bne.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800bbe6:	4b3e      	ldr	r3, [pc, #248]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bbe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bbec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bbf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bbf4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bbf8:	4939      	ldr	r1, [pc, #228]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800bc00:	e003      	b.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bc06:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bc0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	2100      	movs	r1, #0
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	f003 0310 	and.w	r3, r3, #16
 800bc1a:	60fb      	str	r3, [r7, #12]
 800bc1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bc20:	460b      	mov	r3, r1
 800bc22:	4313      	orrs	r3, r2
 800bc24:	d038      	beq.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800bc26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800bc2e:	2b30      	cmp	r3, #48	@ 0x30
 800bc30:	d01b      	beq.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800bc32:	2b30      	cmp	r3, #48	@ 0x30
 800bc34:	d815      	bhi.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800bc36:	2b10      	cmp	r3, #16
 800bc38:	d002      	beq.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800bc3a:	2b20      	cmp	r3, #32
 800bc3c:	d007      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800bc3e:	e010      	b.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc40:	4b27      	ldr	r3, [pc, #156]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bc42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc44:	4a26      	ldr	r2, [pc, #152]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bc46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc4a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800bc4c:	e00e      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bc4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc52:	3330      	adds	r3, #48	@ 0x30
 800bc54:	4618      	mov	r0, r3
 800bc56:	f000 f8dd 	bl	800be14 <RCCEx_PLL3_Config>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800bc60:	e004      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bc68:	e000      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800bc6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc6c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10d      	bne.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800bc74:	4b1a      	ldr	r3, [pc, #104]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bc76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc7a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bc7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc82:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800bc86:	4916      	ldr	r1, [pc, #88]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bc8e:	e003      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bc94:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca0:	2100      	movs	r1, #0
 800bca2:	6039      	str	r1, [r7, #0]
 800bca4:	f003 0308 	and.w	r3, r3, #8
 800bca8:	607b      	str	r3, [r7, #4]
 800bcaa:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	d00c      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bcb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bcba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bcbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bcc2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800bcc6:	4906      	ldr	r1, [pc, #24]	@ (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800bcce:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcde:	bf00      	nop
 800bce0:	44020c00 	.word	0x44020c00

0800bce4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800bcec:	4b48      	ldr	r3, [pc, #288]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a47      	ldr	r2, [pc, #284]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bcf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bcf6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bcf8:	f7fc f9be 	bl	8008078 <HAL_GetTick>
 800bcfc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bcfe:	e008      	b.n	800bd12 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bd00:	f7fc f9ba 	bl	8008078 <HAL_GetTick>
 800bd04:	4602      	mov	r2, r0
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	2b02      	cmp	r3, #2
 800bd0c:	d901      	bls.n	800bd12 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	e07a      	b.n	800be08 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd12:	4b3f      	ldr	r3, [pc, #252]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1f0      	bne.n	800bd00 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800bd1e:	4b3c      	ldr	r3, [pc, #240]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bd20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd22:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bd26:	f023 0303 	bic.w	r3, r3, #3
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	6811      	ldr	r1, [r2, #0]
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	6852      	ldr	r2, [r2, #4]
 800bd32:	0212      	lsls	r2, r2, #8
 800bd34:	430a      	orrs	r2, r1
 800bd36:	4936      	ldr	r1, [pc, #216]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	3b01      	subs	r3, #1
 800bd42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	025b      	lsls	r3, r3, #9
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	431a      	orrs	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	041b      	lsls	r3, r3, #16
 800bd5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bd5e:	431a      	orrs	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	695b      	ldr	r3, [r3, #20]
 800bd64:	3b01      	subs	r3, #1
 800bd66:	061b      	lsls	r3, r3, #24
 800bd68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bd6c:	4928      	ldr	r1, [pc, #160]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800bd72:	4b27      	ldr	r3, [pc, #156]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bd74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd76:	f023 020c 	bic.w	r2, r3, #12
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	4924      	ldr	r1, [pc, #144]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bd80:	4313      	orrs	r3, r2
 800bd82:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800bd84:	4b22      	ldr	r3, [pc, #136]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bd86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd88:	f023 0220 	bic.w	r2, r3, #32
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	69db      	ldr	r3, [r3, #28]
 800bd90:	491f      	ldr	r1, [pc, #124]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bd92:	4313      	orrs	r3, r2
 800bd94:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800bd96:	4b1e      	ldr	r3, [pc, #120]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bd98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd9e:	491c      	ldr	r1, [pc, #112]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bda0:	4313      	orrs	r3, r2
 800bda2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800bda4:	4b1a      	ldr	r3, [pc, #104]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda8:	4a19      	ldr	r2, [pc, #100]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bdaa:	f023 0310 	bic.w	r3, r3, #16
 800bdae:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800bdb0:	4b17      	ldr	r3, [pc, #92]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bdb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdb4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bdb8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	6a12      	ldr	r2, [r2, #32]
 800bdc0:	00d2      	lsls	r2, r2, #3
 800bdc2:	4913      	ldr	r1, [pc, #76]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800bdc8:	4b11      	ldr	r3, [pc, #68]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bdca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdcc:	4a10      	ldr	r2, [pc, #64]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bdce:	f043 0310 	orr.w	r3, r3, #16
 800bdd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800bdd4:	4b0e      	ldr	r3, [pc, #56]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a0d      	ldr	r2, [pc, #52]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bdda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bdde:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bde0:	f7fc f94a 	bl	8008078 <HAL_GetTick>
 800bde4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bde6:	e008      	b.n	800bdfa <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bde8:	f7fc f946 	bl	8008078 <HAL_GetTick>
 800bdec:	4602      	mov	r2, r0
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d901      	bls.n	800bdfa <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	e006      	b.n	800be08 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bdfa:	4b05      	ldr	r3, [pc, #20]	@ (800be10 <RCCEx_PLL2_Config+0x12c>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be02:	2b00      	cmp	r3, #0
 800be04:	d0f0      	beq.n	800bde8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800be06:	2300      	movs	r3, #0

}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	44020c00 	.word	0x44020c00

0800be14 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800be1c:	4b48      	ldr	r3, [pc, #288]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a47      	ldr	r2, [pc, #284]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800be22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800be28:	f7fc f926 	bl	8008078 <HAL_GetTick>
 800be2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be2e:	e008      	b.n	800be42 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800be30:	f7fc f922 	bl	8008078 <HAL_GetTick>
 800be34:	4602      	mov	r2, r0
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	d901      	bls.n	800be42 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800be3e:	2303      	movs	r3, #3
 800be40:	e07a      	b.n	800bf38 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be42:	4b3f      	ldr	r3, [pc, #252]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1f0      	bne.n	800be30 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800be4e:	4b3c      	ldr	r3, [pc, #240]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800be50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be52:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800be56:	f023 0303 	bic.w	r3, r3, #3
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	6811      	ldr	r1, [r2, #0]
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	6852      	ldr	r2, [r2, #4]
 800be62:	0212      	lsls	r2, r2, #8
 800be64:	430a      	orrs	r2, r1
 800be66:	4936      	ldr	r1, [pc, #216]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800be68:	4313      	orrs	r3, r2
 800be6a:	630b      	str	r3, [r1, #48]	@ 0x30
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	3b01      	subs	r3, #1
 800be72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	3b01      	subs	r3, #1
 800be7c:	025b      	lsls	r3, r3, #9
 800be7e:	b29b      	uxth	r3, r3
 800be80:	431a      	orrs	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	3b01      	subs	r3, #1
 800be88:	041b      	lsls	r3, r3, #16
 800be8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800be8e:	431a      	orrs	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	695b      	ldr	r3, [r3, #20]
 800be94:	3b01      	subs	r3, #1
 800be96:	061b      	lsls	r3, r3, #24
 800be98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800be9c:	4928      	ldr	r1, [pc, #160]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800be9e:	4313      	orrs	r3, r2
 800bea0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bea2:	4b27      	ldr	r3, [pc, #156]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800bea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bea6:	f023 020c 	bic.w	r2, r3, #12
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	4924      	ldr	r1, [pc, #144]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800beb0:	4313      	orrs	r3, r2
 800beb2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800beb4:	4b22      	ldr	r3, [pc, #136]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800beb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beb8:	f023 0220 	bic.w	r2, r3, #32
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	69db      	ldr	r3, [r3, #28]
 800bec0:	491f      	ldr	r1, [pc, #124]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800bec2:	4313      	orrs	r3, r2
 800bec4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800bec6:	4b1e      	ldr	r3, [pc, #120]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800bec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bece:	491c      	ldr	r1, [pc, #112]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800bed0:	4313      	orrs	r3, r2
 800bed2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800bed4:	4b1a      	ldr	r3, [pc, #104]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800bed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bed8:	4a19      	ldr	r2, [pc, #100]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800beda:	f023 0310 	bic.w	r3, r3, #16
 800bede:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800bee0:	4b17      	ldr	r3, [pc, #92]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800bee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bee4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bee8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	6a12      	ldr	r2, [r2, #32]
 800bef0:	00d2      	lsls	r2, r2, #3
 800bef2:	4913      	ldr	r1, [pc, #76]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800bef4:	4313      	orrs	r3, r2
 800bef6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800bef8:	4b11      	ldr	r3, [pc, #68]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800befa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800befc:	4a10      	ldr	r2, [pc, #64]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800befe:	f043 0310 	orr.w	r3, r3, #16
 800bf02:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800bf04:	4b0e      	ldr	r3, [pc, #56]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a0d      	ldr	r2, [pc, #52]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800bf0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf0e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bf10:	f7fc f8b2 	bl	8008078 <HAL_GetTick>
 800bf14:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf16:	e008      	b.n	800bf2a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf18:	f7fc f8ae 	bl	8008078 <HAL_GetTick>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	d901      	bls.n	800bf2a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800bf26:	2303      	movs	r3, #3
 800bf28:	e006      	b.n	800bf38 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf2a:	4b05      	ldr	r3, [pc, #20]	@ (800bf40 <RCCEx_PLL3_Config+0x12c>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d0f0      	beq.n	800bf18 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800bf36:	2300      	movs	r3, #0
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	44020c00 	.word	0x44020c00

0800bf44 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af02      	add	r7, sp, #8
 800bf4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800bf50:	f7fc f892 	bl	8008078 <HAL_GetTick>
 800bf54:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d102      	bne.n	800bf62 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	73fb      	strb	r3, [r7, #15]
 800bf60:	e0bc      	b.n	800c0dc <HAL_XSPI_Init+0x198>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a60      	ldr	r2, [pc, #384]	@ (800c0e8 <HAL_XSPI_Init+0x1a4>)
 800bf68:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f040 80b1 	bne.w	800c0dc <HAL_XSPI_Init+0x198>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f7f4 fc50 	bl	8000820 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800bf80:	f241 3188 	movw	r1, #5000	@ 0x1388
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 fbff 	bl	800c788 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	689a      	ldr	r2, [r3, #8]
 800bf90:	4b56      	ldr	r3, [pc, #344]	@ (800c0ec <HAL_XSPI_Init+0x1a8>)
 800bf92:	4013      	ands	r3, r2
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	68d1      	ldr	r1, [r2, #12]
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	6912      	ldr	r2, [r2, #16]
 800bf9c:	0412      	lsls	r2, r2, #16
 800bf9e:	4311      	orrs	r1, r2
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	6952      	ldr	r2, [r2, #20]
 800bfa4:	3a01      	subs	r2, #1
 800bfa6:	0212      	lsls	r2, r2, #8
 800bfa8:	4311      	orrs	r1, r2
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	69d2      	ldr	r2, [r2, #28]
 800bfae:	4311      	orrs	r1, r2
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	6812      	ldr	r2, [r2, #0]
 800bfb4:	430b      	orrs	r3, r1
 800bfb6:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a4a      	ldr	r2, [pc, #296]	@ (800c0e8 <HAL_XSPI_Init+0x1a4>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d004      	beq.n	800bfcc <HAL_XSPI_Init+0x88>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a4a      	ldr	r2, [pc, #296]	@ (800c0f0 <HAL_XSPI_Init+0x1ac>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d10a      	bne.n	800bfe2 <HAL_XSPI_Init+0x9e>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	f023 0108 	bic.w	r1, r3, #8
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	430a      	orrs	r2, r1
 800bfe0:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6a1a      	ldr	r2, [r3, #32]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	430a      	orrs	r2, r1
 800bff6:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c006:	041a      	lsls	r2, r3, #16
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	430a      	orrs	r2, r1
 800c00e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c018:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	3b01      	subs	r3, #1
 800c02a:	021a      	lsls	r2, r3, #8
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	430a      	orrs	r2, r1
 800c032:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2200      	movs	r2, #0
 800c03e:	2120      	movs	r1, #32
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 fbec 	bl	800c81e <XSPI_WaitFlagStateUntilTimeout>
 800c046:	4603      	mov	r3, r0
 800c048:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800c04a:	7bfb      	ldrb	r3, [r7, #15]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d145      	bne.n	800c0dc <HAL_XSPI_Init+0x198>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	430a      	orrs	r2, r1
 800c064:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	689a      	ldr	r2, [r3, #8]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	430a      	orrs	r2, r1
 800c07a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c084:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c090:	431a      	orrs	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	430a      	orrs	r2, r1
 800c098:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f042 0201 	orr.w	r2, r2, #1
 800c0aa:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	699b      	ldr	r3, [r3, #24]
 800c0b0:	2b02      	cmp	r3, #2
 800c0b2:	d107      	bne.n	800c0c4 <HAL_XSPI_Init+0x180>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	689a      	ldr	r2, [r3, #8]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f042 0202 	orr.w	r2, r2, #2
 800c0c2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c0cc:	d103      	bne.n	800c0d6 <HAL_XSPI_Init+0x192>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	651a      	str	r2, [r3, #80]	@ 0x50
 800c0d4:	e002      	b.n	800c0dc <HAL_XSPI_Init+0x198>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2202      	movs	r2, #2
 800c0da:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
    }
  }
  return status;
 800c0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	47001400 	.word	0x47001400
 800c0ec:	f8e0c0fc 	.word	0xf8e0c0fc
 800c0f0:	57001400 	.word	0x57001400

0800c0f4 <HAL_XSPI_IRQHandler>:
  * @brief  Handle XSPI interrupt request.
  * @param  hxspi : XSPI handle
  * @retval None
  */
void HAL_XSPI_IRQHandler(XSPI_HandleTypeDef *hxspi)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	3350      	adds	r3, #80	@ 0x50
 800c102:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hxspi->Instance->SR;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	6a1b      	ldr	r3, [r3, #32]
 800c10a:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hxspi->Instance->CR;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hxspi->State;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c118:	60bb      	str	r3, [r7, #8]

  /* XSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_XSPI_FLAG_FT) != 0U) && ((itsource & HAL_XSPI_IT_FT) != 0U))
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	f003 0304 	and.w	r3, r3, #4
 800c120:	2b00      	cmp	r3, #0
 800c122:	d03a      	beq.n	800c19a <HAL_XSPI_IRQHandler+0xa6>
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d035      	beq.n	800c19a <HAL_XSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_XSPI_STATE_BUSY_TX)
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	2b18      	cmp	r3, #24
 800c132:	d10f      	bne.n	800c154 <HAL_XSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c138:	781a      	ldrb	r2, [r3, #0]
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	701a      	strb	r2, [r3, #0]
      hxspi->pBuffPtr++;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c142:	1c5a      	adds	r2, r3, #1
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	63da      	str	r2, [r3, #60]	@ 0x3c
      hxspi->XferCount--;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c14c:	1e5a      	subs	r2, r3, #1
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	645a      	str	r2, [r3, #68]	@ 0x44
 800c152:	e012      	b.n	800c17a <HAL_XSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	2b28      	cmp	r3, #40	@ 0x28
 800c158:	d10f      	bne.n	800c17a <HAL_XSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	7812      	ldrb	r2, [r2, #0]
 800c162:	b2d2      	uxtb	r2, r2
 800c164:	701a      	strb	r2, [r3, #0]
      hxspi->pBuffPtr++;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c16a:	1c5a      	adds	r2, r3, #1
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	63da      	str	r2, [r3, #60]	@ 0x3c
      hxspi->XferCount--;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c174:	1e5a      	subs	r2, r3, #1
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	645a      	str	r2, [r3, #68]	@ 0x44
    else
    {
      /* Nothing to do */
    }

    if (hxspi->XferCount == 0U)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d107      	bne.n	800c192 <HAL_XSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_FT);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c190:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->FifoThresholdCallback(hxspi);
#else
    HAL_XSPI_FifoThresholdCallback(hxspi);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fabc 	bl	800c710 <HAL_XSPI_FifoThresholdCallback>
 800c198:	e0f9      	b.n	800c38e <HAL_XSPI_IRQHandler+0x29a>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* XSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TC) != 0U) && ((itsource & HAL_XSPI_IT_TC) != 0U))
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	f003 0302 	and.w	r3, r3, #2
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d067      	beq.n	800c274 <HAL_XSPI_IRQHandler+0x180>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d062      	beq.n	800c274 <HAL_XSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	2b28      	cmp	r3, #40	@ 0x28
 800c1b2:	d131      	bne.n	800c218 <HAL_XSPI_IRQHandler+0x124>
    {
      if ((hxspi->XferCount > 0U) && ((flag & XSPI_SR_FLEVEL) != 0U))
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d015      	beq.n	800c1e8 <HAL_XSPI_IRQHandler+0xf4>
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d010      	beq.n	800c1e8 <HAL_XSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	7812      	ldrb	r2, [r2, #0]
 800c1ce:	b2d2      	uxtb	r2, r2
 800c1d0:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1d6:	1c5a      	adds	r2, r3, #1
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	63da      	str	r2, [r3, #60]	@ 0x3c
        hxspi->XferCount--;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1e0:	1e5a      	subs	r2, r3, #1
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	645a      	str	r2, [r3, #68]	@ 0x44
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 800c1e6:	e0cf      	b.n	800c388 <HAL_XSPI_IRQHandler+0x294>
      }
      else if (hxspi->XferCount == 0U)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f040 80cb 	bne.w	800c388 <HAL_XSPI_IRQHandler+0x294>
      {
        /* Clear flag */
        hxspi->Instance->FCR = HAL_XSPI_FLAG_TC;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_TC | HAL_XSPI_IT_FT | HAL_XSPI_IT_TE);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 800c208:	601a      	str	r2, [r3, #0]

        hxspi->State = HAL_XSPI_STATE_READY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2202      	movs	r2, #2
 800c20e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* RX complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->RxCpltCallback(hxspi);
#else
        HAL_XSPI_RxCpltCallback(hxspi);
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fa91 	bl	800c738 <HAL_XSPI_RxCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 800c216:	e0b7      	b.n	800c388 <HAL_XSPI_IRQHandler+0x294>
      }
    }
    else
    {
      /* Clear flag */
      hxspi->Instance->FCR = HAL_XSPI_FLAG_TC;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2202      	movs	r2, #2
 800c21e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_TC | HAL_XSPI_IT_FT | HAL_XSPI_IT_TE);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 800c22e:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2202      	movs	r2, #2
 800c234:	651a      	str	r2, [r3, #80]	@ 0x50

      if (currentstate == HAL_XSPI_STATE_BUSY_TX)
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	2b18      	cmp	r3, #24
 800c23a:	d103      	bne.n	800c244 <HAL_XSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->TxCpltCallback(hxspi);
#else
        HAL_XSPI_TxCpltCallback(hxspi);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fa85 	bl	800c74c <HAL_XSPI_TxCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 800c242:	e0a1      	b.n	800c388 <HAL_XSPI_IRQHandler+0x294>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_XSPI_STATE_BUSY_CMD)
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	2b08      	cmp	r3, #8
 800c248:	d103      	bne.n	800c252 <HAL_XSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->CmdCpltCallback(hxspi);
#else
        HAL_XSPI_CmdCpltCallback(hxspi);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 fa6a 	bl	800c724 <HAL_XSPI_CmdCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 800c250:	e09a      	b.n	800c388 <HAL_XSPI_IRQHandler+0x294>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_XSPI_STATE_ABORT)
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c258:	f040 8096 	bne.w	800c388 <HAL_XSPI_IRQHandler+0x294>
      {
        if (hxspi->ErrorCode == HAL_XSPI_ERROR_NONE)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c260:	2b00      	cmp	r3, #0
 800c262:	d103      	bne.n	800c26c <HAL_XSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
          hxspi->AbortCpltCallback(hxspi);
#else
          HAL_XSPI_AbortCpltCallback(hxspi);
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 fa49 	bl	800c6fc <HAL_XSPI_AbortCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 800c26a:	e08d      	b.n	800c388 <HAL_XSPI_IRQHandler+0x294>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
          hxspi->ErrorCallback(hxspi);
#else
          HAL_XSPI_ErrorCallback(hxspi);
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 fa3b 	bl	800c6e8 <HAL_XSPI_ErrorCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 800c272:	e089      	b.n	800c388 <HAL_XSPI_IRQHandler+0x294>
        /* Nothing to do */
      }
    }
  }
  /* XSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_SM) != 0U) && ((itsource & HAL_XSPI_IT_SM) != 0U))
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	f003 0308 	and.w	r3, r3, #8
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d01e      	beq.n	800c2bc <HAL_XSPI_IRQHandler+0x1c8>
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c284:	2b00      	cmp	r3, #0
 800c286:	d019      	beq.n	800c2bc <HAL_XSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_SM;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2208      	movs	r2, #8
 800c28e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hxspi->Instance->CR & XSPI_CR_APMS) != 0U)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00a      	beq.n	800c2b4 <HAL_XSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_SM | HAL_XSPI_IT_TE);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 800c2ac:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Status match callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->StatusMatchCallback(hxspi);
#else
    HAL_XSPI_StatusMatchCallback(hxspi);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fa53 	bl	800c760 <HAL_XSPI_StatusMatchCallback>
 800c2ba:	e068      	b.n	800c38e <HAL_XSPI_IRQHandler+0x29a>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* XSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TE) != 0U) && ((itsource & HAL_XSPI_IT_TE) != 0U))
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	f003 0301 	and.w	r3, r3, #1
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d04e      	beq.n	800c364 <HAL_XSPI_IRQHandler+0x270>
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d049      	beq.n	800c364 <HAL_XSPI_IRQHandler+0x270>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_TE;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    HAL_XSPI_DISABLE_IT(hxspi, (HAL_XSPI_IT_TO | HAL_XSPI_IT_SM | HAL_XSPI_IT_FT | HAL_XSPI_IT_TC | HAL_XSPI_IT_TE));
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800c2e6:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_TRANSFER;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2202      	movs	r2, #2
 800c2ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 0304 	and.w	r3, r3, #4
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d02c      	beq.n	800c356 <HAL_XSPI_IRQHandler+0x262>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f022 0204 	bic.w	r2, r2, #4
 800c30a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      hxspi->hdmatx->XferAbortCallback = XSPI_DMAAbortCplt;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c310:	4a21      	ldr	r2, [pc, #132]	@ (800c398 <HAL_XSPI_IRQHandler+0x2a4>)
 800c312:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hxspi->hdmatx) != HAL_OK)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fc f9af 	bl	800867c <HAL_DMA_Abort_IT>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d005      	beq.n	800c330 <HAL_XSPI_IRQHandler+0x23c>
      {
        hxspi->State = HAL_XSPI_STATE_READY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2202      	movs	r2, #2
 800c328:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->ErrorCallback(hxspi);
#else
        HAL_XSPI_ErrorCallback(hxspi);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 f9dc 	bl	800c6e8 <HAL_XSPI_ErrorCallback>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }

      /* Disable the DMA receive on the DMA side */
      hxspi->hdmarx->XferAbortCallback = XSPI_DMAAbortCplt;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c334:	4a18      	ldr	r2, [pc, #96]	@ (800c398 <HAL_XSPI_IRQHandler+0x2a4>)
 800c336:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hxspi->hdmarx) != HAL_OK)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7fc f99d 	bl	800867c <HAL_DMA_Abort_IT>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d021      	beq.n	800c38c <HAL_XSPI_IRQHandler+0x298>
      {
        hxspi->State = HAL_XSPI_STATE_READY;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2202      	movs	r2, #2
 800c34c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->ErrorCallback(hxspi);
#else
        HAL_XSPI_ErrorCallback(hxspi);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 f9ca 	bl	800c6e8 <HAL_XSPI_ErrorCallback>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 800c354:	e01a      	b.n	800c38c <HAL_XSPI_IRQHandler+0x298>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
    }
    else
    {
      hxspi->State = HAL_XSPI_STATE_READY;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2202      	movs	r2, #2
 800c35a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
      hxspi->ErrorCallback(hxspi);
#else
      HAL_XSPI_ErrorCallback(hxspi);
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f9c3 	bl	800c6e8 <HAL_XSPI_ErrorCallback>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 800c362:	e013      	b.n	800c38c <HAL_XSPI_IRQHandler+0x298>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* XSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TO) != 0U) && ((itsource & HAL_XSPI_IT_TO) != 0U))
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	f003 0310 	and.w	r3, r3, #16
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00f      	beq.n	800c38e <HAL_XSPI_IRQHandler+0x29a>
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00a      	beq.n	800c38e <HAL_XSPI_IRQHandler+0x29a>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_TO;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2210      	movs	r2, #16
 800c37e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->TimeOutCallback(hxspi);
#else
    HAL_XSPI_TimeOutCallback(hxspi);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 f9f7 	bl	800c774 <HAL_XSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c386:	e002      	b.n	800c38e <HAL_XSPI_IRQHandler+0x29a>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 800c388:	bf00      	nop
 800c38a:	e000      	b.n	800c38e <HAL_XSPI_IRQHandler+0x29a>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 800c38c:	bf00      	nop
}
 800c38e:	bf00      	nop
 800c390:	3718      	adds	r7, #24
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	0800c7a7 	.word	0x0800c7a7

0800c39c <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b08a      	sub	sp, #40	@ 0x28
 800c3a0:	af02      	add	r7, sp, #8
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800c3a8:	f7fb fe66 	bl	8008078 <HAL_GetTick>
 800c3ac:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3b2:	2b00      	cmp	r3, #0

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_SIOO_MODE(pCmd->SIOOMode));

  /* Check the state of the driver */
  state = hxspi->State;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3b8:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	2b02      	cmp	r3, #2
 800c3be:	d104      	bne.n	800c3ca <HAL_XSPI_Command+0x2e>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c3c8:	d115      	bne.n	800c3f6 <HAL_XSPI_Command+0x5a>
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2b14      	cmp	r3, #20
 800c3ce:	d107      	bne.n	800c3e0 <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d00e      	beq.n	800c3f6 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 800c3dc:	2b03      	cmp	r3, #3
 800c3de:	d00a      	beq.n	800c3f6 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	2b24      	cmp	r3, #36	@ 0x24
 800c3e4:	d15e      	bne.n	800c4a4 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d003      	beq.n	800c3f6 <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	d156      	bne.n	800c4a4 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	2120      	movs	r1, #32
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f000 fa0c 	bl	800c81e <XSPI_WaitFlagStateUntilTimeout>
 800c406:	4603      	mov	r3, r0
 800c408:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800c40a:	7ffb      	ldrb	r3, [r7, #31]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d146      	bne.n	800c49e <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2200      	movs	r2, #0
 800c414:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 800c416:	68b9      	ldr	r1, [r7, #8]
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f000 fa37 	bl	800c88c <XSPI_ConfigCmd>
 800c41e:	4603      	mov	r3, r0
 800c420:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800c422:	7ffb      	ldrb	r3, [r7, #31]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d143      	bne.n	800c4b0 <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10e      	bne.n	800c44e <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	9300      	str	r3, [sp, #0]
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	2200      	movs	r2, #0
 800c438:	2120      	movs	r1, #32
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f000 f9ef 	bl	800c81e <XSPI_WaitFlagStateUntilTimeout>
 800c440:	4603      	mov	r3, r0
 800c442:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2202      	movs	r2, #2
 800c44a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800c44c:	e030      	b.n	800c4b0 <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d103      	bne.n	800c45e <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2204      	movs	r2, #4
 800c45a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800c45c:	e028      	b.n	800c4b0 <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2b01      	cmp	r3, #1
 800c464:	d10b      	bne.n	800c47e <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c46a:	2b24      	cmp	r3, #36	@ 0x24
 800c46c:	d103      	bne.n	800c476 <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2204      	movs	r2, #4
 800c472:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800c474:	e01c      	b.n	800c4b0 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2214      	movs	r2, #20
 800c47a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800c47c:	e018      	b.n	800c4b0 <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b02      	cmp	r3, #2
 800c484:	d114      	bne.n	800c4b0 <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c48a:	2b14      	cmp	r3, #20
 800c48c:	d103      	bne.n	800c496 <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2204      	movs	r2, #4
 800c492:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800c494:	e00c      	b.n	800c4b0 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2224      	movs	r2, #36	@ 0x24
 800c49a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800c49c:	e008      	b.n	800c4b0 <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 800c49e:	2302      	movs	r3, #2
 800c4a0:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 800c4a2:	e005      	b.n	800c4b0 <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2210      	movs	r2, #16
 800c4ac:	655a      	str	r2, [r3, #84]	@ 0x54
 800c4ae:	e000      	b.n	800c4b2 <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
 800c4b0:	bf00      	nop
  }

  return status;
 800c4b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3720      	adds	r7, #32
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08a      	sub	sp, #40	@ 0x28
 800c4c0:	af02      	add	r7, sp, #8
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c4c8:	f7fb fdd6 	bl	8008078 <HAL_GetTick>
 800c4cc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	3350      	adds	r3, #80	@ 0x50
 800c4d4:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d105      	bne.n	800c4e8 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2208      	movs	r2, #8
 800c4e4:	655a      	str	r2, [r3, #84]	@ 0x54
 800c4e6:	e057      	b.n	800c598 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4ec:	2b04      	cmp	r3, #4
 800c4ee:	d14e      	bne.n	800c58e <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4f6:	1c5a      	adds	r2, r3, #1
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferSize  = hxspi->XferCount;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	68ba      	ldr	r2, [r7, #8]
 800c508:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800c518:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	2201      	movs	r2, #1
 800c522:	2104      	movs	r1, #4
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f000 f97a 	bl	800c81e <XSPI_WaitFlagStateUntilTimeout>
 800c52a:	4603      	mov	r3, r0
 800c52c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c52e:	7ffb      	ldrb	r3, [r7, #31]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d113      	bne.n	800c55c <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c538:	781a      	ldrb	r2, [r3, #0]
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c542:	1c5a      	adds	r2, r3, #1
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	63da      	str	r2, [r3, #60]	@ 0x3c
        hxspi->XferCount--;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c54c:	1e5a      	subs	r2, r3, #1
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	645a      	str	r2, [r3, #68]	@ 0x44
      } while (hxspi->XferCount > 0U);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1df      	bne.n	800c51a <HAL_XSPI_Transmit+0x5e>
 800c55a:	e000      	b.n	800c55e <HAL_XSPI_Transmit+0xa2>
          break;
 800c55c:	bf00      	nop

      if (status == HAL_OK)
 800c55e:	7ffb      	ldrb	r3, [r7, #31]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d119      	bne.n	800c598 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	2201      	movs	r2, #1
 800c56c:	2102      	movs	r1, #2
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f000 f955 	bl	800c81e <XSPI_WaitFlagStateUntilTimeout>
 800c574:	4603      	mov	r3, r0
 800c576:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c578:	7ffb      	ldrb	r3, [r7, #31]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10c      	bne.n	800c598 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2202      	movs	r2, #2
 800c584:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2202      	movs	r2, #2
 800c58a:	651a      	str	r2, [r3, #80]	@ 0x50
 800c58c:	e004      	b.n	800c598 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2210      	movs	r2, #16
 800c596:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 800c598:	7ffb      	ldrb	r3, [r7, #31]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3720      	adds	r7, #32
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b08c      	sub	sp, #48	@ 0x30
 800c5a6:	af02      	add	r7, sp, #8
 800c5a8:	60f8      	str	r0, [r7, #12]
 800c5aa:	60b9      	str	r1, [r7, #8]
 800c5ac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c5ae:	f7fb fd63 	bl	8008078 <HAL_GetTick>
 800c5b2:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3350      	adds	r3, #80	@ 0x50
 800c5ba:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5c2:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800c5cc:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d106      	bne.n	800c5e2 <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2208      	movs	r2, #8
 800c5de:	655a      	str	r2, [r3, #84]	@ 0x54
 800c5e0:	e07c      	b.n	800c6dc <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5e6:	2b04      	cmp	r3, #4
 800c5e8:	d172      	bne.n	800c6d0 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5f0:	1c5a      	adds	r2, r3, #1
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferSize  = hxspi->XferCount;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800c616:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c620:	d104      	bne.n	800c62c <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	69ba      	ldr	r2, [r7, #24]
 800c628:	649a      	str	r2, [r3, #72]	@ 0x48
 800c62a:	e011      	b.n	800c650 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800c634:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d004      	beq.n	800c646 <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	69ba      	ldr	r2, [r7, #24]
 800c642:	649a      	str	r2, [r3, #72]	@ 0x48
 800c644:	e004      	b.n	800c650 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	2201      	movs	r2, #1
 800c658:	2106      	movs	r1, #6
 800c65a:	68f8      	ldr	r0, [r7, #12]
 800c65c:	f000 f8df 	bl	800c81e <XSPI_WaitFlagStateUntilTimeout>
 800c660:	4603      	mov	r3, r0
 800c662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800c666:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d114      	bne.n	800c698 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c672:	69fa      	ldr	r2, [r7, #28]
 800c674:	7812      	ldrb	r2, [r2, #0]
 800c676:	b2d2      	uxtb	r2, r2
 800c678:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c67e:	1c5a      	adds	r2, r3, #1
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	63da      	str	r2, [r3, #60]	@ 0x3c
        hxspi->XferCount--;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c688:	1e5a      	subs	r2, r3, #1
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	645a      	str	r2, [r3, #68]	@ 0x44
      } while (hxspi->XferCount > 0U);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c692:	2b00      	cmp	r3, #0
 800c694:	d1dc      	bne.n	800c650 <HAL_XSPI_Receive+0xae>
 800c696:	e000      	b.n	800c69a <HAL_XSPI_Receive+0xf8>
          break;
 800c698:	bf00      	nop

      if (status == HAL_OK)
 800c69a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d11c      	bne.n	800c6dc <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	9300      	str	r3, [sp, #0]
 800c6a6:	6a3b      	ldr	r3, [r7, #32]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	2102      	movs	r1, #2
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f000 f8b6 	bl	800c81e <XSPI_WaitFlagStateUntilTimeout>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800c6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d10d      	bne.n	800c6dc <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2202      	movs	r2, #2
 800c6c6:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2202      	movs	r2, #2
 800c6cc:	651a      	str	r2, [r3, #80]	@ 0x50
 800c6ce:	e005      	b.n	800c6dc <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2210      	movs	r2, #16
 800c6da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 800c6dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3728      	adds	r7, #40	@ 0x28
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <HAL_XSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_ErrorCallback(XSPI_HandleTypeDef *hxspi)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_ErrorCallback could be implemented in the user file
   */
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <HAL_XSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_AbortCpltCallback(XSPI_HandleTypeDef *hxspi)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800c704:	bf00      	nop
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <HAL_XSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_FifoThresholdCallback(XSPI_HandleTypeDef *hxspi)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800c718:	bf00      	nop
 800c71a:	370c      	adds	r7, #12
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <HAL_XSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_CmdCpltCallback(XSPI_HandleTypeDef *hxspi)
{
 800c724:	b480      	push	{r7}
 800c726:	b083      	sub	sp, #12
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800c72c:	bf00      	nop
 800c72e:	370c      	adds	r7, #12
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <HAL_XSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_RxCpltCallback(XSPI_HandleTypeDef *hxspi)
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_RxCpltCallback could be implemented in the user file
   */
}
 800c740:	bf00      	nop
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <HAL_XSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_TxCpltCallback(XSPI_HandleTypeDef *hxspi)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_TxCpltCallback could be implemented in the user file
   */
}
 800c754:	bf00      	nop
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <HAL_XSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_StatusMatchCallback(XSPI_HandleTypeDef *hxspi)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <HAL_XSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_TimeOutCallback(XSPI_HandleTypeDef *hxspi)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_TimeOutCallback could be implemented in the user file
   */
}
 800c77c:	bf00      	nop
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	683a      	ldr	r2, [r7, #0]
 800c796:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	370c      	adds	r7, #12
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <XSPI_DMAAbortCplt>:
  * @brief  DMA XSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void XSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b084      	sub	sp, #16
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
  XSPI_HandleTypeDef *hxspi = (XSPI_HandleTypeDef *)(hdma->Parent);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7b2:	60fb      	str	r3, [r7, #12]
  hxspi->XferCount = 0;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_ABORT)
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7c2:	d122      	bne.n	800c80a <XSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by XSPI abort */
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	6a1b      	ldr	r3, [r3, #32]
 800c7ca:	f003 0320 	and.w	r3, r3, #32
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d014      	beq.n	800c7fc <XSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2202      	movs	r2, #2
 800c7d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TC);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c7e8:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f042 0202 	orr.w	r2, r2, #2
 800c7f8:	601a      	str	r2, [r3, #0]
    hxspi->ErrorCallback(hxspi);
#else
    HAL_XSPI_ErrorCallback(hxspi);
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
}
 800c7fa:	e00c      	b.n	800c816 <XSPI_DMAAbortCplt+0x70>
      hxspi->State = HAL_XSPI_STATE_READY;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2202      	movs	r2, #2
 800c800:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_XSPI_AbortCpltCallback(hxspi);
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	f7ff ff7a 	bl	800c6fc <HAL_XSPI_AbortCpltCallback>
}
 800c808:	e005      	b.n	800c816 <XSPI_DMAAbortCplt+0x70>
    hxspi->State = HAL_XSPI_STATE_READY;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2202      	movs	r2, #2
 800c80e:	651a      	str	r2, [r3, #80]	@ 0x50
    HAL_XSPI_ErrorCallback(hxspi);
 800c810:	68f8      	ldr	r0, [r7, #12]
 800c812:	f7ff ff69 	bl	800c6e8 <HAL_XSPI_ErrorCallback>
}
 800c816:	bf00      	nop
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}

0800c81e <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c81e:	b580      	push	{r7, lr}
 800c820:	b084      	sub	sp, #16
 800c822:	af00      	add	r7, sp, #0
 800c824:	60f8      	str	r0, [r7, #12]
 800c826:	60b9      	str	r1, [r7, #8]
 800c828:	603b      	str	r3, [r7, #0]
 800c82a:	4613      	mov	r3, r2
 800c82c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 800c82e:	e019      	b.n	800c864 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c836:	d015      	beq.n	800c864 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c838:	f7fb fc1e 	bl	8008078 <HAL_GetTick>
 800c83c:	4602      	mov	r2, r0
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	69ba      	ldr	r2, [r7, #24]
 800c844:	429a      	cmp	r2, r3
 800c846:	d302      	bcc.n	800c84e <XSPI_WaitFlagStateUntilTimeout+0x30>
 800c848:	69bb      	ldr	r3, [r7, #24]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10a      	bne.n	800c864 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2202      	movs	r2, #2
 800c852:	651a      	str	r2, [r3, #80]	@ 0x50
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c858:	f043 0201 	orr.w	r2, r3, #1
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_TIMEOUT;
 800c860:	2303      	movs	r3, #3
 800c862:	e00e      	b.n	800c882 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	6a1a      	ldr	r2, [r3, #32]
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	4013      	ands	r3, r2
 800c86e:	2b00      	cmp	r3, #0
 800c870:	bf14      	ite	ne
 800c872:	2301      	movne	r3, #1
 800c874:	2300      	moveq	r3, #0
 800c876:	b2db      	uxtb	r3, r3
 800c878:	461a      	mov	r2, r3
 800c87a:	79fb      	ldrb	r3, [r7, #7]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d1d7      	bne.n	800c830 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
	...

0800c88c <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b089      	sub	sp, #36	@ 0x24
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800c8a8:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10a      	bne.n	800c8c8 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	430a      	orrs	r2, r1
 800c8c6:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	d114      	bne.n	800c8fa <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800c8d8:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800c8e2:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800c8ec:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800c8f6:	60fb      	str	r3, [r7, #12]
 800c8f8:	e02c      	b.n	800c954 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2b03      	cmp	r3, #3
 800c900:	d114      	bne.n	800c92c <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800c90a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800c914:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c91e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800c928:	60fb      	str	r3, [r7, #12]
 800c92a:	e013      	b.n	800c954 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800c934:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800c93e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800c948:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800c952:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (pCmd->DQSMode | pCmd->SIOOMode);
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c95c:	431a      	orrs	r2, r3
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	601a      	str	r2, [r3, #0]

  /* Workaround for Erratasheet: Memory-mapped write error response when DQS output is disabled */
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2b02      	cmp	r3, #2
 800c968:	d105      	bne.n	800c976 <XSPI_ConfigCmd+0xea>
  {
    /* When doing memory-mapped writes, set the DQSE bit of the OCTOSPI_WCCR register,
       even for memories that have no DQS pin. */
    SET_BIT((*ccr_reg), XSPI_CCR_DQSE);
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d012      	beq.n	800c9a4 <XSPI_ConfigCmd+0x118>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c996:	4319      	orrs	r1, r3
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c99c:	430b      	orrs	r3, r1
 800c99e:	431a      	orrs	r2, r3
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f023 021f 	bic.w	r2, r3, #31
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9b0:	431a      	orrs	r2, r3
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d009      	beq.n	800c9d2 <XSPI_ConfigCmd+0x146>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d105      	bne.n	800c9d2 <XSPI_ConfigCmd+0x146>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	3a01      	subs	r2, #1
 800c9d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d01e      	beq.n	800ca18 <XSPI_ConfigCmd+0x18c>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c9e2:	d10a      	bne.n	800c9fa <XSPI_ConfigCmd+0x16e>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800c9f4:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 800c9f8:	e00e      	b.n	800ca18 <XSPI_ConfigCmd+0x18c>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca02:	d109      	bne.n	800ca18 <XSPI_ConfigCmd+0x18c>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800ca14:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f000 8099 	beq.w	800cb54 <XSPI_ConfigCmd+0x2c8>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	69db      	ldr	r3, [r3, #28]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d055      	beq.n	800cad6 <XSPI_ConfigCmd+0x24a>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d01e      	beq.n	800ca70 <XSPI_ConfigCmd+0x1e4>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 800ca32:	69bb      	ldr	r3, [r7, #24]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	4b68      	ldr	r3, [pc, #416]	@ (800cbd8 <XSPI_ConfigCmd+0x34c>)
 800ca38:	4013      	ands	r3, r2
 800ca3a:	683a      	ldr	r2, [r7, #0]
 800ca3c:	68d1      	ldr	r1, [r2, #12]
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	6952      	ldr	r2, [r2, #20]
 800ca42:	4311      	orrs	r1, r2
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	6912      	ldr	r2, [r2, #16]
 800ca48:	4311      	orrs	r1, r2
 800ca4a:	683a      	ldr	r2, [r7, #0]
 800ca4c:	69d2      	ldr	r2, [r2, #28]
 800ca4e:	4311      	orrs	r1, r2
 800ca50:	683a      	ldr	r2, [r7, #0]
 800ca52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ca54:	4311      	orrs	r1, r2
 800ca56:	683a      	ldr	r2, [r7, #0]
 800ca58:	6a12      	ldr	r2, [r2, #32]
 800ca5a:	4311      	orrs	r1, r2
 800ca5c:	683a      	ldr	r2, [r7, #0]
 800ca5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ca60:	4311      	orrs	r1, r2
 800ca62:	683a      	ldr	r2, [r7, #0]
 800ca64:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ca66:	430a      	orrs	r2, r1
 800ca68:	431a      	orrs	r2, r3
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	601a      	str	r2, [r3, #0]
 800ca6e:	e028      	b.n	800cac2 <XSPI_ConfigCmd+0x236>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ca78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	68d1      	ldr	r1, [r2, #12]
 800ca80:	683a      	ldr	r2, [r7, #0]
 800ca82:	6952      	ldr	r2, [r2, #20]
 800ca84:	4311      	orrs	r1, r2
 800ca86:	683a      	ldr	r2, [r7, #0]
 800ca88:	6912      	ldr	r2, [r2, #16]
 800ca8a:	4311      	orrs	r1, r2
 800ca8c:	683a      	ldr	r2, [r7, #0]
 800ca8e:	69d2      	ldr	r2, [r2, #28]
 800ca90:	4311      	orrs	r1, r2
 800ca92:	683a      	ldr	r2, [r7, #0]
 800ca94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ca96:	4311      	orrs	r1, r2
 800ca98:	683a      	ldr	r2, [r7, #0]
 800ca9a:	6a12      	ldr	r2, [r2, #32]
 800ca9c:	430a      	orrs	r2, r1
 800ca9e:	431a      	orrs	r2, r3
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800caac:	d109      	bne.n	800cac2 <XSPI_ConfigCmd+0x236>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800cab2:	2b08      	cmp	r3, #8
 800cab4:	d105      	bne.n	800cac2 <XSPI_ConfigCmd+0x236>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	689a      	ldr	r2, [r3, #8]
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	683a      	ldr	r2, [r7, #0]
 800cad0:	6992      	ldr	r2, [r2, #24]
 800cad2:	649a      	str	r2, [r3, #72]	@ 0x48
 800cad4:	e078      	b.n	800cbc8 <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d017      	beq.n	800cb0e <XSPI_ConfigCmd+0x282>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800cae6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800caea:	683a      	ldr	r2, [r7, #0]
 800caec:	68d1      	ldr	r1, [r2, #12]
 800caee:	683a      	ldr	r2, [r7, #0]
 800caf0:	6952      	ldr	r2, [r2, #20]
 800caf2:	4311      	orrs	r1, r2
 800caf4:	683a      	ldr	r2, [r7, #0]
 800caf6:	6912      	ldr	r2, [r2, #16]
 800caf8:	4311      	orrs	r1, r2
 800cafa:	683a      	ldr	r2, [r7, #0]
 800cafc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800cafe:	4311      	orrs	r1, r2
 800cb00:	683a      	ldr	r2, [r7, #0]
 800cb02:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800cb04:	430a      	orrs	r2, r1
 800cb06:	431a      	orrs	r2, r3
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	601a      	str	r2, [r3, #0]
 800cb0c:	e01d      	b.n	800cb4a <XSPI_ConfigCmd+0x2be>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	68d9      	ldr	r1, [r3, #12]
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	695b      	ldr	r3, [r3, #20]
 800cb1e:	4319      	orrs	r1, r3
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	691b      	ldr	r3, [r3, #16]
 800cb24:	430b      	orrs	r3, r1
 800cb26:	431a      	orrs	r2, r3
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb34:	d109      	bne.n	800cb4a <XSPI_ConfigCmd+0x2be>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800cb3a:	2b08      	cmp	r3, #8
 800cb3c:	d105      	bne.n	800cb4a <XSPI_ConfigCmd+0x2be>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	689a      	ldr	r2, [r3, #8]
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	601a      	str	r2, [r3, #0]
 800cb52:	e039      	b.n	800cbc8 <XSPI_ConfigCmd+0x33c>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	69db      	ldr	r3, [r3, #28]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d030      	beq.n	800cbbe <XSPI_ConfigCmd+0x332>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d017      	beq.n	800cb94 <XSPI_ConfigCmd+0x308>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800cb6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cb70:	683a      	ldr	r2, [r7, #0]
 800cb72:	69d1      	ldr	r1, [r2, #28]
 800cb74:	683a      	ldr	r2, [r7, #0]
 800cb76:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800cb78:	4311      	orrs	r1, r2
 800cb7a:	683a      	ldr	r2, [r7, #0]
 800cb7c:	6a12      	ldr	r2, [r2, #32]
 800cb7e:	4311      	orrs	r1, r2
 800cb80:	683a      	ldr	r2, [r7, #0]
 800cb82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800cb84:	4311      	orrs	r1, r2
 800cb86:	683a      	ldr	r2, [r7, #0]
 800cb88:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800cb8a:	430a      	orrs	r2, r1
 800cb8c:	431a      	orrs	r2, r3
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	601a      	str	r2, [r3, #0]
 800cb92:	e00e      	b.n	800cbb2 <XSPI_ConfigCmd+0x326>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	69d9      	ldr	r1, [r3, #28]
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cba4:	4319      	orrs	r1, r3
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	6a1b      	ldr	r3, [r3, #32]
 800cbaa:	430b      	orrs	r3, r1
 800cbac:	431a      	orrs	r2, r3
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	683a      	ldr	r2, [r7, #0]
 800cbb8:	6992      	ldr	r2, [r2, #24]
 800cbba:	649a      	str	r2, [r3, #72]	@ 0x48
 800cbbc:	e004      	b.n	800cbc8 <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2208      	movs	r2, #8
 800cbc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 800cbc8:	7ffb      	ldrb	r3, [r7, #31]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3724      	adds	r7, #36	@ 0x24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	f0ffc0c0 	.word	0xf0ffc0c0

0800cbdc <__assert_func>:
 800cbdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbde:	4614      	mov	r4, r2
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	4b09      	ldr	r3, [pc, #36]	@ (800cc08 <__assert_func+0x2c>)
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68d8      	ldr	r0, [r3, #12]
 800cbea:	b14c      	cbz	r4, 800cc00 <__assert_func+0x24>
 800cbec:	4b07      	ldr	r3, [pc, #28]	@ (800cc0c <__assert_func+0x30>)
 800cbee:	9100      	str	r1, [sp, #0]
 800cbf0:	4907      	ldr	r1, [pc, #28]	@ (800cc10 <__assert_func+0x34>)
 800cbf2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbf6:	462b      	mov	r3, r5
 800cbf8:	f000 f970 	bl	800cedc <fiprintf>
 800cbfc:	f000 fabc 	bl	800d178 <abort>
 800cc00:	4b04      	ldr	r3, [pc, #16]	@ (800cc14 <__assert_func+0x38>)
 800cc02:	461c      	mov	r4, r3
 800cc04:	e7f3      	b.n	800cbee <__assert_func+0x12>
 800cc06:	bf00      	nop
 800cc08:	2000006c 	.word	0x2000006c
 800cc0c:	0800ebd4 	.word	0x0800ebd4
 800cc10:	0800ebe1 	.word	0x0800ebe1
 800cc14:	0800ec0f 	.word	0x0800ec0f

0800cc18 <malloc>:
 800cc18:	4b02      	ldr	r3, [pc, #8]	@ (800cc24 <malloc+0xc>)
 800cc1a:	4601      	mov	r1, r0
 800cc1c:	6818      	ldr	r0, [r3, #0]
 800cc1e:	f000 b82d 	b.w	800cc7c <_malloc_r>
 800cc22:	bf00      	nop
 800cc24:	2000006c 	.word	0x2000006c

0800cc28 <free>:
 800cc28:	4b02      	ldr	r3, [pc, #8]	@ (800cc34 <free+0xc>)
 800cc2a:	4601      	mov	r1, r0
 800cc2c:	6818      	ldr	r0, [r3, #0]
 800cc2e:	f000 baab 	b.w	800d188 <_free_r>
 800cc32:	bf00      	nop
 800cc34:	2000006c 	.word	0x2000006c

0800cc38 <sbrk_aligned>:
 800cc38:	b570      	push	{r4, r5, r6, lr}
 800cc3a:	4e0f      	ldr	r6, [pc, #60]	@ (800cc78 <sbrk_aligned+0x40>)
 800cc3c:	460c      	mov	r4, r1
 800cc3e:	4605      	mov	r5, r0
 800cc40:	6831      	ldr	r1, [r6, #0]
 800cc42:	b911      	cbnz	r1, 800cc4a <sbrk_aligned+0x12>
 800cc44:	f000 fa3c 	bl	800d0c0 <_sbrk_r>
 800cc48:	6030      	str	r0, [r6, #0]
 800cc4a:	4621      	mov	r1, r4
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	f000 fa37 	bl	800d0c0 <_sbrk_r>
 800cc52:	1c43      	adds	r3, r0, #1
 800cc54:	d103      	bne.n	800cc5e <sbrk_aligned+0x26>
 800cc56:	f04f 34ff 	mov.w	r4, #4294967295
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	bd70      	pop	{r4, r5, r6, pc}
 800cc5e:	1cc4      	adds	r4, r0, #3
 800cc60:	f024 0403 	bic.w	r4, r4, #3
 800cc64:	42a0      	cmp	r0, r4
 800cc66:	d0f8      	beq.n	800cc5a <sbrk_aligned+0x22>
 800cc68:	1a21      	subs	r1, r4, r0
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	f000 fa28 	bl	800d0c0 <_sbrk_r>
 800cc70:	3001      	adds	r0, #1
 800cc72:	d1f2      	bne.n	800cc5a <sbrk_aligned+0x22>
 800cc74:	e7ef      	b.n	800cc56 <sbrk_aligned+0x1e>
 800cc76:	bf00      	nop
 800cc78:	200002ac 	.word	0x200002ac

0800cc7c <_malloc_r>:
 800cc7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc80:	1ccd      	adds	r5, r1, #3
 800cc82:	4606      	mov	r6, r0
 800cc84:	f025 0503 	bic.w	r5, r5, #3
 800cc88:	3508      	adds	r5, #8
 800cc8a:	2d0c      	cmp	r5, #12
 800cc8c:	bf38      	it	cc
 800cc8e:	250c      	movcc	r5, #12
 800cc90:	2d00      	cmp	r5, #0
 800cc92:	db01      	blt.n	800cc98 <_malloc_r+0x1c>
 800cc94:	42a9      	cmp	r1, r5
 800cc96:	d904      	bls.n	800cca2 <_malloc_r+0x26>
 800cc98:	230c      	movs	r3, #12
 800cc9a:	6033      	str	r3, [r6, #0]
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cca2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd78 <_malloc_r+0xfc>
 800cca6:	f000 f869 	bl	800cd7c <__malloc_lock>
 800ccaa:	f8d8 3000 	ldr.w	r3, [r8]
 800ccae:	461c      	mov	r4, r3
 800ccb0:	bb44      	cbnz	r4, 800cd04 <_malloc_r+0x88>
 800ccb2:	4629      	mov	r1, r5
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	f7ff ffbf 	bl	800cc38 <sbrk_aligned>
 800ccba:	1c43      	adds	r3, r0, #1
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	d158      	bne.n	800cd72 <_malloc_r+0xf6>
 800ccc0:	f8d8 4000 	ldr.w	r4, [r8]
 800ccc4:	4627      	mov	r7, r4
 800ccc6:	2f00      	cmp	r7, #0
 800ccc8:	d143      	bne.n	800cd52 <_malloc_r+0xd6>
 800ccca:	2c00      	cmp	r4, #0
 800cccc:	d04b      	beq.n	800cd66 <_malloc_r+0xea>
 800ccce:	6823      	ldr	r3, [r4, #0]
 800ccd0:	4639      	mov	r1, r7
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	eb04 0903 	add.w	r9, r4, r3
 800ccd8:	f000 f9f2 	bl	800d0c0 <_sbrk_r>
 800ccdc:	4581      	cmp	r9, r0
 800ccde:	d142      	bne.n	800cd66 <_malloc_r+0xea>
 800cce0:	6821      	ldr	r1, [r4, #0]
 800cce2:	4630      	mov	r0, r6
 800cce4:	1a6d      	subs	r5, r5, r1
 800cce6:	4629      	mov	r1, r5
 800cce8:	f7ff ffa6 	bl	800cc38 <sbrk_aligned>
 800ccec:	3001      	adds	r0, #1
 800ccee:	d03a      	beq.n	800cd66 <_malloc_r+0xea>
 800ccf0:	6823      	ldr	r3, [r4, #0]
 800ccf2:	442b      	add	r3, r5
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	f8d8 3000 	ldr.w	r3, [r8]
 800ccfa:	685a      	ldr	r2, [r3, #4]
 800ccfc:	bb62      	cbnz	r2, 800cd58 <_malloc_r+0xdc>
 800ccfe:	f8c8 7000 	str.w	r7, [r8]
 800cd02:	e00f      	b.n	800cd24 <_malloc_r+0xa8>
 800cd04:	6822      	ldr	r2, [r4, #0]
 800cd06:	1b52      	subs	r2, r2, r5
 800cd08:	d420      	bmi.n	800cd4c <_malloc_r+0xd0>
 800cd0a:	2a0b      	cmp	r2, #11
 800cd0c:	d917      	bls.n	800cd3e <_malloc_r+0xc2>
 800cd0e:	1961      	adds	r1, r4, r5
 800cd10:	42a3      	cmp	r3, r4
 800cd12:	6025      	str	r5, [r4, #0]
 800cd14:	bf18      	it	ne
 800cd16:	6059      	strne	r1, [r3, #4]
 800cd18:	6863      	ldr	r3, [r4, #4]
 800cd1a:	bf08      	it	eq
 800cd1c:	f8c8 1000 	streq.w	r1, [r8]
 800cd20:	5162      	str	r2, [r4, r5]
 800cd22:	604b      	str	r3, [r1, #4]
 800cd24:	4630      	mov	r0, r6
 800cd26:	f000 f82f 	bl	800cd88 <__malloc_unlock>
 800cd2a:	f104 000b 	add.w	r0, r4, #11
 800cd2e:	1d23      	adds	r3, r4, #4
 800cd30:	f020 0007 	bic.w	r0, r0, #7
 800cd34:	1ac2      	subs	r2, r0, r3
 800cd36:	bf1c      	itt	ne
 800cd38:	1a1b      	subne	r3, r3, r0
 800cd3a:	50a3      	strne	r3, [r4, r2]
 800cd3c:	e7af      	b.n	800cc9e <_malloc_r+0x22>
 800cd3e:	6862      	ldr	r2, [r4, #4]
 800cd40:	42a3      	cmp	r3, r4
 800cd42:	bf0c      	ite	eq
 800cd44:	f8c8 2000 	streq.w	r2, [r8]
 800cd48:	605a      	strne	r2, [r3, #4]
 800cd4a:	e7eb      	b.n	800cd24 <_malloc_r+0xa8>
 800cd4c:	4623      	mov	r3, r4
 800cd4e:	6864      	ldr	r4, [r4, #4]
 800cd50:	e7ae      	b.n	800ccb0 <_malloc_r+0x34>
 800cd52:	463c      	mov	r4, r7
 800cd54:	687f      	ldr	r7, [r7, #4]
 800cd56:	e7b6      	b.n	800ccc6 <_malloc_r+0x4a>
 800cd58:	461a      	mov	r2, r3
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	42a3      	cmp	r3, r4
 800cd5e:	d1fb      	bne.n	800cd58 <_malloc_r+0xdc>
 800cd60:	2300      	movs	r3, #0
 800cd62:	6053      	str	r3, [r2, #4]
 800cd64:	e7de      	b.n	800cd24 <_malloc_r+0xa8>
 800cd66:	230c      	movs	r3, #12
 800cd68:	4630      	mov	r0, r6
 800cd6a:	6033      	str	r3, [r6, #0]
 800cd6c:	f000 f80c 	bl	800cd88 <__malloc_unlock>
 800cd70:	e794      	b.n	800cc9c <_malloc_r+0x20>
 800cd72:	6005      	str	r5, [r0, #0]
 800cd74:	e7d6      	b.n	800cd24 <_malloc_r+0xa8>
 800cd76:	bf00      	nop
 800cd78:	200002b0 	.word	0x200002b0

0800cd7c <__malloc_lock>:
 800cd7c:	4801      	ldr	r0, [pc, #4]	@ (800cd84 <__malloc_lock+0x8>)
 800cd7e:	f000 b9ec 	b.w	800d15a <__retarget_lock_acquire_recursive>
 800cd82:	bf00      	nop
 800cd84:	200003f4 	.word	0x200003f4

0800cd88 <__malloc_unlock>:
 800cd88:	4801      	ldr	r0, [pc, #4]	@ (800cd90 <__malloc_unlock+0x8>)
 800cd8a:	f000 b9e7 	b.w	800d15c <__retarget_lock_release_recursive>
 800cd8e:	bf00      	nop
 800cd90:	200003f4 	.word	0x200003f4

0800cd94 <std>:
 800cd94:	2300      	movs	r3, #0
 800cd96:	b510      	push	{r4, lr}
 800cd98:	4604      	mov	r4, r0
 800cd9a:	6083      	str	r3, [r0, #8]
 800cd9c:	8181      	strh	r1, [r0, #12]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	6643      	str	r3, [r0, #100]	@ 0x64
 800cda2:	81c2      	strh	r2, [r0, #14]
 800cda4:	2208      	movs	r2, #8
 800cda6:	6183      	str	r3, [r0, #24]
 800cda8:	e9c0 3300 	strd	r3, r3, [r0]
 800cdac:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdb0:	305c      	adds	r0, #92	@ 0x5c
 800cdb2:	f000 f928 	bl	800d006 <memset>
 800cdb6:	4b0d      	ldr	r3, [pc, #52]	@ (800cdec <std+0x58>)
 800cdb8:	6224      	str	r4, [r4, #32]
 800cdba:	6263      	str	r3, [r4, #36]	@ 0x24
 800cdbc:	4b0c      	ldr	r3, [pc, #48]	@ (800cdf0 <std+0x5c>)
 800cdbe:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cdc0:	4b0c      	ldr	r3, [pc, #48]	@ (800cdf4 <std+0x60>)
 800cdc2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cdc4:	4b0c      	ldr	r3, [pc, #48]	@ (800cdf8 <std+0x64>)
 800cdc6:	6323      	str	r3, [r4, #48]	@ 0x30
 800cdc8:	4b0c      	ldr	r3, [pc, #48]	@ (800cdfc <std+0x68>)
 800cdca:	429c      	cmp	r4, r3
 800cdcc:	d006      	beq.n	800cddc <std+0x48>
 800cdce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cdd2:	4294      	cmp	r4, r2
 800cdd4:	d002      	beq.n	800cddc <std+0x48>
 800cdd6:	33d0      	adds	r3, #208	@ 0xd0
 800cdd8:	429c      	cmp	r4, r3
 800cdda:	d105      	bne.n	800cde8 <std+0x54>
 800cddc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cde0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cde4:	f000 b9b8 	b.w	800d158 <__retarget_lock_init_recursive>
 800cde8:	bd10      	pop	{r4, pc}
 800cdea:	bf00      	nop
 800cdec:	0800cf61 	.word	0x0800cf61
 800cdf0:	0800cf83 	.word	0x0800cf83
 800cdf4:	0800cfbb 	.word	0x0800cfbb
 800cdf8:	0800cfdf 	.word	0x0800cfdf
 800cdfc:	200002b4 	.word	0x200002b4

0800ce00 <stdio_exit_handler>:
 800ce00:	4a02      	ldr	r2, [pc, #8]	@ (800ce0c <stdio_exit_handler+0xc>)
 800ce02:	4903      	ldr	r1, [pc, #12]	@ (800ce10 <stdio_exit_handler+0x10>)
 800ce04:	4803      	ldr	r0, [pc, #12]	@ (800ce14 <stdio_exit_handler+0x14>)
 800ce06:	f000 b87b 	b.w	800cf00 <_fwalk_sglue>
 800ce0a:	bf00      	nop
 800ce0c:	20000060 	.word	0x20000060
 800ce10:	0800d8c9 	.word	0x0800d8c9
 800ce14:	20000070 	.word	0x20000070

0800ce18 <cleanup_stdio>:
 800ce18:	6841      	ldr	r1, [r0, #4]
 800ce1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ce4c <cleanup_stdio+0x34>)
 800ce1c:	4299      	cmp	r1, r3
 800ce1e:	b510      	push	{r4, lr}
 800ce20:	4604      	mov	r4, r0
 800ce22:	d001      	beq.n	800ce28 <cleanup_stdio+0x10>
 800ce24:	f000 fd50 	bl	800d8c8 <_fflush_r>
 800ce28:	68a1      	ldr	r1, [r4, #8]
 800ce2a:	4b09      	ldr	r3, [pc, #36]	@ (800ce50 <cleanup_stdio+0x38>)
 800ce2c:	4299      	cmp	r1, r3
 800ce2e:	d002      	beq.n	800ce36 <cleanup_stdio+0x1e>
 800ce30:	4620      	mov	r0, r4
 800ce32:	f000 fd49 	bl	800d8c8 <_fflush_r>
 800ce36:	68e1      	ldr	r1, [r4, #12]
 800ce38:	4b06      	ldr	r3, [pc, #24]	@ (800ce54 <cleanup_stdio+0x3c>)
 800ce3a:	4299      	cmp	r1, r3
 800ce3c:	d004      	beq.n	800ce48 <cleanup_stdio+0x30>
 800ce3e:	4620      	mov	r0, r4
 800ce40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce44:	f000 bd40 	b.w	800d8c8 <_fflush_r>
 800ce48:	bd10      	pop	{r4, pc}
 800ce4a:	bf00      	nop
 800ce4c:	200002b4 	.word	0x200002b4
 800ce50:	2000031c 	.word	0x2000031c
 800ce54:	20000384 	.word	0x20000384

0800ce58 <global_stdio_init.part.0>:
 800ce58:	b510      	push	{r4, lr}
 800ce5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ce88 <global_stdio_init.part.0+0x30>)
 800ce5c:	2104      	movs	r1, #4
 800ce5e:	4c0b      	ldr	r4, [pc, #44]	@ (800ce8c <global_stdio_init.part.0+0x34>)
 800ce60:	4a0b      	ldr	r2, [pc, #44]	@ (800ce90 <global_stdio_init.part.0+0x38>)
 800ce62:	4620      	mov	r0, r4
 800ce64:	601a      	str	r2, [r3, #0]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f7ff ff94 	bl	800cd94 <std>
 800ce6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ce70:	2201      	movs	r2, #1
 800ce72:	2109      	movs	r1, #9
 800ce74:	f7ff ff8e 	bl	800cd94 <std>
 800ce78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ce7c:	2202      	movs	r2, #2
 800ce7e:	2112      	movs	r1, #18
 800ce80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce84:	f7ff bf86 	b.w	800cd94 <std>
 800ce88:	200003ec 	.word	0x200003ec
 800ce8c:	200002b4 	.word	0x200002b4
 800ce90:	0800ce01 	.word	0x0800ce01

0800ce94 <__sfp_lock_acquire>:
 800ce94:	4801      	ldr	r0, [pc, #4]	@ (800ce9c <__sfp_lock_acquire+0x8>)
 800ce96:	f000 b960 	b.w	800d15a <__retarget_lock_acquire_recursive>
 800ce9a:	bf00      	nop
 800ce9c:	200003f5 	.word	0x200003f5

0800cea0 <__sfp_lock_release>:
 800cea0:	4801      	ldr	r0, [pc, #4]	@ (800cea8 <__sfp_lock_release+0x8>)
 800cea2:	f000 b95b 	b.w	800d15c <__retarget_lock_release_recursive>
 800cea6:	bf00      	nop
 800cea8:	200003f5 	.word	0x200003f5

0800ceac <__sinit>:
 800ceac:	b510      	push	{r4, lr}
 800ceae:	4604      	mov	r4, r0
 800ceb0:	f7ff fff0 	bl	800ce94 <__sfp_lock_acquire>
 800ceb4:	6a23      	ldr	r3, [r4, #32]
 800ceb6:	b11b      	cbz	r3, 800cec0 <__sinit+0x14>
 800ceb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cebc:	f7ff bff0 	b.w	800cea0 <__sfp_lock_release>
 800cec0:	4b04      	ldr	r3, [pc, #16]	@ (800ced4 <__sinit+0x28>)
 800cec2:	6223      	str	r3, [r4, #32]
 800cec4:	4b04      	ldr	r3, [pc, #16]	@ (800ced8 <__sinit+0x2c>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1f5      	bne.n	800ceb8 <__sinit+0xc>
 800cecc:	f7ff ffc4 	bl	800ce58 <global_stdio_init.part.0>
 800ced0:	e7f2      	b.n	800ceb8 <__sinit+0xc>
 800ced2:	bf00      	nop
 800ced4:	0800ce19 	.word	0x0800ce19
 800ced8:	200003ec 	.word	0x200003ec

0800cedc <fiprintf>:
 800cedc:	b40e      	push	{r1, r2, r3}
 800cede:	b503      	push	{r0, r1, lr}
 800cee0:	ab03      	add	r3, sp, #12
 800cee2:	4601      	mov	r1, r0
 800cee4:	4805      	ldr	r0, [pc, #20]	@ (800cefc <fiprintf+0x20>)
 800cee6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceea:	6800      	ldr	r0, [r0, #0]
 800ceec:	9301      	str	r3, [sp, #4]
 800ceee:	f000 f9bf 	bl	800d270 <_vfiprintf_r>
 800cef2:	b002      	add	sp, #8
 800cef4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cef8:	b003      	add	sp, #12
 800cefa:	4770      	bx	lr
 800cefc:	2000006c 	.word	0x2000006c

0800cf00 <_fwalk_sglue>:
 800cf00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf04:	4607      	mov	r7, r0
 800cf06:	4688      	mov	r8, r1
 800cf08:	4614      	mov	r4, r2
 800cf0a:	2600      	movs	r6, #0
 800cf0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf10:	f1b9 0901 	subs.w	r9, r9, #1
 800cf14:	d505      	bpl.n	800cf22 <_fwalk_sglue+0x22>
 800cf16:	6824      	ldr	r4, [r4, #0]
 800cf18:	2c00      	cmp	r4, #0
 800cf1a:	d1f7      	bne.n	800cf0c <_fwalk_sglue+0xc>
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf22:	89ab      	ldrh	r3, [r5, #12]
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d907      	bls.n	800cf38 <_fwalk_sglue+0x38>
 800cf28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	d003      	beq.n	800cf38 <_fwalk_sglue+0x38>
 800cf30:	4629      	mov	r1, r5
 800cf32:	4638      	mov	r0, r7
 800cf34:	47c0      	blx	r8
 800cf36:	4306      	orrs	r6, r0
 800cf38:	3568      	adds	r5, #104	@ 0x68
 800cf3a:	e7e9      	b.n	800cf10 <_fwalk_sglue+0x10>

0800cf3c <iprintf>:
 800cf3c:	b40f      	push	{r0, r1, r2, r3}
 800cf3e:	b507      	push	{r0, r1, r2, lr}
 800cf40:	4906      	ldr	r1, [pc, #24]	@ (800cf5c <iprintf+0x20>)
 800cf42:	ab04      	add	r3, sp, #16
 800cf44:	6808      	ldr	r0, [r1, #0]
 800cf46:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf4a:	6881      	ldr	r1, [r0, #8]
 800cf4c:	9301      	str	r3, [sp, #4]
 800cf4e:	f000 f98f 	bl	800d270 <_vfiprintf_r>
 800cf52:	b003      	add	sp, #12
 800cf54:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf58:	b004      	add	sp, #16
 800cf5a:	4770      	bx	lr
 800cf5c:	2000006c 	.word	0x2000006c

0800cf60 <__sread>:
 800cf60:	b510      	push	{r4, lr}
 800cf62:	460c      	mov	r4, r1
 800cf64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf68:	f000 f898 	bl	800d09c <_read_r>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	bfab      	itete	ge
 800cf70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cf72:	89a3      	ldrhlt	r3, [r4, #12]
 800cf74:	181b      	addge	r3, r3, r0
 800cf76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cf7a:	bfac      	ite	ge
 800cf7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cf7e:	81a3      	strhlt	r3, [r4, #12]
 800cf80:	bd10      	pop	{r4, pc}

0800cf82 <__swrite>:
 800cf82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf86:	461f      	mov	r7, r3
 800cf88:	898b      	ldrh	r3, [r1, #12]
 800cf8a:	4605      	mov	r5, r0
 800cf8c:	460c      	mov	r4, r1
 800cf8e:	05db      	lsls	r3, r3, #23
 800cf90:	4616      	mov	r6, r2
 800cf92:	d505      	bpl.n	800cfa0 <__swrite+0x1e>
 800cf94:	2302      	movs	r3, #2
 800cf96:	2200      	movs	r2, #0
 800cf98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf9c:	f000 f86c 	bl	800d078 <_lseek_r>
 800cfa0:	89a3      	ldrh	r3, [r4, #12]
 800cfa2:	4632      	mov	r2, r6
 800cfa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cfae:	81a3      	strh	r3, [r4, #12]
 800cfb0:	463b      	mov	r3, r7
 800cfb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb6:	f000 b893 	b.w	800d0e0 <_write_r>

0800cfba <__sseek>:
 800cfba:	b510      	push	{r4, lr}
 800cfbc:	460c      	mov	r4, r1
 800cfbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfc2:	f000 f859 	bl	800d078 <_lseek_r>
 800cfc6:	1c43      	adds	r3, r0, #1
 800cfc8:	89a3      	ldrh	r3, [r4, #12]
 800cfca:	bf15      	itete	ne
 800cfcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cfce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cfd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cfd6:	81a3      	strheq	r3, [r4, #12]
 800cfd8:	bf18      	it	ne
 800cfda:	81a3      	strhne	r3, [r4, #12]
 800cfdc:	bd10      	pop	{r4, pc}

0800cfde <__sclose>:
 800cfde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe2:	f000 b839 	b.w	800d058 <_close_r>

0800cfe6 <memcmp>:
 800cfe6:	3901      	subs	r1, #1
 800cfe8:	4402      	add	r2, r0
 800cfea:	b510      	push	{r4, lr}
 800cfec:	4290      	cmp	r0, r2
 800cfee:	d101      	bne.n	800cff4 <memcmp+0xe>
 800cff0:	2000      	movs	r0, #0
 800cff2:	e005      	b.n	800d000 <memcmp+0x1a>
 800cff4:	7803      	ldrb	r3, [r0, #0]
 800cff6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cffa:	42a3      	cmp	r3, r4
 800cffc:	d001      	beq.n	800d002 <memcmp+0x1c>
 800cffe:	1b18      	subs	r0, r3, r4
 800d000:	bd10      	pop	{r4, pc}
 800d002:	3001      	adds	r0, #1
 800d004:	e7f2      	b.n	800cfec <memcmp+0x6>

0800d006 <memset>:
 800d006:	4402      	add	r2, r0
 800d008:	4603      	mov	r3, r0
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d100      	bne.n	800d010 <memset+0xa>
 800d00e:	4770      	bx	lr
 800d010:	f803 1b01 	strb.w	r1, [r3], #1
 800d014:	e7f9      	b.n	800d00a <memset+0x4>

0800d016 <strcspn>:
 800d016:	4603      	mov	r3, r0
 800d018:	b570      	push	{r4, r5, r6, lr}
 800d01a:	461e      	mov	r6, r3
 800d01c:	f813 4b01 	ldrb.w	r4, [r3], #1
 800d020:	b144      	cbz	r4, 800d034 <strcspn+0x1e>
 800d022:	1e4a      	subs	r2, r1, #1
 800d024:	e001      	b.n	800d02a <strcspn+0x14>
 800d026:	42a5      	cmp	r5, r4
 800d028:	d004      	beq.n	800d034 <strcspn+0x1e>
 800d02a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800d02e:	2d00      	cmp	r5, #0
 800d030:	d1f9      	bne.n	800d026 <strcspn+0x10>
 800d032:	e7f2      	b.n	800d01a <strcspn+0x4>
 800d034:	1a30      	subs	r0, r6, r0
 800d036:	bd70      	pop	{r4, r5, r6, pc}

0800d038 <strspn>:
 800d038:	4603      	mov	r3, r0
 800d03a:	b570      	push	{r4, r5, r6, lr}
 800d03c:	461e      	mov	r6, r3
 800d03e:	f813 4b01 	ldrb.w	r4, [r3], #1
 800d042:	b13c      	cbz	r4, 800d054 <strspn+0x1c>
 800d044:	1e4a      	subs	r2, r1, #1
 800d046:	e001      	b.n	800d04c <strspn+0x14>
 800d048:	42a5      	cmp	r5, r4
 800d04a:	d0f7      	beq.n	800d03c <strspn+0x4>
 800d04c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800d050:	2d00      	cmp	r5, #0
 800d052:	d1f9      	bne.n	800d048 <strspn+0x10>
 800d054:	1a30      	subs	r0, r6, r0
 800d056:	bd70      	pop	{r4, r5, r6, pc}

0800d058 <_close_r>:
 800d058:	b538      	push	{r3, r4, r5, lr}
 800d05a:	2300      	movs	r3, #0
 800d05c:	4d05      	ldr	r5, [pc, #20]	@ (800d074 <_close_r+0x1c>)
 800d05e:	4604      	mov	r4, r0
 800d060:	4608      	mov	r0, r1
 800d062:	602b      	str	r3, [r5, #0]
 800d064:	f7f3 fe34 	bl	8000cd0 <_close>
 800d068:	1c43      	adds	r3, r0, #1
 800d06a:	d102      	bne.n	800d072 <_close_r+0x1a>
 800d06c:	682b      	ldr	r3, [r5, #0]
 800d06e:	b103      	cbz	r3, 800d072 <_close_r+0x1a>
 800d070:	6023      	str	r3, [r4, #0]
 800d072:	bd38      	pop	{r3, r4, r5, pc}
 800d074:	200003f0 	.word	0x200003f0

0800d078 <_lseek_r>:
 800d078:	b538      	push	{r3, r4, r5, lr}
 800d07a:	4604      	mov	r4, r0
 800d07c:	4d06      	ldr	r5, [pc, #24]	@ (800d098 <_lseek_r+0x20>)
 800d07e:	4608      	mov	r0, r1
 800d080:	4611      	mov	r1, r2
 800d082:	2200      	movs	r2, #0
 800d084:	602a      	str	r2, [r5, #0]
 800d086:	461a      	mov	r2, r3
 800d088:	f7f3 fe49 	bl	8000d1e <_lseek>
 800d08c:	1c43      	adds	r3, r0, #1
 800d08e:	d102      	bne.n	800d096 <_lseek_r+0x1e>
 800d090:	682b      	ldr	r3, [r5, #0]
 800d092:	b103      	cbz	r3, 800d096 <_lseek_r+0x1e>
 800d094:	6023      	str	r3, [r4, #0]
 800d096:	bd38      	pop	{r3, r4, r5, pc}
 800d098:	200003f0 	.word	0x200003f0

0800d09c <_read_r>:
 800d09c:	b538      	push	{r3, r4, r5, lr}
 800d09e:	4604      	mov	r4, r0
 800d0a0:	4d06      	ldr	r5, [pc, #24]	@ (800d0bc <_read_r+0x20>)
 800d0a2:	4608      	mov	r0, r1
 800d0a4:	4611      	mov	r1, r2
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	602a      	str	r2, [r5, #0]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	f7f3 fdd7 	bl	8000c5e <_read>
 800d0b0:	1c43      	adds	r3, r0, #1
 800d0b2:	d102      	bne.n	800d0ba <_read_r+0x1e>
 800d0b4:	682b      	ldr	r3, [r5, #0]
 800d0b6:	b103      	cbz	r3, 800d0ba <_read_r+0x1e>
 800d0b8:	6023      	str	r3, [r4, #0]
 800d0ba:	bd38      	pop	{r3, r4, r5, pc}
 800d0bc:	200003f0 	.word	0x200003f0

0800d0c0 <_sbrk_r>:
 800d0c0:	b538      	push	{r3, r4, r5, lr}
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	4d05      	ldr	r5, [pc, #20]	@ (800d0dc <_sbrk_r+0x1c>)
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	4608      	mov	r0, r1
 800d0ca:	602b      	str	r3, [r5, #0]
 800d0cc:	f7f3 fe34 	bl	8000d38 <_sbrk>
 800d0d0:	1c43      	adds	r3, r0, #1
 800d0d2:	d102      	bne.n	800d0da <_sbrk_r+0x1a>
 800d0d4:	682b      	ldr	r3, [r5, #0]
 800d0d6:	b103      	cbz	r3, 800d0da <_sbrk_r+0x1a>
 800d0d8:	6023      	str	r3, [r4, #0]
 800d0da:	bd38      	pop	{r3, r4, r5, pc}
 800d0dc:	200003f0 	.word	0x200003f0

0800d0e0 <_write_r>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	4d06      	ldr	r5, [pc, #24]	@ (800d100 <_write_r+0x20>)
 800d0e6:	4608      	mov	r0, r1
 800d0e8:	4611      	mov	r1, r2
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	602a      	str	r2, [r5, #0]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	f7f3 fdd2 	bl	8000c98 <_write>
 800d0f4:	1c43      	adds	r3, r0, #1
 800d0f6:	d102      	bne.n	800d0fe <_write_r+0x1e>
 800d0f8:	682b      	ldr	r3, [r5, #0]
 800d0fa:	b103      	cbz	r3, 800d0fe <_write_r+0x1e>
 800d0fc:	6023      	str	r3, [r4, #0]
 800d0fe:	bd38      	pop	{r3, r4, r5, pc}
 800d100:	200003f0 	.word	0x200003f0

0800d104 <__errno>:
 800d104:	4b01      	ldr	r3, [pc, #4]	@ (800d10c <__errno+0x8>)
 800d106:	6818      	ldr	r0, [r3, #0]
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	2000006c 	.word	0x2000006c

0800d110 <__libc_init_array>:
 800d110:	b570      	push	{r4, r5, r6, lr}
 800d112:	4d0d      	ldr	r5, [pc, #52]	@ (800d148 <__libc_init_array+0x38>)
 800d114:	2600      	movs	r6, #0
 800d116:	4c0d      	ldr	r4, [pc, #52]	@ (800d14c <__libc_init_array+0x3c>)
 800d118:	1b64      	subs	r4, r4, r5
 800d11a:	10a4      	asrs	r4, r4, #2
 800d11c:	42a6      	cmp	r6, r4
 800d11e:	d109      	bne.n	800d134 <__libc_init_array+0x24>
 800d120:	4d0b      	ldr	r5, [pc, #44]	@ (800d150 <__libc_init_array+0x40>)
 800d122:	2600      	movs	r6, #0
 800d124:	4c0b      	ldr	r4, [pc, #44]	@ (800d154 <__libc_init_array+0x44>)
 800d126:	f000 fd61 	bl	800dbec <_init>
 800d12a:	1b64      	subs	r4, r4, r5
 800d12c:	10a4      	asrs	r4, r4, #2
 800d12e:	42a6      	cmp	r6, r4
 800d130:	d105      	bne.n	800d13e <__libc_init_array+0x2e>
 800d132:	bd70      	pop	{r4, r5, r6, pc}
 800d134:	f855 3b04 	ldr.w	r3, [r5], #4
 800d138:	3601      	adds	r6, #1
 800d13a:	4798      	blx	r3
 800d13c:	e7ee      	b.n	800d11c <__libc_init_array+0xc>
 800d13e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d142:	3601      	adds	r6, #1
 800d144:	4798      	blx	r3
 800d146:	e7f2      	b.n	800d12e <__libc_init_array+0x1e>
 800d148:	0800ec4c 	.word	0x0800ec4c
 800d14c:	0800ec4c 	.word	0x0800ec4c
 800d150:	0800ec4c 	.word	0x0800ec4c
 800d154:	0800ec50 	.word	0x0800ec50

0800d158 <__retarget_lock_init_recursive>:
 800d158:	4770      	bx	lr

0800d15a <__retarget_lock_acquire_recursive>:
 800d15a:	4770      	bx	lr

0800d15c <__retarget_lock_release_recursive>:
 800d15c:	4770      	bx	lr

0800d15e <memcpy>:
 800d15e:	440a      	add	r2, r1
 800d160:	1e43      	subs	r3, r0, #1
 800d162:	4291      	cmp	r1, r2
 800d164:	d100      	bne.n	800d168 <memcpy+0xa>
 800d166:	4770      	bx	lr
 800d168:	b510      	push	{r4, lr}
 800d16a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d16e:	4291      	cmp	r1, r2
 800d170:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d174:	d1f9      	bne.n	800d16a <memcpy+0xc>
 800d176:	bd10      	pop	{r4, pc}

0800d178 <abort>:
 800d178:	2006      	movs	r0, #6
 800d17a:	b508      	push	{r3, lr}
 800d17c:	f000 fc88 	bl	800da90 <raise>
 800d180:	2001      	movs	r0, #1
 800d182:	f7f3 fd61 	bl	8000c48 <_exit>
	...

0800d188 <_free_r>:
 800d188:	b538      	push	{r3, r4, r5, lr}
 800d18a:	4605      	mov	r5, r0
 800d18c:	2900      	cmp	r1, #0
 800d18e:	d041      	beq.n	800d214 <_free_r+0x8c>
 800d190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d194:	1f0c      	subs	r4, r1, #4
 800d196:	2b00      	cmp	r3, #0
 800d198:	bfb8      	it	lt
 800d19a:	18e4      	addlt	r4, r4, r3
 800d19c:	f7ff fdee 	bl	800cd7c <__malloc_lock>
 800d1a0:	4a1d      	ldr	r2, [pc, #116]	@ (800d218 <_free_r+0x90>)
 800d1a2:	6813      	ldr	r3, [r2, #0]
 800d1a4:	b933      	cbnz	r3, 800d1b4 <_free_r+0x2c>
 800d1a6:	6063      	str	r3, [r4, #4]
 800d1a8:	6014      	str	r4, [r2, #0]
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1b0:	f7ff bdea 	b.w	800cd88 <__malloc_unlock>
 800d1b4:	42a3      	cmp	r3, r4
 800d1b6:	d908      	bls.n	800d1ca <_free_r+0x42>
 800d1b8:	6820      	ldr	r0, [r4, #0]
 800d1ba:	1821      	adds	r1, r4, r0
 800d1bc:	428b      	cmp	r3, r1
 800d1be:	bf01      	itttt	eq
 800d1c0:	6819      	ldreq	r1, [r3, #0]
 800d1c2:	685b      	ldreq	r3, [r3, #4]
 800d1c4:	1809      	addeq	r1, r1, r0
 800d1c6:	6021      	streq	r1, [r4, #0]
 800d1c8:	e7ed      	b.n	800d1a6 <_free_r+0x1e>
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	b10b      	cbz	r3, 800d1d4 <_free_r+0x4c>
 800d1d0:	42a3      	cmp	r3, r4
 800d1d2:	d9fa      	bls.n	800d1ca <_free_r+0x42>
 800d1d4:	6811      	ldr	r1, [r2, #0]
 800d1d6:	1850      	adds	r0, r2, r1
 800d1d8:	42a0      	cmp	r0, r4
 800d1da:	d10b      	bne.n	800d1f4 <_free_r+0x6c>
 800d1dc:	6820      	ldr	r0, [r4, #0]
 800d1de:	4401      	add	r1, r0
 800d1e0:	1850      	adds	r0, r2, r1
 800d1e2:	6011      	str	r1, [r2, #0]
 800d1e4:	4283      	cmp	r3, r0
 800d1e6:	d1e0      	bne.n	800d1aa <_free_r+0x22>
 800d1e8:	6818      	ldr	r0, [r3, #0]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	4408      	add	r0, r1
 800d1ee:	6053      	str	r3, [r2, #4]
 800d1f0:	6010      	str	r0, [r2, #0]
 800d1f2:	e7da      	b.n	800d1aa <_free_r+0x22>
 800d1f4:	d902      	bls.n	800d1fc <_free_r+0x74>
 800d1f6:	230c      	movs	r3, #12
 800d1f8:	602b      	str	r3, [r5, #0]
 800d1fa:	e7d6      	b.n	800d1aa <_free_r+0x22>
 800d1fc:	6820      	ldr	r0, [r4, #0]
 800d1fe:	1821      	adds	r1, r4, r0
 800d200:	428b      	cmp	r3, r1
 800d202:	bf02      	ittt	eq
 800d204:	6819      	ldreq	r1, [r3, #0]
 800d206:	685b      	ldreq	r3, [r3, #4]
 800d208:	1809      	addeq	r1, r1, r0
 800d20a:	6063      	str	r3, [r4, #4]
 800d20c:	bf08      	it	eq
 800d20e:	6021      	streq	r1, [r4, #0]
 800d210:	6054      	str	r4, [r2, #4]
 800d212:	e7ca      	b.n	800d1aa <_free_r+0x22>
 800d214:	bd38      	pop	{r3, r4, r5, pc}
 800d216:	bf00      	nop
 800d218:	200002b0 	.word	0x200002b0

0800d21c <__sfputc_r>:
 800d21c:	6893      	ldr	r3, [r2, #8]
 800d21e:	3b01      	subs	r3, #1
 800d220:	2b00      	cmp	r3, #0
 800d222:	b410      	push	{r4}
 800d224:	6093      	str	r3, [r2, #8]
 800d226:	da08      	bge.n	800d23a <__sfputc_r+0x1e>
 800d228:	6994      	ldr	r4, [r2, #24]
 800d22a:	42a3      	cmp	r3, r4
 800d22c:	db01      	blt.n	800d232 <__sfputc_r+0x16>
 800d22e:	290a      	cmp	r1, #10
 800d230:	d103      	bne.n	800d23a <__sfputc_r+0x1e>
 800d232:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d236:	f000 bb6f 	b.w	800d918 <__swbuf_r>
 800d23a:	6813      	ldr	r3, [r2, #0]
 800d23c:	1c58      	adds	r0, r3, #1
 800d23e:	6010      	str	r0, [r2, #0]
 800d240:	4608      	mov	r0, r1
 800d242:	7019      	strb	r1, [r3, #0]
 800d244:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <__sfputs_r>:
 800d24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24c:	4606      	mov	r6, r0
 800d24e:	460f      	mov	r7, r1
 800d250:	4614      	mov	r4, r2
 800d252:	18d5      	adds	r5, r2, r3
 800d254:	42ac      	cmp	r4, r5
 800d256:	d101      	bne.n	800d25c <__sfputs_r+0x12>
 800d258:	2000      	movs	r0, #0
 800d25a:	e007      	b.n	800d26c <__sfputs_r+0x22>
 800d25c:	463a      	mov	r2, r7
 800d25e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d262:	4630      	mov	r0, r6
 800d264:	f7ff ffda 	bl	800d21c <__sfputc_r>
 800d268:	1c43      	adds	r3, r0, #1
 800d26a:	d1f3      	bne.n	800d254 <__sfputs_r+0xa>
 800d26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d270 <_vfiprintf_r>:
 800d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d274:	460d      	mov	r5, r1
 800d276:	b09d      	sub	sp, #116	@ 0x74
 800d278:	4614      	mov	r4, r2
 800d27a:	4698      	mov	r8, r3
 800d27c:	4606      	mov	r6, r0
 800d27e:	b118      	cbz	r0, 800d288 <_vfiprintf_r+0x18>
 800d280:	6a03      	ldr	r3, [r0, #32]
 800d282:	b90b      	cbnz	r3, 800d288 <_vfiprintf_r+0x18>
 800d284:	f7ff fe12 	bl	800ceac <__sinit>
 800d288:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d28a:	07d9      	lsls	r1, r3, #31
 800d28c:	d405      	bmi.n	800d29a <_vfiprintf_r+0x2a>
 800d28e:	89ab      	ldrh	r3, [r5, #12]
 800d290:	059a      	lsls	r2, r3, #22
 800d292:	d402      	bmi.n	800d29a <_vfiprintf_r+0x2a>
 800d294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d296:	f7ff ff60 	bl	800d15a <__retarget_lock_acquire_recursive>
 800d29a:	89ab      	ldrh	r3, [r5, #12]
 800d29c:	071b      	lsls	r3, r3, #28
 800d29e:	d501      	bpl.n	800d2a4 <_vfiprintf_r+0x34>
 800d2a0:	692b      	ldr	r3, [r5, #16]
 800d2a2:	b99b      	cbnz	r3, 800d2cc <_vfiprintf_r+0x5c>
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	f000 fb74 	bl	800d994 <__swsetup_r>
 800d2ac:	b170      	cbz	r0, 800d2cc <_vfiprintf_r+0x5c>
 800d2ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2b0:	07dc      	lsls	r4, r3, #31
 800d2b2:	d504      	bpl.n	800d2be <_vfiprintf_r+0x4e>
 800d2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b8:	b01d      	add	sp, #116	@ 0x74
 800d2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2be:	89ab      	ldrh	r3, [r5, #12]
 800d2c0:	0598      	lsls	r0, r3, #22
 800d2c2:	d4f7      	bmi.n	800d2b4 <_vfiprintf_r+0x44>
 800d2c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2c6:	f7ff ff49 	bl	800d15c <__retarget_lock_release_recursive>
 800d2ca:	e7f3      	b.n	800d2b4 <_vfiprintf_r+0x44>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2d2:	f04f 0901 	mov.w	r9, #1
 800d2d6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d48c <_vfiprintf_r+0x21c>
 800d2da:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2dc:	2320      	movs	r3, #32
 800d2de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2e2:	2330      	movs	r3, #48	@ 0x30
 800d2e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2e8:	4623      	mov	r3, r4
 800d2ea:	469a      	mov	sl, r3
 800d2ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2f0:	b10a      	cbz	r2, 800d2f6 <_vfiprintf_r+0x86>
 800d2f2:	2a25      	cmp	r2, #37	@ 0x25
 800d2f4:	d1f9      	bne.n	800d2ea <_vfiprintf_r+0x7a>
 800d2f6:	ebba 0b04 	subs.w	fp, sl, r4
 800d2fa:	d00b      	beq.n	800d314 <_vfiprintf_r+0xa4>
 800d2fc:	465b      	mov	r3, fp
 800d2fe:	4622      	mov	r2, r4
 800d300:	4629      	mov	r1, r5
 800d302:	4630      	mov	r0, r6
 800d304:	f7ff ffa1 	bl	800d24a <__sfputs_r>
 800d308:	3001      	adds	r0, #1
 800d30a:	f000 80a7 	beq.w	800d45c <_vfiprintf_r+0x1ec>
 800d30e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d310:	445a      	add	r2, fp
 800d312:	9209      	str	r2, [sp, #36]	@ 0x24
 800d314:	f89a 3000 	ldrb.w	r3, [sl]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f000 809f 	beq.w	800d45c <_vfiprintf_r+0x1ec>
 800d31e:	2300      	movs	r3, #0
 800d320:	f04f 32ff 	mov.w	r2, #4294967295
 800d324:	f10a 0a01 	add.w	sl, sl, #1
 800d328:	9304      	str	r3, [sp, #16]
 800d32a:	9307      	str	r3, [sp, #28]
 800d32c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d330:	931a      	str	r3, [sp, #104]	@ 0x68
 800d332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d336:	4654      	mov	r4, sl
 800d338:	2205      	movs	r2, #5
 800d33a:	4854      	ldr	r0, [pc, #336]	@ (800d48c <_vfiprintf_r+0x21c>)
 800d33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d340:	f000 fbc2 	bl	800dac8 <memchr>
 800d344:	9a04      	ldr	r2, [sp, #16]
 800d346:	b9d8      	cbnz	r0, 800d380 <_vfiprintf_r+0x110>
 800d348:	06d1      	lsls	r1, r2, #27
 800d34a:	bf44      	itt	mi
 800d34c:	2320      	movmi	r3, #32
 800d34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d352:	0713      	lsls	r3, r2, #28
 800d354:	bf44      	itt	mi
 800d356:	232b      	movmi	r3, #43	@ 0x2b
 800d358:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d35c:	f89a 3000 	ldrb.w	r3, [sl]
 800d360:	2b2a      	cmp	r3, #42	@ 0x2a
 800d362:	d015      	beq.n	800d390 <_vfiprintf_r+0x120>
 800d364:	9a07      	ldr	r2, [sp, #28]
 800d366:	4654      	mov	r4, sl
 800d368:	2000      	movs	r0, #0
 800d36a:	f04f 0c0a 	mov.w	ip, #10
 800d36e:	4621      	mov	r1, r4
 800d370:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d374:	3b30      	subs	r3, #48	@ 0x30
 800d376:	2b09      	cmp	r3, #9
 800d378:	d94b      	bls.n	800d412 <_vfiprintf_r+0x1a2>
 800d37a:	b1b0      	cbz	r0, 800d3aa <_vfiprintf_r+0x13a>
 800d37c:	9207      	str	r2, [sp, #28]
 800d37e:	e014      	b.n	800d3aa <_vfiprintf_r+0x13a>
 800d380:	eba0 0308 	sub.w	r3, r0, r8
 800d384:	46a2      	mov	sl, r4
 800d386:	fa09 f303 	lsl.w	r3, r9, r3
 800d38a:	4313      	orrs	r3, r2
 800d38c:	9304      	str	r3, [sp, #16]
 800d38e:	e7d2      	b.n	800d336 <_vfiprintf_r+0xc6>
 800d390:	9b03      	ldr	r3, [sp, #12]
 800d392:	1d19      	adds	r1, r3, #4
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	9103      	str	r1, [sp, #12]
 800d39a:	bfbb      	ittet	lt
 800d39c:	425b      	neglt	r3, r3
 800d39e:	f042 0202 	orrlt.w	r2, r2, #2
 800d3a2:	9307      	strge	r3, [sp, #28]
 800d3a4:	9307      	strlt	r3, [sp, #28]
 800d3a6:	bfb8      	it	lt
 800d3a8:	9204      	strlt	r2, [sp, #16]
 800d3aa:	7823      	ldrb	r3, [r4, #0]
 800d3ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3ae:	d10a      	bne.n	800d3c6 <_vfiprintf_r+0x156>
 800d3b0:	7863      	ldrb	r3, [r4, #1]
 800d3b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3b4:	d132      	bne.n	800d41c <_vfiprintf_r+0x1ac>
 800d3b6:	9b03      	ldr	r3, [sp, #12]
 800d3b8:	3402      	adds	r4, #2
 800d3ba:	1d1a      	adds	r2, r3, #4
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3c2:	9203      	str	r2, [sp, #12]
 800d3c4:	9305      	str	r3, [sp, #20]
 800d3c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d49c <_vfiprintf_r+0x22c>
 800d3ca:	2203      	movs	r2, #3
 800d3cc:	7821      	ldrb	r1, [r4, #0]
 800d3ce:	4650      	mov	r0, sl
 800d3d0:	f000 fb7a 	bl	800dac8 <memchr>
 800d3d4:	b138      	cbz	r0, 800d3e6 <_vfiprintf_r+0x176>
 800d3d6:	eba0 000a 	sub.w	r0, r0, sl
 800d3da:	2240      	movs	r2, #64	@ 0x40
 800d3dc:	9b04      	ldr	r3, [sp, #16]
 800d3de:	3401      	adds	r4, #1
 800d3e0:	4082      	lsls	r2, r0
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	9304      	str	r3, [sp, #16]
 800d3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ea:	2206      	movs	r2, #6
 800d3ec:	4828      	ldr	r0, [pc, #160]	@ (800d490 <_vfiprintf_r+0x220>)
 800d3ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3f2:	f000 fb69 	bl	800dac8 <memchr>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d03f      	beq.n	800d47a <_vfiprintf_r+0x20a>
 800d3fa:	4b26      	ldr	r3, [pc, #152]	@ (800d494 <_vfiprintf_r+0x224>)
 800d3fc:	bb1b      	cbnz	r3, 800d446 <_vfiprintf_r+0x1d6>
 800d3fe:	9b03      	ldr	r3, [sp, #12]
 800d400:	3307      	adds	r3, #7
 800d402:	f023 0307 	bic.w	r3, r3, #7
 800d406:	3308      	adds	r3, #8
 800d408:	9303      	str	r3, [sp, #12]
 800d40a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d40c:	443b      	add	r3, r7
 800d40e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d410:	e76a      	b.n	800d2e8 <_vfiprintf_r+0x78>
 800d412:	fb0c 3202 	mla	r2, ip, r2, r3
 800d416:	460c      	mov	r4, r1
 800d418:	2001      	movs	r0, #1
 800d41a:	e7a8      	b.n	800d36e <_vfiprintf_r+0xfe>
 800d41c:	2300      	movs	r3, #0
 800d41e:	3401      	adds	r4, #1
 800d420:	f04f 0c0a 	mov.w	ip, #10
 800d424:	4619      	mov	r1, r3
 800d426:	9305      	str	r3, [sp, #20]
 800d428:	4620      	mov	r0, r4
 800d42a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d42e:	3a30      	subs	r2, #48	@ 0x30
 800d430:	2a09      	cmp	r2, #9
 800d432:	d903      	bls.n	800d43c <_vfiprintf_r+0x1cc>
 800d434:	2b00      	cmp	r3, #0
 800d436:	d0c6      	beq.n	800d3c6 <_vfiprintf_r+0x156>
 800d438:	9105      	str	r1, [sp, #20]
 800d43a:	e7c4      	b.n	800d3c6 <_vfiprintf_r+0x156>
 800d43c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d440:	4604      	mov	r4, r0
 800d442:	2301      	movs	r3, #1
 800d444:	e7f0      	b.n	800d428 <_vfiprintf_r+0x1b8>
 800d446:	ab03      	add	r3, sp, #12
 800d448:	462a      	mov	r2, r5
 800d44a:	a904      	add	r1, sp, #16
 800d44c:	4630      	mov	r0, r6
 800d44e:	9300      	str	r3, [sp, #0]
 800d450:	4b11      	ldr	r3, [pc, #68]	@ (800d498 <_vfiprintf_r+0x228>)
 800d452:	f3af 8000 	nop.w
 800d456:	4607      	mov	r7, r0
 800d458:	1c78      	adds	r0, r7, #1
 800d45a:	d1d6      	bne.n	800d40a <_vfiprintf_r+0x19a>
 800d45c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d45e:	07d9      	lsls	r1, r3, #31
 800d460:	d405      	bmi.n	800d46e <_vfiprintf_r+0x1fe>
 800d462:	89ab      	ldrh	r3, [r5, #12]
 800d464:	059a      	lsls	r2, r3, #22
 800d466:	d402      	bmi.n	800d46e <_vfiprintf_r+0x1fe>
 800d468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d46a:	f7ff fe77 	bl	800d15c <__retarget_lock_release_recursive>
 800d46e:	89ab      	ldrh	r3, [r5, #12]
 800d470:	065b      	lsls	r3, r3, #25
 800d472:	f53f af1f 	bmi.w	800d2b4 <_vfiprintf_r+0x44>
 800d476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d478:	e71e      	b.n	800d2b8 <_vfiprintf_r+0x48>
 800d47a:	ab03      	add	r3, sp, #12
 800d47c:	462a      	mov	r2, r5
 800d47e:	a904      	add	r1, sp, #16
 800d480:	4630      	mov	r0, r6
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	4b04      	ldr	r3, [pc, #16]	@ (800d498 <_vfiprintf_r+0x228>)
 800d486:	f000 f87d 	bl	800d584 <_printf_i>
 800d48a:	e7e4      	b.n	800d456 <_vfiprintf_r+0x1e6>
 800d48c:	0800ec10 	.word	0x0800ec10
 800d490:	0800ec1a 	.word	0x0800ec1a
 800d494:	00000000 	.word	0x00000000
 800d498:	0800d24b 	.word	0x0800d24b
 800d49c:	0800ec16 	.word	0x0800ec16

0800d4a0 <_printf_common>:
 800d4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4a4:	4616      	mov	r6, r2
 800d4a6:	4698      	mov	r8, r3
 800d4a8:	688a      	ldr	r2, [r1, #8]
 800d4aa:	4607      	mov	r7, r0
 800d4ac:	690b      	ldr	r3, [r1, #16]
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	bfb8      	it	lt
 800d4b8:	4613      	movlt	r3, r2
 800d4ba:	6033      	str	r3, [r6, #0]
 800d4bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d4c0:	b10a      	cbz	r2, 800d4c6 <_printf_common+0x26>
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	6033      	str	r3, [r6, #0]
 800d4c6:	6823      	ldr	r3, [r4, #0]
 800d4c8:	0699      	lsls	r1, r3, #26
 800d4ca:	bf42      	ittt	mi
 800d4cc:	6833      	ldrmi	r3, [r6, #0]
 800d4ce:	3302      	addmi	r3, #2
 800d4d0:	6033      	strmi	r3, [r6, #0]
 800d4d2:	6825      	ldr	r5, [r4, #0]
 800d4d4:	f015 0506 	ands.w	r5, r5, #6
 800d4d8:	d106      	bne.n	800d4e8 <_printf_common+0x48>
 800d4da:	f104 0a19 	add.w	sl, r4, #25
 800d4de:	68e3      	ldr	r3, [r4, #12]
 800d4e0:	6832      	ldr	r2, [r6, #0]
 800d4e2:	1a9b      	subs	r3, r3, r2
 800d4e4:	42ab      	cmp	r3, r5
 800d4e6:	dc2b      	bgt.n	800d540 <_printf_common+0xa0>
 800d4e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4ec:	6822      	ldr	r2, [r4, #0]
 800d4ee:	3b00      	subs	r3, #0
 800d4f0:	bf18      	it	ne
 800d4f2:	2301      	movne	r3, #1
 800d4f4:	0692      	lsls	r2, r2, #26
 800d4f6:	d430      	bmi.n	800d55a <_printf_common+0xba>
 800d4f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d4fc:	4641      	mov	r1, r8
 800d4fe:	4638      	mov	r0, r7
 800d500:	47c8      	blx	r9
 800d502:	3001      	adds	r0, #1
 800d504:	d023      	beq.n	800d54e <_printf_common+0xae>
 800d506:	6823      	ldr	r3, [r4, #0]
 800d508:	341a      	adds	r4, #26
 800d50a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d50e:	f003 0306 	and.w	r3, r3, #6
 800d512:	2b04      	cmp	r3, #4
 800d514:	bf0a      	itet	eq
 800d516:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d51a:	2500      	movne	r5, #0
 800d51c:	6833      	ldreq	r3, [r6, #0]
 800d51e:	f04f 0600 	mov.w	r6, #0
 800d522:	bf08      	it	eq
 800d524:	1aed      	subeq	r5, r5, r3
 800d526:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d52a:	bf08      	it	eq
 800d52c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d530:	4293      	cmp	r3, r2
 800d532:	bfc4      	itt	gt
 800d534:	1a9b      	subgt	r3, r3, r2
 800d536:	18ed      	addgt	r5, r5, r3
 800d538:	42b5      	cmp	r5, r6
 800d53a:	d11a      	bne.n	800d572 <_printf_common+0xd2>
 800d53c:	2000      	movs	r0, #0
 800d53e:	e008      	b.n	800d552 <_printf_common+0xb2>
 800d540:	2301      	movs	r3, #1
 800d542:	4652      	mov	r2, sl
 800d544:	4641      	mov	r1, r8
 800d546:	4638      	mov	r0, r7
 800d548:	47c8      	blx	r9
 800d54a:	3001      	adds	r0, #1
 800d54c:	d103      	bne.n	800d556 <_printf_common+0xb6>
 800d54e:	f04f 30ff 	mov.w	r0, #4294967295
 800d552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d556:	3501      	adds	r5, #1
 800d558:	e7c1      	b.n	800d4de <_printf_common+0x3e>
 800d55a:	18e1      	adds	r1, r4, r3
 800d55c:	1c5a      	adds	r2, r3, #1
 800d55e:	2030      	movs	r0, #48	@ 0x30
 800d560:	3302      	adds	r3, #2
 800d562:	4422      	add	r2, r4
 800d564:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d568:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d56c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d570:	e7c2      	b.n	800d4f8 <_printf_common+0x58>
 800d572:	2301      	movs	r3, #1
 800d574:	4622      	mov	r2, r4
 800d576:	4641      	mov	r1, r8
 800d578:	4638      	mov	r0, r7
 800d57a:	47c8      	blx	r9
 800d57c:	3001      	adds	r0, #1
 800d57e:	d0e6      	beq.n	800d54e <_printf_common+0xae>
 800d580:	3601      	adds	r6, #1
 800d582:	e7d9      	b.n	800d538 <_printf_common+0x98>

0800d584 <_printf_i>:
 800d584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d588:	7e0f      	ldrb	r7, [r1, #24]
 800d58a:	4691      	mov	r9, r2
 800d58c:	4680      	mov	r8, r0
 800d58e:	460c      	mov	r4, r1
 800d590:	2f78      	cmp	r7, #120	@ 0x78
 800d592:	469a      	mov	sl, r3
 800d594:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d596:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d59a:	d807      	bhi.n	800d5ac <_printf_i+0x28>
 800d59c:	2f62      	cmp	r7, #98	@ 0x62
 800d59e:	d80a      	bhi.n	800d5b6 <_printf_i+0x32>
 800d5a0:	2f00      	cmp	r7, #0
 800d5a2:	f000 80d1 	beq.w	800d748 <_printf_i+0x1c4>
 800d5a6:	2f58      	cmp	r7, #88	@ 0x58
 800d5a8:	f000 80b8 	beq.w	800d71c <_printf_i+0x198>
 800d5ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d5b4:	e03a      	b.n	800d62c <_printf_i+0xa8>
 800d5b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d5ba:	2b15      	cmp	r3, #21
 800d5bc:	d8f6      	bhi.n	800d5ac <_printf_i+0x28>
 800d5be:	a101      	add	r1, pc, #4	@ (adr r1, 800d5c4 <_printf_i+0x40>)
 800d5c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5c4:	0800d61d 	.word	0x0800d61d
 800d5c8:	0800d631 	.word	0x0800d631
 800d5cc:	0800d5ad 	.word	0x0800d5ad
 800d5d0:	0800d5ad 	.word	0x0800d5ad
 800d5d4:	0800d5ad 	.word	0x0800d5ad
 800d5d8:	0800d5ad 	.word	0x0800d5ad
 800d5dc:	0800d631 	.word	0x0800d631
 800d5e0:	0800d5ad 	.word	0x0800d5ad
 800d5e4:	0800d5ad 	.word	0x0800d5ad
 800d5e8:	0800d5ad 	.word	0x0800d5ad
 800d5ec:	0800d5ad 	.word	0x0800d5ad
 800d5f0:	0800d72f 	.word	0x0800d72f
 800d5f4:	0800d65b 	.word	0x0800d65b
 800d5f8:	0800d6e9 	.word	0x0800d6e9
 800d5fc:	0800d5ad 	.word	0x0800d5ad
 800d600:	0800d5ad 	.word	0x0800d5ad
 800d604:	0800d751 	.word	0x0800d751
 800d608:	0800d5ad 	.word	0x0800d5ad
 800d60c:	0800d65b 	.word	0x0800d65b
 800d610:	0800d5ad 	.word	0x0800d5ad
 800d614:	0800d5ad 	.word	0x0800d5ad
 800d618:	0800d6f1 	.word	0x0800d6f1
 800d61c:	6833      	ldr	r3, [r6, #0]
 800d61e:	1d1a      	adds	r2, r3, #4
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	6032      	str	r2, [r6, #0]
 800d624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d628:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d62c:	2301      	movs	r3, #1
 800d62e:	e09c      	b.n	800d76a <_printf_i+0x1e6>
 800d630:	6833      	ldr	r3, [r6, #0]
 800d632:	6820      	ldr	r0, [r4, #0]
 800d634:	1d19      	adds	r1, r3, #4
 800d636:	6031      	str	r1, [r6, #0]
 800d638:	0606      	lsls	r6, r0, #24
 800d63a:	d501      	bpl.n	800d640 <_printf_i+0xbc>
 800d63c:	681d      	ldr	r5, [r3, #0]
 800d63e:	e003      	b.n	800d648 <_printf_i+0xc4>
 800d640:	0645      	lsls	r5, r0, #25
 800d642:	d5fb      	bpl.n	800d63c <_printf_i+0xb8>
 800d644:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d648:	2d00      	cmp	r5, #0
 800d64a:	da03      	bge.n	800d654 <_printf_i+0xd0>
 800d64c:	232d      	movs	r3, #45	@ 0x2d
 800d64e:	426d      	negs	r5, r5
 800d650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d654:	4858      	ldr	r0, [pc, #352]	@ (800d7b8 <_printf_i+0x234>)
 800d656:	230a      	movs	r3, #10
 800d658:	e011      	b.n	800d67e <_printf_i+0xfa>
 800d65a:	6821      	ldr	r1, [r4, #0]
 800d65c:	6833      	ldr	r3, [r6, #0]
 800d65e:	0608      	lsls	r0, r1, #24
 800d660:	f853 5b04 	ldr.w	r5, [r3], #4
 800d664:	d402      	bmi.n	800d66c <_printf_i+0xe8>
 800d666:	0649      	lsls	r1, r1, #25
 800d668:	bf48      	it	mi
 800d66a:	b2ad      	uxthmi	r5, r5
 800d66c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d66e:	6033      	str	r3, [r6, #0]
 800d670:	4851      	ldr	r0, [pc, #324]	@ (800d7b8 <_printf_i+0x234>)
 800d672:	bf14      	ite	ne
 800d674:	230a      	movne	r3, #10
 800d676:	2308      	moveq	r3, #8
 800d678:	2100      	movs	r1, #0
 800d67a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d67e:	6866      	ldr	r6, [r4, #4]
 800d680:	2e00      	cmp	r6, #0
 800d682:	60a6      	str	r6, [r4, #8]
 800d684:	db05      	blt.n	800d692 <_printf_i+0x10e>
 800d686:	6821      	ldr	r1, [r4, #0]
 800d688:	432e      	orrs	r6, r5
 800d68a:	f021 0104 	bic.w	r1, r1, #4
 800d68e:	6021      	str	r1, [r4, #0]
 800d690:	d04b      	beq.n	800d72a <_printf_i+0x1a6>
 800d692:	4616      	mov	r6, r2
 800d694:	fbb5 f1f3 	udiv	r1, r5, r3
 800d698:	fb03 5711 	mls	r7, r3, r1, r5
 800d69c:	5dc7      	ldrb	r7, [r0, r7]
 800d69e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d6a2:	462f      	mov	r7, r5
 800d6a4:	460d      	mov	r5, r1
 800d6a6:	42bb      	cmp	r3, r7
 800d6a8:	d9f4      	bls.n	800d694 <_printf_i+0x110>
 800d6aa:	2b08      	cmp	r3, #8
 800d6ac:	d10b      	bne.n	800d6c6 <_printf_i+0x142>
 800d6ae:	6823      	ldr	r3, [r4, #0]
 800d6b0:	07df      	lsls	r7, r3, #31
 800d6b2:	d508      	bpl.n	800d6c6 <_printf_i+0x142>
 800d6b4:	6923      	ldr	r3, [r4, #16]
 800d6b6:	6861      	ldr	r1, [r4, #4]
 800d6b8:	4299      	cmp	r1, r3
 800d6ba:	bfde      	ittt	le
 800d6bc:	2330      	movle	r3, #48	@ 0x30
 800d6be:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d6c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d6c6:	1b92      	subs	r2, r2, r6
 800d6c8:	6122      	str	r2, [r4, #16]
 800d6ca:	464b      	mov	r3, r9
 800d6cc:	aa03      	add	r2, sp, #12
 800d6ce:	4621      	mov	r1, r4
 800d6d0:	4640      	mov	r0, r8
 800d6d2:	f8cd a000 	str.w	sl, [sp]
 800d6d6:	f7ff fee3 	bl	800d4a0 <_printf_common>
 800d6da:	3001      	adds	r0, #1
 800d6dc:	d14a      	bne.n	800d774 <_printf_i+0x1f0>
 800d6de:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e2:	b004      	add	sp, #16
 800d6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6e8:	6823      	ldr	r3, [r4, #0]
 800d6ea:	f043 0320 	orr.w	r3, r3, #32
 800d6ee:	6023      	str	r3, [r4, #0]
 800d6f0:	2778      	movs	r7, #120	@ 0x78
 800d6f2:	4832      	ldr	r0, [pc, #200]	@ (800d7bc <_printf_i+0x238>)
 800d6f4:	6823      	ldr	r3, [r4, #0]
 800d6f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d6fa:	061f      	lsls	r7, r3, #24
 800d6fc:	6831      	ldr	r1, [r6, #0]
 800d6fe:	f851 5b04 	ldr.w	r5, [r1], #4
 800d702:	d402      	bmi.n	800d70a <_printf_i+0x186>
 800d704:	065f      	lsls	r7, r3, #25
 800d706:	bf48      	it	mi
 800d708:	b2ad      	uxthmi	r5, r5
 800d70a:	6031      	str	r1, [r6, #0]
 800d70c:	07d9      	lsls	r1, r3, #31
 800d70e:	bf44      	itt	mi
 800d710:	f043 0320 	orrmi.w	r3, r3, #32
 800d714:	6023      	strmi	r3, [r4, #0]
 800d716:	b11d      	cbz	r5, 800d720 <_printf_i+0x19c>
 800d718:	2310      	movs	r3, #16
 800d71a:	e7ad      	b.n	800d678 <_printf_i+0xf4>
 800d71c:	4826      	ldr	r0, [pc, #152]	@ (800d7b8 <_printf_i+0x234>)
 800d71e:	e7e9      	b.n	800d6f4 <_printf_i+0x170>
 800d720:	6823      	ldr	r3, [r4, #0]
 800d722:	f023 0320 	bic.w	r3, r3, #32
 800d726:	6023      	str	r3, [r4, #0]
 800d728:	e7f6      	b.n	800d718 <_printf_i+0x194>
 800d72a:	4616      	mov	r6, r2
 800d72c:	e7bd      	b.n	800d6aa <_printf_i+0x126>
 800d72e:	6833      	ldr	r3, [r6, #0]
 800d730:	6825      	ldr	r5, [r4, #0]
 800d732:	1d18      	adds	r0, r3, #4
 800d734:	6961      	ldr	r1, [r4, #20]
 800d736:	6030      	str	r0, [r6, #0]
 800d738:	062e      	lsls	r6, r5, #24
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	d501      	bpl.n	800d742 <_printf_i+0x1be>
 800d73e:	6019      	str	r1, [r3, #0]
 800d740:	e002      	b.n	800d748 <_printf_i+0x1c4>
 800d742:	0668      	lsls	r0, r5, #25
 800d744:	d5fb      	bpl.n	800d73e <_printf_i+0x1ba>
 800d746:	8019      	strh	r1, [r3, #0]
 800d748:	2300      	movs	r3, #0
 800d74a:	4616      	mov	r6, r2
 800d74c:	6123      	str	r3, [r4, #16]
 800d74e:	e7bc      	b.n	800d6ca <_printf_i+0x146>
 800d750:	6833      	ldr	r3, [r6, #0]
 800d752:	2100      	movs	r1, #0
 800d754:	1d1a      	adds	r2, r3, #4
 800d756:	6032      	str	r2, [r6, #0]
 800d758:	681e      	ldr	r6, [r3, #0]
 800d75a:	6862      	ldr	r2, [r4, #4]
 800d75c:	4630      	mov	r0, r6
 800d75e:	f000 f9b3 	bl	800dac8 <memchr>
 800d762:	b108      	cbz	r0, 800d768 <_printf_i+0x1e4>
 800d764:	1b80      	subs	r0, r0, r6
 800d766:	6060      	str	r0, [r4, #4]
 800d768:	6863      	ldr	r3, [r4, #4]
 800d76a:	6123      	str	r3, [r4, #16]
 800d76c:	2300      	movs	r3, #0
 800d76e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d772:	e7aa      	b.n	800d6ca <_printf_i+0x146>
 800d774:	6923      	ldr	r3, [r4, #16]
 800d776:	4632      	mov	r2, r6
 800d778:	4649      	mov	r1, r9
 800d77a:	4640      	mov	r0, r8
 800d77c:	47d0      	blx	sl
 800d77e:	3001      	adds	r0, #1
 800d780:	d0ad      	beq.n	800d6de <_printf_i+0x15a>
 800d782:	6823      	ldr	r3, [r4, #0]
 800d784:	079b      	lsls	r3, r3, #30
 800d786:	d413      	bmi.n	800d7b0 <_printf_i+0x22c>
 800d788:	68e0      	ldr	r0, [r4, #12]
 800d78a:	9b03      	ldr	r3, [sp, #12]
 800d78c:	4298      	cmp	r0, r3
 800d78e:	bfb8      	it	lt
 800d790:	4618      	movlt	r0, r3
 800d792:	e7a6      	b.n	800d6e2 <_printf_i+0x15e>
 800d794:	2301      	movs	r3, #1
 800d796:	4632      	mov	r2, r6
 800d798:	4649      	mov	r1, r9
 800d79a:	4640      	mov	r0, r8
 800d79c:	47d0      	blx	sl
 800d79e:	3001      	adds	r0, #1
 800d7a0:	d09d      	beq.n	800d6de <_printf_i+0x15a>
 800d7a2:	3501      	adds	r5, #1
 800d7a4:	68e3      	ldr	r3, [r4, #12]
 800d7a6:	9903      	ldr	r1, [sp, #12]
 800d7a8:	1a5b      	subs	r3, r3, r1
 800d7aa:	42ab      	cmp	r3, r5
 800d7ac:	dcf2      	bgt.n	800d794 <_printf_i+0x210>
 800d7ae:	e7eb      	b.n	800d788 <_printf_i+0x204>
 800d7b0:	2500      	movs	r5, #0
 800d7b2:	f104 0619 	add.w	r6, r4, #25
 800d7b6:	e7f5      	b.n	800d7a4 <_printf_i+0x220>
 800d7b8:	0800ec21 	.word	0x0800ec21
 800d7bc:	0800ec32 	.word	0x0800ec32

0800d7c0 <__sflush_r>:
 800d7c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c8:	0716      	lsls	r6, r2, #28
 800d7ca:	4605      	mov	r5, r0
 800d7cc:	460c      	mov	r4, r1
 800d7ce:	d454      	bmi.n	800d87a <__sflush_r+0xba>
 800d7d0:	684b      	ldr	r3, [r1, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	dc02      	bgt.n	800d7dc <__sflush_r+0x1c>
 800d7d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	dd48      	ble.n	800d86e <__sflush_r+0xae>
 800d7dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7de:	2e00      	cmp	r6, #0
 800d7e0:	d045      	beq.n	800d86e <__sflush_r+0xae>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d7e8:	682f      	ldr	r7, [r5, #0]
 800d7ea:	6a21      	ldr	r1, [r4, #32]
 800d7ec:	602b      	str	r3, [r5, #0]
 800d7ee:	d030      	beq.n	800d852 <__sflush_r+0x92>
 800d7f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	0759      	lsls	r1, r3, #29
 800d7f6:	d505      	bpl.n	800d804 <__sflush_r+0x44>
 800d7f8:	6863      	ldr	r3, [r4, #4]
 800d7fa:	1ad2      	subs	r2, r2, r3
 800d7fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7fe:	b10b      	cbz	r3, 800d804 <__sflush_r+0x44>
 800d800:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d802:	1ad2      	subs	r2, r2, r3
 800d804:	2300      	movs	r3, #0
 800d806:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d808:	6a21      	ldr	r1, [r4, #32]
 800d80a:	4628      	mov	r0, r5
 800d80c:	47b0      	blx	r6
 800d80e:	1c43      	adds	r3, r0, #1
 800d810:	89a3      	ldrh	r3, [r4, #12]
 800d812:	d106      	bne.n	800d822 <__sflush_r+0x62>
 800d814:	6829      	ldr	r1, [r5, #0]
 800d816:	291d      	cmp	r1, #29
 800d818:	d82b      	bhi.n	800d872 <__sflush_r+0xb2>
 800d81a:	4a2a      	ldr	r2, [pc, #168]	@ (800d8c4 <__sflush_r+0x104>)
 800d81c:	40ca      	lsrs	r2, r1
 800d81e:	07d6      	lsls	r6, r2, #31
 800d820:	d527      	bpl.n	800d872 <__sflush_r+0xb2>
 800d822:	2200      	movs	r2, #0
 800d824:	04d9      	lsls	r1, r3, #19
 800d826:	6062      	str	r2, [r4, #4]
 800d828:	6922      	ldr	r2, [r4, #16]
 800d82a:	6022      	str	r2, [r4, #0]
 800d82c:	d504      	bpl.n	800d838 <__sflush_r+0x78>
 800d82e:	1c42      	adds	r2, r0, #1
 800d830:	d101      	bne.n	800d836 <__sflush_r+0x76>
 800d832:	682b      	ldr	r3, [r5, #0]
 800d834:	b903      	cbnz	r3, 800d838 <__sflush_r+0x78>
 800d836:	6560      	str	r0, [r4, #84]	@ 0x54
 800d838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d83a:	602f      	str	r7, [r5, #0]
 800d83c:	b1b9      	cbz	r1, 800d86e <__sflush_r+0xae>
 800d83e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d842:	4299      	cmp	r1, r3
 800d844:	d002      	beq.n	800d84c <__sflush_r+0x8c>
 800d846:	4628      	mov	r0, r5
 800d848:	f7ff fc9e 	bl	800d188 <_free_r>
 800d84c:	2300      	movs	r3, #0
 800d84e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d850:	e00d      	b.n	800d86e <__sflush_r+0xae>
 800d852:	2301      	movs	r3, #1
 800d854:	4628      	mov	r0, r5
 800d856:	47b0      	blx	r6
 800d858:	4602      	mov	r2, r0
 800d85a:	1c50      	adds	r0, r2, #1
 800d85c:	d1c9      	bne.n	800d7f2 <__sflush_r+0x32>
 800d85e:	682b      	ldr	r3, [r5, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d0c6      	beq.n	800d7f2 <__sflush_r+0x32>
 800d864:	2b1d      	cmp	r3, #29
 800d866:	d001      	beq.n	800d86c <__sflush_r+0xac>
 800d868:	2b16      	cmp	r3, #22
 800d86a:	d11d      	bne.n	800d8a8 <__sflush_r+0xe8>
 800d86c:	602f      	str	r7, [r5, #0]
 800d86e:	2000      	movs	r0, #0
 800d870:	e021      	b.n	800d8b6 <__sflush_r+0xf6>
 800d872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d876:	b21b      	sxth	r3, r3
 800d878:	e01a      	b.n	800d8b0 <__sflush_r+0xf0>
 800d87a:	690f      	ldr	r7, [r1, #16]
 800d87c:	2f00      	cmp	r7, #0
 800d87e:	d0f6      	beq.n	800d86e <__sflush_r+0xae>
 800d880:	0793      	lsls	r3, r2, #30
 800d882:	680e      	ldr	r6, [r1, #0]
 800d884:	600f      	str	r7, [r1, #0]
 800d886:	bf0c      	ite	eq
 800d888:	694b      	ldreq	r3, [r1, #20]
 800d88a:	2300      	movne	r3, #0
 800d88c:	eba6 0807 	sub.w	r8, r6, r7
 800d890:	608b      	str	r3, [r1, #8]
 800d892:	f1b8 0f00 	cmp.w	r8, #0
 800d896:	ddea      	ble.n	800d86e <__sflush_r+0xae>
 800d898:	4643      	mov	r3, r8
 800d89a:	463a      	mov	r2, r7
 800d89c:	6a21      	ldr	r1, [r4, #32]
 800d89e:	4628      	mov	r0, r5
 800d8a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d8a2:	47b0      	blx	r6
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	dc08      	bgt.n	800d8ba <__sflush_r+0xfa>
 800d8a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b4:	81a3      	strh	r3, [r4, #12]
 800d8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ba:	4407      	add	r7, r0
 800d8bc:	eba8 0800 	sub.w	r8, r8, r0
 800d8c0:	e7e7      	b.n	800d892 <__sflush_r+0xd2>
 800d8c2:	bf00      	nop
 800d8c4:	20400001 	.word	0x20400001

0800d8c8 <_fflush_r>:
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	690b      	ldr	r3, [r1, #16]
 800d8cc:	4605      	mov	r5, r0
 800d8ce:	460c      	mov	r4, r1
 800d8d0:	b913      	cbnz	r3, 800d8d8 <_fflush_r+0x10>
 800d8d2:	2500      	movs	r5, #0
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	bd38      	pop	{r3, r4, r5, pc}
 800d8d8:	b118      	cbz	r0, 800d8e2 <_fflush_r+0x1a>
 800d8da:	6a03      	ldr	r3, [r0, #32]
 800d8dc:	b90b      	cbnz	r3, 800d8e2 <_fflush_r+0x1a>
 800d8de:	f7ff fae5 	bl	800ceac <__sinit>
 800d8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d0f3      	beq.n	800d8d2 <_fflush_r+0xa>
 800d8ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d8ec:	07d0      	lsls	r0, r2, #31
 800d8ee:	d404      	bmi.n	800d8fa <_fflush_r+0x32>
 800d8f0:	0599      	lsls	r1, r3, #22
 800d8f2:	d402      	bmi.n	800d8fa <_fflush_r+0x32>
 800d8f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8f6:	f7ff fc30 	bl	800d15a <__retarget_lock_acquire_recursive>
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	4621      	mov	r1, r4
 800d8fe:	f7ff ff5f 	bl	800d7c0 <__sflush_r>
 800d902:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d904:	4605      	mov	r5, r0
 800d906:	07da      	lsls	r2, r3, #31
 800d908:	d4e4      	bmi.n	800d8d4 <_fflush_r+0xc>
 800d90a:	89a3      	ldrh	r3, [r4, #12]
 800d90c:	059b      	lsls	r3, r3, #22
 800d90e:	d4e1      	bmi.n	800d8d4 <_fflush_r+0xc>
 800d910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d912:	f7ff fc23 	bl	800d15c <__retarget_lock_release_recursive>
 800d916:	e7dd      	b.n	800d8d4 <_fflush_r+0xc>

0800d918 <__swbuf_r>:
 800d918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d91a:	460e      	mov	r6, r1
 800d91c:	4614      	mov	r4, r2
 800d91e:	4605      	mov	r5, r0
 800d920:	b118      	cbz	r0, 800d92a <__swbuf_r+0x12>
 800d922:	6a03      	ldr	r3, [r0, #32]
 800d924:	b90b      	cbnz	r3, 800d92a <__swbuf_r+0x12>
 800d926:	f7ff fac1 	bl	800ceac <__sinit>
 800d92a:	69a3      	ldr	r3, [r4, #24]
 800d92c:	60a3      	str	r3, [r4, #8]
 800d92e:	89a3      	ldrh	r3, [r4, #12]
 800d930:	071a      	lsls	r2, r3, #28
 800d932:	d501      	bpl.n	800d938 <__swbuf_r+0x20>
 800d934:	6923      	ldr	r3, [r4, #16]
 800d936:	b943      	cbnz	r3, 800d94a <__swbuf_r+0x32>
 800d938:	4621      	mov	r1, r4
 800d93a:	4628      	mov	r0, r5
 800d93c:	f000 f82a 	bl	800d994 <__swsetup_r>
 800d940:	b118      	cbz	r0, 800d94a <__swbuf_r+0x32>
 800d942:	f04f 37ff 	mov.w	r7, #4294967295
 800d946:	4638      	mov	r0, r7
 800d948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	b2f6      	uxtb	r6, r6
 800d94e:	6922      	ldr	r2, [r4, #16]
 800d950:	4637      	mov	r7, r6
 800d952:	1a98      	subs	r0, r3, r2
 800d954:	6963      	ldr	r3, [r4, #20]
 800d956:	4283      	cmp	r3, r0
 800d958:	dc05      	bgt.n	800d966 <__swbuf_r+0x4e>
 800d95a:	4621      	mov	r1, r4
 800d95c:	4628      	mov	r0, r5
 800d95e:	f7ff ffb3 	bl	800d8c8 <_fflush_r>
 800d962:	2800      	cmp	r0, #0
 800d964:	d1ed      	bne.n	800d942 <__swbuf_r+0x2a>
 800d966:	68a3      	ldr	r3, [r4, #8]
 800d968:	3b01      	subs	r3, #1
 800d96a:	60a3      	str	r3, [r4, #8]
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	1c5a      	adds	r2, r3, #1
 800d970:	6022      	str	r2, [r4, #0]
 800d972:	701e      	strb	r6, [r3, #0]
 800d974:	1c43      	adds	r3, r0, #1
 800d976:	6962      	ldr	r2, [r4, #20]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d004      	beq.n	800d986 <__swbuf_r+0x6e>
 800d97c:	89a3      	ldrh	r3, [r4, #12]
 800d97e:	07db      	lsls	r3, r3, #31
 800d980:	d5e1      	bpl.n	800d946 <__swbuf_r+0x2e>
 800d982:	2e0a      	cmp	r6, #10
 800d984:	d1df      	bne.n	800d946 <__swbuf_r+0x2e>
 800d986:	4621      	mov	r1, r4
 800d988:	4628      	mov	r0, r5
 800d98a:	f7ff ff9d 	bl	800d8c8 <_fflush_r>
 800d98e:	2800      	cmp	r0, #0
 800d990:	d0d9      	beq.n	800d946 <__swbuf_r+0x2e>
 800d992:	e7d6      	b.n	800d942 <__swbuf_r+0x2a>

0800d994 <__swsetup_r>:
 800d994:	b538      	push	{r3, r4, r5, lr}
 800d996:	4b29      	ldr	r3, [pc, #164]	@ (800da3c <__swsetup_r+0xa8>)
 800d998:	4605      	mov	r5, r0
 800d99a:	460c      	mov	r4, r1
 800d99c:	6818      	ldr	r0, [r3, #0]
 800d99e:	b118      	cbz	r0, 800d9a8 <__swsetup_r+0x14>
 800d9a0:	6a03      	ldr	r3, [r0, #32]
 800d9a2:	b90b      	cbnz	r3, 800d9a8 <__swsetup_r+0x14>
 800d9a4:	f7ff fa82 	bl	800ceac <__sinit>
 800d9a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9ac:	0719      	lsls	r1, r3, #28
 800d9ae:	d422      	bmi.n	800d9f6 <__swsetup_r+0x62>
 800d9b0:	06da      	lsls	r2, r3, #27
 800d9b2:	d407      	bmi.n	800d9c4 <__swsetup_r+0x30>
 800d9b4:	2209      	movs	r2, #9
 800d9b6:	602a      	str	r2, [r5, #0]
 800d9b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c0:	81a3      	strh	r3, [r4, #12]
 800d9c2:	e033      	b.n	800da2c <__swsetup_r+0x98>
 800d9c4:	0758      	lsls	r0, r3, #29
 800d9c6:	d512      	bpl.n	800d9ee <__swsetup_r+0x5a>
 800d9c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d9ca:	b141      	cbz	r1, 800d9de <__swsetup_r+0x4a>
 800d9cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d9d0:	4299      	cmp	r1, r3
 800d9d2:	d002      	beq.n	800d9da <__swsetup_r+0x46>
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	f7ff fbd7 	bl	800d188 <_free_r>
 800d9da:	2300      	movs	r3, #0
 800d9dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d9de:	89a3      	ldrh	r3, [r4, #12]
 800d9e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d9e4:	81a3      	strh	r3, [r4, #12]
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	6063      	str	r3, [r4, #4]
 800d9ea:	6923      	ldr	r3, [r4, #16]
 800d9ec:	6023      	str	r3, [r4, #0]
 800d9ee:	89a3      	ldrh	r3, [r4, #12]
 800d9f0:	f043 0308 	orr.w	r3, r3, #8
 800d9f4:	81a3      	strh	r3, [r4, #12]
 800d9f6:	6923      	ldr	r3, [r4, #16]
 800d9f8:	b94b      	cbnz	r3, 800da0e <__swsetup_r+0x7a>
 800d9fa:	89a3      	ldrh	r3, [r4, #12]
 800d9fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800da00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da04:	d003      	beq.n	800da0e <__swsetup_r+0x7a>
 800da06:	4621      	mov	r1, r4
 800da08:	4628      	mov	r0, r5
 800da0a:	f000 f890 	bl	800db2e <__smakebuf_r>
 800da0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da12:	f013 0201 	ands.w	r2, r3, #1
 800da16:	d00a      	beq.n	800da2e <__swsetup_r+0x9a>
 800da18:	2200      	movs	r2, #0
 800da1a:	60a2      	str	r2, [r4, #8]
 800da1c:	6962      	ldr	r2, [r4, #20]
 800da1e:	4252      	negs	r2, r2
 800da20:	61a2      	str	r2, [r4, #24]
 800da22:	6922      	ldr	r2, [r4, #16]
 800da24:	b942      	cbnz	r2, 800da38 <__swsetup_r+0xa4>
 800da26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800da2a:	d1c5      	bne.n	800d9b8 <__swsetup_r+0x24>
 800da2c:	bd38      	pop	{r3, r4, r5, pc}
 800da2e:	0799      	lsls	r1, r3, #30
 800da30:	bf58      	it	pl
 800da32:	6962      	ldrpl	r2, [r4, #20]
 800da34:	60a2      	str	r2, [r4, #8]
 800da36:	e7f4      	b.n	800da22 <__swsetup_r+0x8e>
 800da38:	2000      	movs	r0, #0
 800da3a:	e7f7      	b.n	800da2c <__swsetup_r+0x98>
 800da3c:	2000006c 	.word	0x2000006c

0800da40 <_raise_r>:
 800da40:	291f      	cmp	r1, #31
 800da42:	b538      	push	{r3, r4, r5, lr}
 800da44:	4605      	mov	r5, r0
 800da46:	460c      	mov	r4, r1
 800da48:	d904      	bls.n	800da54 <_raise_r+0x14>
 800da4a:	2316      	movs	r3, #22
 800da4c:	6003      	str	r3, [r0, #0]
 800da4e:	f04f 30ff 	mov.w	r0, #4294967295
 800da52:	bd38      	pop	{r3, r4, r5, pc}
 800da54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800da56:	b112      	cbz	r2, 800da5e <_raise_r+0x1e>
 800da58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da5c:	b94b      	cbnz	r3, 800da72 <_raise_r+0x32>
 800da5e:	4628      	mov	r0, r5
 800da60:	f000 f830 	bl	800dac4 <_getpid_r>
 800da64:	4622      	mov	r2, r4
 800da66:	4601      	mov	r1, r0
 800da68:	4628      	mov	r0, r5
 800da6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da6e:	f000 b817 	b.w	800daa0 <_kill_r>
 800da72:	2b01      	cmp	r3, #1
 800da74:	d00a      	beq.n	800da8c <_raise_r+0x4c>
 800da76:	1c59      	adds	r1, r3, #1
 800da78:	d103      	bne.n	800da82 <_raise_r+0x42>
 800da7a:	2316      	movs	r3, #22
 800da7c:	6003      	str	r3, [r0, #0]
 800da7e:	2001      	movs	r0, #1
 800da80:	e7e7      	b.n	800da52 <_raise_r+0x12>
 800da82:	2100      	movs	r1, #0
 800da84:	4620      	mov	r0, r4
 800da86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800da8a:	4798      	blx	r3
 800da8c:	2000      	movs	r0, #0
 800da8e:	e7e0      	b.n	800da52 <_raise_r+0x12>

0800da90 <raise>:
 800da90:	4b02      	ldr	r3, [pc, #8]	@ (800da9c <raise+0xc>)
 800da92:	4601      	mov	r1, r0
 800da94:	6818      	ldr	r0, [r3, #0]
 800da96:	f7ff bfd3 	b.w	800da40 <_raise_r>
 800da9a:	bf00      	nop
 800da9c:	2000006c 	.word	0x2000006c

0800daa0 <_kill_r>:
 800daa0:	b538      	push	{r3, r4, r5, lr}
 800daa2:	2300      	movs	r3, #0
 800daa4:	4d06      	ldr	r5, [pc, #24]	@ (800dac0 <_kill_r+0x20>)
 800daa6:	4604      	mov	r4, r0
 800daa8:	4608      	mov	r0, r1
 800daaa:	4611      	mov	r1, r2
 800daac:	602b      	str	r3, [r5, #0]
 800daae:	f7f3 f8bb 	bl	8000c28 <_kill>
 800dab2:	1c43      	adds	r3, r0, #1
 800dab4:	d102      	bne.n	800dabc <_kill_r+0x1c>
 800dab6:	682b      	ldr	r3, [r5, #0]
 800dab8:	b103      	cbz	r3, 800dabc <_kill_r+0x1c>
 800daba:	6023      	str	r3, [r4, #0]
 800dabc:	bd38      	pop	{r3, r4, r5, pc}
 800dabe:	bf00      	nop
 800dac0:	200003f0 	.word	0x200003f0

0800dac4 <_getpid_r>:
 800dac4:	f7f3 b8a8 	b.w	8000c18 <_getpid>

0800dac8 <memchr>:
 800dac8:	b2c9      	uxtb	r1, r1
 800daca:	4603      	mov	r3, r0
 800dacc:	4402      	add	r2, r0
 800dace:	b510      	push	{r4, lr}
 800dad0:	4293      	cmp	r3, r2
 800dad2:	4618      	mov	r0, r3
 800dad4:	d101      	bne.n	800dada <memchr+0x12>
 800dad6:	2000      	movs	r0, #0
 800dad8:	e003      	b.n	800dae2 <memchr+0x1a>
 800dada:	7804      	ldrb	r4, [r0, #0]
 800dadc:	3301      	adds	r3, #1
 800dade:	428c      	cmp	r4, r1
 800dae0:	d1f6      	bne.n	800dad0 <memchr+0x8>
 800dae2:	bd10      	pop	{r4, pc}

0800dae4 <__swhatbuf_r>:
 800dae4:	b570      	push	{r4, r5, r6, lr}
 800dae6:	460c      	mov	r4, r1
 800dae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daec:	b096      	sub	sp, #88	@ 0x58
 800daee:	4615      	mov	r5, r2
 800daf0:	2900      	cmp	r1, #0
 800daf2:	461e      	mov	r6, r3
 800daf4:	da0c      	bge.n	800db10 <__swhatbuf_r+0x2c>
 800daf6:	89a3      	ldrh	r3, [r4, #12]
 800daf8:	2100      	movs	r1, #0
 800dafa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dafe:	bf14      	ite	ne
 800db00:	2340      	movne	r3, #64	@ 0x40
 800db02:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db06:	2000      	movs	r0, #0
 800db08:	6031      	str	r1, [r6, #0]
 800db0a:	602b      	str	r3, [r5, #0]
 800db0c:	b016      	add	sp, #88	@ 0x58
 800db0e:	bd70      	pop	{r4, r5, r6, pc}
 800db10:	466a      	mov	r2, sp
 800db12:	f000 f849 	bl	800dba8 <_fstat_r>
 800db16:	2800      	cmp	r0, #0
 800db18:	dbed      	blt.n	800daf6 <__swhatbuf_r+0x12>
 800db1a:	9901      	ldr	r1, [sp, #4]
 800db1c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800db20:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db24:	4259      	negs	r1, r3
 800db26:	4159      	adcs	r1, r3
 800db28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db2c:	e7eb      	b.n	800db06 <__swhatbuf_r+0x22>

0800db2e <__smakebuf_r>:
 800db2e:	898b      	ldrh	r3, [r1, #12]
 800db30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db32:	079d      	lsls	r5, r3, #30
 800db34:	4606      	mov	r6, r0
 800db36:	460c      	mov	r4, r1
 800db38:	d507      	bpl.n	800db4a <__smakebuf_r+0x1c>
 800db3a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800db3e:	6023      	str	r3, [r4, #0]
 800db40:	6123      	str	r3, [r4, #16]
 800db42:	2301      	movs	r3, #1
 800db44:	6163      	str	r3, [r4, #20]
 800db46:	b003      	add	sp, #12
 800db48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db4a:	ab01      	add	r3, sp, #4
 800db4c:	466a      	mov	r2, sp
 800db4e:	f7ff ffc9 	bl	800dae4 <__swhatbuf_r>
 800db52:	9f00      	ldr	r7, [sp, #0]
 800db54:	4605      	mov	r5, r0
 800db56:	4630      	mov	r0, r6
 800db58:	4639      	mov	r1, r7
 800db5a:	f7ff f88f 	bl	800cc7c <_malloc_r>
 800db5e:	b948      	cbnz	r0, 800db74 <__smakebuf_r+0x46>
 800db60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db64:	059a      	lsls	r2, r3, #22
 800db66:	d4ee      	bmi.n	800db46 <__smakebuf_r+0x18>
 800db68:	f023 0303 	bic.w	r3, r3, #3
 800db6c:	f043 0302 	orr.w	r3, r3, #2
 800db70:	81a3      	strh	r3, [r4, #12]
 800db72:	e7e2      	b.n	800db3a <__smakebuf_r+0xc>
 800db74:	89a3      	ldrh	r3, [r4, #12]
 800db76:	6020      	str	r0, [r4, #0]
 800db78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db7c:	81a3      	strh	r3, [r4, #12]
 800db7e:	9b01      	ldr	r3, [sp, #4]
 800db80:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800db84:	b15b      	cbz	r3, 800db9e <__smakebuf_r+0x70>
 800db86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db8a:	4630      	mov	r0, r6
 800db8c:	f000 f81e 	bl	800dbcc <_isatty_r>
 800db90:	b128      	cbz	r0, 800db9e <__smakebuf_r+0x70>
 800db92:	89a3      	ldrh	r3, [r4, #12]
 800db94:	f023 0303 	bic.w	r3, r3, #3
 800db98:	f043 0301 	orr.w	r3, r3, #1
 800db9c:	81a3      	strh	r3, [r4, #12]
 800db9e:	89a3      	ldrh	r3, [r4, #12]
 800dba0:	431d      	orrs	r5, r3
 800dba2:	81a5      	strh	r5, [r4, #12]
 800dba4:	e7cf      	b.n	800db46 <__smakebuf_r+0x18>
	...

0800dba8 <_fstat_r>:
 800dba8:	b538      	push	{r3, r4, r5, lr}
 800dbaa:	2300      	movs	r3, #0
 800dbac:	4d06      	ldr	r5, [pc, #24]	@ (800dbc8 <_fstat_r+0x20>)
 800dbae:	4604      	mov	r4, r0
 800dbb0:	4608      	mov	r0, r1
 800dbb2:	4611      	mov	r1, r2
 800dbb4:	602b      	str	r3, [r5, #0]
 800dbb6:	f7f3 f897 	bl	8000ce8 <_fstat>
 800dbba:	1c43      	adds	r3, r0, #1
 800dbbc:	d102      	bne.n	800dbc4 <_fstat_r+0x1c>
 800dbbe:	682b      	ldr	r3, [r5, #0]
 800dbc0:	b103      	cbz	r3, 800dbc4 <_fstat_r+0x1c>
 800dbc2:	6023      	str	r3, [r4, #0]
 800dbc4:	bd38      	pop	{r3, r4, r5, pc}
 800dbc6:	bf00      	nop
 800dbc8:	200003f0 	.word	0x200003f0

0800dbcc <_isatty_r>:
 800dbcc:	b538      	push	{r3, r4, r5, lr}
 800dbce:	2300      	movs	r3, #0
 800dbd0:	4d05      	ldr	r5, [pc, #20]	@ (800dbe8 <_isatty_r+0x1c>)
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	4608      	mov	r0, r1
 800dbd6:	602b      	str	r3, [r5, #0]
 800dbd8:	f7f3 f896 	bl	8000d08 <_isatty>
 800dbdc:	1c43      	adds	r3, r0, #1
 800dbde:	d102      	bne.n	800dbe6 <_isatty_r+0x1a>
 800dbe0:	682b      	ldr	r3, [r5, #0]
 800dbe2:	b103      	cbz	r3, 800dbe6 <_isatty_r+0x1a>
 800dbe4:	6023      	str	r3, [r4, #0]
 800dbe6:	bd38      	pop	{r3, r4, r5, pc}
 800dbe8:	200003f0 	.word	0x200003f0

0800dbec <_init>:
 800dbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbee:	bf00      	nop
 800dbf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbf2:	bc08      	pop	{r3}
 800dbf4:	469e      	mov	lr, r3
 800dbf6:	4770      	bx	lr

0800dbf8 <_fini>:
 800dbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbfa:	bf00      	nop
 800dbfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbfe:	bc08      	pop	{r3}
 800dc00:	469e      	mov	lr, r3
 800dc02:	4770      	bx	lr
